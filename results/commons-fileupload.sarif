{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.1",
        "notifications" : [ {
          "id" : "java/diagnostics/successfully-extracted-files",
          "name" : "java/diagnostics/successfully-extracted-files",
          "shortDescription" : {
            "text" : "Successfully extracted files"
          },
          "fullDescription" : {
            "text" : "A list of all files in the source code directory that were extracted without encountering an error in the file."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "successfully-extracted-files" ],
            "description" : "A list of all files in the source code directory that\n              were extracted without encountering an error in the file.",
            "id" : "java/diagnostics/successfully-extracted-files",
            "kind" : "diagnostic",
            "name" : "Successfully extracted files"
          }
        }, {
          "id" : "java/diagnostics/extraction-errors",
          "name" : "java/diagnostics/extraction-errors",
          "shortDescription" : {
            "text" : "Extraction errors"
          },
          "fullDescription" : {
            "text" : "A list of extraction errors for files in the source code directory."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "description" : "A list of extraction errors for files in the source code directory.",
            "id" : "java/diagnostics/extraction-errors",
            "kind" : "diagnostic",
            "name" : "Extraction errors"
          }
        }, {
          "id" : "java/diagnostics/extraction-warnings",
          "name" : "java/diagnostics/extraction-warnings",
          "shortDescription" : {
            "text" : "Extraction warnings"
          },
          "fullDescription" : {
            "text" : "A list of extraction warnings for files in the source code directory."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "description" : "A list of extraction warnings for files in the source code directory.",
            "id" : "java/diagnostics/extraction-warnings",
            "kind" : "diagnostic",
            "name" : "Extraction warnings"
          }
        }, {
          "id" : "java/baseline/expected-extracted-files",
          "name" : "java/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        }, {
          "id" : "cli/database/analyze",
          "name" : "cli/database/analyze",
          "shortDescription" : {
            "text" : "CodeQL CLI: database analyze"
          },
          "fullDescription" : {
            "text" : "CodeQL CLI: database analyze"
          },
          "defaultConfiguration" : {
            "enabled" : true
          }
        } ],
        "rules" : [ {
          "id" : "java/stack-trace-exposure",
          "name" : "java/stack-trace-exposure",
          "shortDescription" : {
            "text" : "Information exposure through a stack trace"
          },
          "fullDescription" : {
            "text" : "Information from a stack trace propagates to an external user. Stack traces can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-209", "external/cwe/cwe-497" ],
            "description" : "Information from a stack trace propagates to an external user.\n              Stack traces can unintentionally reveal implementation details\n              that are useful to an attacker for developing a subsequent exploit.",
            "id" : "java/stack-trace-exposure",
            "kind" : "problem",
            "name" : "Information exposure through a stack trace",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "5.4"
          }
        }, {
          "id" : "java/insecure-cookie",
          "name" : "java/insecure-cookie",
          "shortDescription" : {
            "text" : "Failure to use secure cookies"
          },
          "fullDescription" : {
            "text" : "Insecure cookies may be sent in cleartext, which makes them vulnerable to interception."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-614" ],
            "description" : "Insecure cookies may be sent in cleartext, which makes them vulnerable to\n              interception.",
            "id" : "java/insecure-cookie",
            "kind" : "problem",
            "name" : "Failure to use secure cookies",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "5.0"
          }
        }, {
          "id" : "java/android/unsafe-content-uri-resolution",
          "name" : "java/android/unsafe-content-uri-resolution",
          "shortDescription" : {
            "text" : "Uncontrolled data used in content resolution"
          },
          "fullDescription" : {
            "text" : "Resolving externally-provided content URIs without validation can allow an attacker to access unexpected resources."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-441", "external/cwe/cwe-610" ],
            "description" : "Resolving externally-provided content URIs without validation can allow an attacker\n              to access unexpected resources.",
            "id" : "java/android/unsafe-content-uri-resolution",
            "kind" : "path-problem",
            "name" : "Uncontrolled data used in content resolution",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/android/implicitly-exported-component",
          "name" : "java/android/implicitly-exported-component",
          "shortDescription" : {
            "text" : "Implicitly exported Android component"
          },
          "fullDescription" : {
            "text" : "Android components with an '<intent-filter>' and no 'android:exported' attribute are implicitly exported, which can allow for improper access to the components themselves and to their data."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-926" ],
            "description" : "Android components with an '<intent-filter>' and no 'android:exported' attribute are implicitly exported, which can allow for improper access to the components themselves and to their data.",
            "id" : "java/android/implicitly-exported-component",
            "kind" : "problem",
            "name" : "Implicitly exported Android component",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "8.2"
          }
        }, {
          "id" : "java/world-writable-file-read",
          "name" : "java/world-writable-file-read",
          "shortDescription" : {
            "text" : "Reading from a world writable file"
          },
          "fullDescription" : {
            "text" : "Reading from a file which is set as world writable is dangerous because the file may be modified or removed by external actors."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-732" ],
            "description" : "Reading from a file which is set as world writable is dangerous because\n              the file may be modified or removed by external actors.",
            "id" : "java/world-writable-file-read",
            "kind" : "problem",
            "name" : "Reading from a world writable file",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/improper-intent-verification",
          "name" : "java/improper-intent-verification",
          "shortDescription" : {
            "text" : "Improper verification of intent by broadcast receiver"
          },
          "fullDescription" : {
            "text" : "A broadcast receiver that does not verify intents it receives may be susceptible to unintended behavior by third party applications sending it explicit intents."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-925" ],
            "description" : "A broadcast receiver that does not verify intents it receives may be susceptible to unintended behavior by third party applications sending it explicit intents.",
            "id" : "java/improper-intent-verification",
            "kind" : "problem",
            "name" : "Improper verification of intent by broadcast receiver",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "8.2"
          }
        }, {
          "id" : "java/predictable-seed",
          "name" : "java/predictable-seed",
          "shortDescription" : {
            "text" : "Use of a predictable seed in a secure random number generator"
          },
          "fullDescription" : {
            "text" : "Using a predictable seed in a pseudo-random number generator can lead to predictability of the numbers generated by it."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-335", "external/cwe/cwe-337" ],
            "description" : "Using a predictable seed in a pseudo-random number generator can lead to predictability of the numbers generated by it.",
            "id" : "java/predictable-seed",
            "kind" : "problem",
            "name" : "Use of a predictable seed in a secure random number generator",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/xslt-injection",
          "name" : "java/xslt-injection",
          "shortDescription" : {
            "text" : "XSLT transformation with user-controlled stylesheet"
          },
          "fullDescription" : {
            "text" : "Performing an XSLT transformation with user-controlled stylesheets can lead to information disclosure or execution of arbitrary code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-074" ],
            "description" : "Performing an XSLT transformation with user-controlled stylesheets can lead to\n              information disclosure or execution of arbitrary code.",
            "id" : "java/xslt-injection",
            "kind" : "path-problem",
            "name" : "XSLT transformation with user-controlled stylesheet",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/jndi-injection",
          "name" : "java/jndi-injection",
          "shortDescription" : {
            "text" : "JNDI lookup with user-controlled name"
          },
          "fullDescription" : {
            "text" : "Performing a JNDI lookup with a user-controlled name can lead to the download of an untrusted object and to execution of arbitrary code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-074" ],
            "description" : "Performing a JNDI lookup with a user-controlled name can lead to the download of an untrusted\n              object and to execution of arbitrary code.",
            "id" : "java/jndi-injection",
            "kind" : "path-problem",
            "name" : "JNDI lookup with user-controlled name",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/overly-large-range",
          "name" : "java/overly-large-range",
          "shortDescription" : {
            "text" : "Overly permissive regular expression range"
          },
          "fullDescription" : {
            "text" : "Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "correctness", "security", "external/cwe/cwe-020" ],
            "description" : "Overly permissive regular expression ranges match a wider range of characters than intended.\n              This may allow an attacker to bypass a filter or sanitizer.",
            "id" : "java/overly-large-range",
            "kind" : "problem",
            "name" : "Overly permissive regular expression range",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "5.0"
          }
        }, {
          "id" : "java/tainted-permissions-check",
          "name" : "java/tainted-permissions-check",
          "shortDescription" : {
            "text" : "User-controlled data used in permissions check"
          },
          "fullDescription" : {
            "text" : "Using user-controlled data in a permissions check may result in inappropriate permissions being granted."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-807", "external/cwe/cwe-290" ],
            "description" : "Using user-controlled data in a permissions check may result in inappropriate\n              permissions being granted.",
            "id" : "java/tainted-permissions-check",
            "kind" : "path-problem",
            "name" : "User-controlled data used in permissions check",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/zipslip",
          "name" : "java/zipslip",
          "shortDescription" : {
            "text" : "Arbitrary file access during archive extraction (\"Zip Slip\")"
          },
          "fullDescription" : {
            "text" : "Extracting files from a malicious ZIP file, or similar type of archive, without validating that the destination file path is within the destination directory can allow an attacker to unexpectedly gain access to resources."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-022" ],
            "description" : "Extracting files from a malicious ZIP file, or similar type of archive, without\n              validating that the destination file path is within the destination directory\n              can allow an attacker to unexpectedly gain access to resources.",
            "id" : "java/zipslip",
            "kind" : "path-problem",
            "name" : "Arbitrary file access during archive extraction (\"Zip Slip\")",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/path-injection",
          "name" : "java/path-injection",
          "shortDescription" : {
            "text" : "Uncontrolled data used in path expression"
          },
          "fullDescription" : {
            "text" : "Accessing paths influenced by users can allow an attacker to access unexpected resources."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-022", "external/cwe/cwe-023", "external/cwe/cwe-036", "external/cwe/cwe-073" ],
            "description" : "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
            "id" : "java/path-injection",
            "kind" : "path-problem",
            "name" : "Uncontrolled data used in path expression",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/tainted-format-string",
          "name" : "java/tainted-format-string",
          "shortDescription" : {
            "text" : "Use of externally-controlled format string"
          },
          "fullDescription" : {
            "text" : "Using external input in format strings can lead to exceptions or information leaks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-134" ],
            "description" : "Using external input in format strings can lead to exceptions or information leaks.",
            "id" : "java/tainted-format-string",
            "kind" : "path-problem",
            "name" : "Use of externally-controlled format string",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/unvalidated-url-redirection",
          "name" : "java/unvalidated-url-redirection",
          "shortDescription" : {
            "text" : "URL redirection from remote source"
          },
          "fullDescription" : {
            "text" : "URL redirection based on unvalidated user-input may cause redirection to malicious web sites."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-601" ],
            "description" : "URL redirection based on unvalidated user-input\n              may cause redirection to malicious web sites.",
            "id" : "java/unvalidated-url-redirection",
            "kind" : "path-problem",
            "name" : "URL redirection from remote source",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "6.1"
          }
        }, {
          "id" : "java/maven/dependency-upon-bintray",
          "name" : "java/maven/dependency-upon-bintray",
          "shortDescription" : {
            "text" : "Depending upon JCenter/Bintray as an artifact repository"
          },
          "fullDescription" : {
            "text" : "Using a deprecated artifact repository may eventually give attackers access for a supply chain attack."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-1104" ],
            "description" : "Using a deprecated artifact repository may eventually give attackers access for a supply chain attack.",
            "id" : "java/maven/dependency-upon-bintray",
            "kind" : "problem",
            "name" : "Depending upon JCenter/Bintray as an artifact repository",
            "precision" : "very-high",
            "problem.severity" : "error",
            "security-severity" : "6.5"
          }
        }, {
          "id" : "java/cleartext-storage-in-cookie",
          "name" : "java/cleartext-storage-in-cookie",
          "shortDescription" : {
            "text" : "Cleartext storage of sensitive information in cookie"
          },
          "fullDescription" : {
            "text" : "Storing sensitive information in cleartext can expose it to an attacker."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-315" ],
            "description" : "Storing sensitive information in cleartext can expose it to an attacker.",
            "id" : "java/cleartext-storage-in-cookie",
            "kind" : "problem",
            "name" : "Cleartext storage of sensitive information in cookie",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "5.0"
          }
        }, {
          "id" : "java/android/backup-enabled",
          "name" : "java/android/backup-enabled",
          "shortDescription" : {
            "text" : "Application backup allowed"
          },
          "fullDescription" : {
            "text" : "Allowing application backups may allow an attacker to extract sensitive data."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-312" ],
            "description" : "Allowing application backups may allow an attacker to extract sensitive data.",
            "id" : "java/android/backup-enabled",
            "kind" : "problem",
            "name" : "Application backup allowed",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/improper-webview-certificate-validation",
          "name" : "java/improper-webview-certificate-validation",
          "shortDescription" : {
            "text" : "Android `WebView` that accepts all certificates"
          },
          "fullDescription" : {
            "text" : "Trusting all certificates allows an attacker to perform a machine-in-the-middle attack."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-295" ],
            "description" : "Trusting all certificates allows an attacker to perform a machine-in-the-middle attack.",
            "id" : "java/improper-webview-certificate-validation",
            "kind" : "problem",
            "name" : "Android `WebView` that accepts all certificates",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/insecure-trustmanager",
          "name" : "java/insecure-trustmanager",
          "shortDescription" : {
            "text" : "`TrustManager` that accepts all certificates"
          },
          "fullDescription" : {
            "text" : "Trusting all certificates allows an attacker to perform a machine-in-the-middle attack."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-295" ],
            "description" : "Trusting all certificates allows an attacker to perform a machine-in-the-middle attack.",
            "id" : "java/insecure-trustmanager",
            "kind" : "path-problem",
            "name" : "`TrustManager` that accepts all certificates",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/partial-path-traversal-from-remote",
          "name" : "java/partial-path-traversal-from-remote",
          "shortDescription" : {
            "text" : "Partial path traversal vulnerability from remote"
          },
          "fullDescription" : {
            "text" : "A prefix used to check that a canonicalised path falls within another must be slash-terminated."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-023" ],
            "description" : "A prefix used to check that a canonicalised path falls within another must be slash-terminated.",
            "id" : "java/partial-path-traversal-from-remote",
            "kind" : "path-problem",
            "name" : "Partial path traversal vulnerability from remote",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/weak-cryptographic-algorithm",
          "name" : "java/weak-cryptographic-algorithm",
          "shortDescription" : {
            "text" : "Use of a broken or risky cryptographic algorithm"
          },
          "fullDescription" : {
            "text" : "Using broken or weak cryptographic algorithms can allow an attacker to compromise security."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-327", "external/cwe/cwe-328" ],
            "description" : "Using broken or weak cryptographic algorithms can allow an attacker to compromise security.",
            "id" : "java/weak-cryptographic-algorithm",
            "kind" : "path-problem",
            "name" : "Use of a broken or risky cryptographic algorithm",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/ognl-injection",
          "name" : "java/ognl-injection",
          "shortDescription" : {
            "text" : "OGNL Expression Language statement with user-controlled input"
          },
          "fullDescription" : {
            "text" : "Evaluation of OGNL Expression Language statement with user-controlled input can lead to execution of arbitrary code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-917" ],
            "description" : "Evaluation of OGNL Expression Language statement with user-controlled input can\n                lead to execution of arbitrary code.",
            "id" : "java/ognl-injection",
            "kind" : "path-problem",
            "name" : "OGNL Expression Language statement with user-controlled input",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/unsafe-deserialization",
          "name" : "java/unsafe-deserialization",
          "shortDescription" : {
            "text" : "Deserialization of user-controlled data"
          },
          "fullDescription" : {
            "text" : "Deserializing user-controlled data may allow attackers to execute arbitrary code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-502" ],
            "description" : "Deserializing user-controlled data may allow attackers to\n              execute arbitrary code.",
            "id" : "java/unsafe-deserialization",
            "kind" : "path-problem",
            "name" : "Deserialization of user-controlled data",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/jhipster-prng",
          "name" : "java/jhipster-prng",
          "shortDescription" : {
            "text" : "Detect JHipster Generator Vulnerability CVE-2019-16303"
          },
          "fullDescription" : {
            "text" : "Using a vulnerable version of JHipster to generate random numbers makes it easier for attackers to take over accounts."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-338" ],
            "description" : "Using a vulnerable version of JHipster to generate random numbers makes it easier for attackers to take over accounts.",
            "id" : "java/jhipster-prng",
            "kind" : "problem",
            "name" : "Detect JHipster Generator Vulnerability CVE-2019-16303",
            "precision" : "very-high",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/android/fragment-injection-preference-activity",
          "name" : "java/android/fragment-injection-preference-activity",
          "shortDescription" : {
            "text" : "Android fragment injection in PreferenceActivity"
          },
          "fullDescription" : {
            "text" : "An insecure implementation of the 'isValidFragment' method of the 'PreferenceActivity' class may allow a malicious application to bypass access controls, exposing the application to unintended effects."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-470" ],
            "description" : "An insecure implementation of the 'isValidFragment' method\n              of the 'PreferenceActivity' class may allow a malicious application to bypass access controls,\n              exposing the application to unintended effects.",
            "id" : "java/android/fragment-injection-preference-activity",
            "kind" : "problem",
            "name" : "Android fragment injection in PreferenceActivity",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/android/fragment-injection",
          "name" : "java/android/fragment-injection",
          "shortDescription" : {
            "text" : "Android fragment injection"
          },
          "fullDescription" : {
            "text" : "Instantiating an Android fragment from a user-provided value may allow a malicious application to bypass access controls, exposing the application to unintended effects."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-470" ],
            "description" : "Instantiating an Android fragment from a user-provided value\n              may allow a malicious application to bypass access controls,  exposing the application to unintended effects.",
            "id" : "java/android/fragment-injection",
            "kind" : "path-problem",
            "name" : "Android fragment injection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/android/intent-uri-permission-manipulation",
          "name" : "java/android/intent-uri-permission-manipulation",
          "shortDescription" : {
            "text" : "Intent URI permission manipulation"
          },
          "fullDescription" : {
            "text" : "Returning an externally provided Intent via 'setResult' may allow a malicious application to access arbitrary content providers of the vulnerable application."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-266", "external/cwe/cwe-926" ],
            "description" : "Returning an externally provided Intent via 'setResult' may allow a malicious\n              application to access arbitrary content providers of the vulnerable application.",
            "id" : "java/android/intent-uri-permission-manipulation",
            "kind" : "path-problem",
            "name" : "Intent URI permission manipulation",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/redos",
          "name" : "java/redos",
          "shortDescription" : {
            "text" : "Inefficient regular expression"
          },
          "fullDescription" : {
            "text" : "A regular expression that requires exponential time to match certain inputs can be a performance bottleneck, and may be vulnerable to denial-of-service attacks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-1333", "external/cwe/cwe-730", "external/cwe/cwe-400" ],
            "description" : "A regular expression that requires exponential time to match certain inputs\n              can be a performance bottleneck, and may be vulnerable to denial-of-service\n              attacks.",
            "id" : "java/redos",
            "kind" : "problem",
            "name" : "Inefficient regular expression",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/polynomial-redos",
          "name" : "java/polynomial-redos",
          "shortDescription" : {
            "text" : "Polynomial regular expression used on uncontrolled data"
          },
          "fullDescription" : {
            "text" : "A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-1333", "external/cwe/cwe-730", "external/cwe/cwe-400" ],
            "description" : "A regular expression that can require polynomial time\n              to match may be vulnerable to denial-of-service attacks.",
            "id" : "java/polynomial-redos",
            "kind" : "path-problem",
            "name" : "Polynomial regular expression used on uncontrolled data",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/regex-injection",
          "name" : "java/regex-injection",
          "shortDescription" : {
            "text" : "Regular expression injection"
          },
          "fullDescription" : {
            "text" : "User input should not be used in regular expressions without first being escaped, otherwise a malicious user may be able to provide a regex that could require exponential time on certain inputs."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-730", "external/cwe/cwe-400" ],
            "description" : "User input should not be used in regular expressions without first being escaped,\n              otherwise a malicious user may be able to provide a regex that could require\n              exponential time on certain inputs.",
            "id" : "java/regex-injection",
            "kind" : "path-problem",
            "name" : "Regular expression injection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/unsafe-hostname-verification",
          "name" : "java/unsafe-hostname-verification",
          "shortDescription" : {
            "text" : "Unsafe hostname verification"
          },
          "fullDescription" : {
            "text" : "Marking a certificate as valid for a host without checking the certificate hostname allows an attacker to perform a machine-in-the-middle attack."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-297" ],
            "description" : "Marking a certificate as valid for a host without checking the certificate hostname allows an attacker to perform a machine-in-the-middle attack.",
            "id" : "java/unsafe-hostname-verification",
            "kind" : "path-problem",
            "name" : "Unsafe hostname verification",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "5.9"
          }
        }, {
          "id" : "java/insufficient-key-size",
          "name" : "java/insufficient-key-size",
          "shortDescription" : {
            "text" : "Use of a cryptographic algorithm with insufficient key size"
          },
          "fullDescription" : {
            "text" : "Using cryptographic algorithms with too small a key size can allow an attacker to compromise security."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-326" ],
            "description" : "Using cryptographic algorithms with too small a key size can\n              allow an attacker to compromise security.",
            "id" : "java/insufficient-key-size",
            "kind" : "path-problem",
            "name" : "Use of a cryptographic algorithm with insufficient key size",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/sql-injection",
          "name" : "java/sql-injection",
          "shortDescription" : {
            "text" : "Query built from user-controlled sources"
          },
          "fullDescription" : {
            "text" : "Building a SQL or Java Persistence query from user-controlled sources is vulnerable to insertion of malicious code by the user."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-089", "external/cwe/cwe-564" ],
            "description" : "Building a SQL or Java Persistence query from user-controlled sources is vulnerable to insertion of\n              malicious code by the user.",
            "id" : "java/sql-injection",
            "kind" : "path-problem",
            "name" : "Query built from user-controlled sources",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "8.8"
          }
        }, {
          "id" : "java/static-initialization-vector",
          "name" : "java/static-initialization-vector",
          "shortDescription" : {
            "text" : "Using a static initialization vector for encryption"
          },
          "fullDescription" : {
            "text" : "An initialization vector (IV) used for ciphers of certain modes (such as CBC or GCM) should be unique and unpredictable, to maximize encryption and prevent dictionary attacks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-329", "external/cwe/cwe-1204" ],
            "description" : "An initialization vector (IV) used for ciphers of certain modes (such as CBC or GCM) should be unique and unpredictable, to maximize encryption and prevent dictionary attacks.",
            "id" : "java/static-initialization-vector",
            "kind" : "path-problem",
            "name" : "Using a static initialization vector for encryption",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/tainted-numeric-cast",
          "name" : "java/tainted-numeric-cast",
          "shortDescription" : {
            "text" : "User-controlled data in numeric cast"
          },
          "fullDescription" : {
            "text" : "Casting user-controlled numeric data to a narrower type without validation can cause unexpected truncation."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-197", "external/cwe/cwe-681" ],
            "description" : "Casting user-controlled numeric data to a narrower type without validation\n              can cause unexpected truncation.",
            "id" : "java/tainted-numeric-cast",
            "kind" : "path-problem",
            "name" : "User-controlled data in numeric cast",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.0"
          }
        }, {
          "id" : "java/xxe",
          "name" : "java/xxe",
          "shortDescription" : {
            "text" : "Resolving XML external entity in user-controlled data"
          },
          "fullDescription" : {
            "text" : "Parsing user-controlled XML documents and allowing expansion of external entity references may lead to disclosure of confidential data or denial of service."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-611", "external/cwe/cwe-776", "external/cwe/cwe-827" ],
            "description" : "Parsing user-controlled XML documents and allowing expansion of external entity\n references may lead to disclosure of confidential data or denial of service.",
            "id" : "java/xxe",
            "kind" : "path-problem",
            "name" : "Resolving XML external entity in user-controlled data",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.1"
          }
        }, {
          "id" : "java/ldap-injection",
          "name" : "java/ldap-injection",
          "shortDescription" : {
            "text" : "LDAP query built from user-controlled sources"
          },
          "fullDescription" : {
            "text" : "Building an LDAP query from user-controlled sources is vulnerable to insertion of malicious LDAP code by the user."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-090" ],
            "description" : "Building an LDAP query from user-controlled sources is vulnerable to insertion of\n              malicious LDAP code by the user.",
            "id" : "java/ldap-injection",
            "kind" : "path-problem",
            "name" : "LDAP query built from user-controlled sources",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/missing-jwt-signature-check",
          "name" : "java/missing-jwt-signature-check",
          "shortDescription" : {
            "text" : "Missing JWT signature check"
          },
          "fullDescription" : {
            "text" : "Failing to check the Json Web Token (JWT) signature may allow an attacker to forge their own tokens."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-347" ],
            "description" : "Failing to check the Json Web Token (JWT) signature may allow an attacker to forge their own tokens.",
            "id" : "java/missing-jwt-signature-check",
            "kind" : "path-problem",
            "name" : "Missing JWT signature check",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/spel-expression-injection",
          "name" : "java/spel-expression-injection",
          "shortDescription" : {
            "text" : "Expression language injection (Spring)"
          },
          "fullDescription" : {
            "text" : "Evaluation of a user-controlled Spring Expression Language (SpEL) expression may lead to remote code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-094" ],
            "description" : "Evaluation of a user-controlled Spring Expression Language (SpEL) expression\n              may lead to remote code execution.",
            "id" : "java/spel-expression-injection",
            "kind" : "path-problem",
            "name" : "Expression language injection (Spring)",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/groovy-injection",
          "name" : "java/groovy-injection",
          "shortDescription" : {
            "text" : "Groovy Language injection"
          },
          "fullDescription" : {
            "text" : "Evaluation of a user-controlled Groovy script may lead to arbitrary code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-094" ],
            "description" : "Evaluation of a user-controlled Groovy script\n              may lead to arbitrary code execution.",
            "id" : "java/groovy-injection",
            "kind" : "path-problem",
            "name" : "Groovy Language injection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/jexl-expression-injection",
          "name" : "java/jexl-expression-injection",
          "shortDescription" : {
            "text" : "Expression language injection (JEXL)"
          },
          "fullDescription" : {
            "text" : "Evaluation of a user-controlled JEXL expression may lead to arbitrary code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-094" ],
            "description" : "Evaluation of a user-controlled JEXL expression\n              may lead to arbitrary code execution.",
            "id" : "java/jexl-expression-injection",
            "kind" : "path-problem",
            "name" : "Expression language injection (JEXL)",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/server-side-template-injection",
          "name" : "java/server-side-template-injection",
          "shortDescription" : {
            "text" : "Server-side template injection"
          },
          "fullDescription" : {
            "text" : "Untrusted input interpreted as a template can lead to remote code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-1336", "external/cwe/cwe-094" ],
            "description" : "Untrusted input interpreted as a template can lead to remote code execution.",
            "id" : "java/server-side-template-injection",
            "kind" : "path-problem",
            "name" : "Server-side template injection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/insecure-bean-validation",
          "name" : "java/insecure-bean-validation",
          "shortDescription" : {
            "text" : "Insecure Bean Validation"
          },
          "fullDescription" : {
            "text" : "User-controlled data may be evaluated as a Java EL expression, leading to arbitrary code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-094" ],
            "description" : "User-controlled data may be evaluated as a Java EL expression, leading to arbitrary code execution.",
            "id" : "java/insecure-bean-validation",
            "kind" : "path-problem",
            "name" : "Insecure Bean Validation",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/mvel-expression-injection",
          "name" : "java/mvel-expression-injection",
          "shortDescription" : {
            "text" : "Expression language injection (MVEL)"
          },
          "fullDescription" : {
            "text" : "Evaluation of a user-controlled MVEL expression may lead to remote code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-094" ],
            "description" : "Evaluation of a user-controlled MVEL expression\n              may lead to remote code execution.",
            "id" : "java/mvel-expression-injection",
            "kind" : "path-problem",
            "name" : "Expression language injection (MVEL)",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/android/implicit-pendingintents",
          "name" : "java/android/implicit-pendingintents",
          "shortDescription" : {
            "text" : "Use of implicit PendingIntents"
          },
          "fullDescription" : {
            "text" : "Sending an implicit and mutable 'PendingIntent' to an unspecified third party component may provide an attacker with access to internal components of the application or cause other unintended effects."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-927" ],
            "description" : "Sending an implicit and mutable 'PendingIntent' to an unspecified third party\n              component may provide an attacker with access to internal components of the\n              application or cause other unintended effects.",
            "id" : "java/android/implicit-pendingintents",
            "kind" : "path-problem",
            "name" : "Use of implicit PendingIntents",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "8.2"
          }
        }, {
          "id" : "java/maven/non-https-url",
          "name" : "java/maven/non-https-url",
          "shortDescription" : {
            "text" : "Failure to use HTTPS or SFTP URL in Maven artifact upload/download"
          },
          "fullDescription" : {
            "text" : "Non-HTTPS connections can be intercepted by third parties."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-300", "external/cwe/cwe-319", "external/cwe/cwe-494", "external/cwe/cwe-829" ],
            "description" : "Non-HTTPS connections can be intercepted by third parties.",
            "id" : "java/maven/non-https-url",
            "kind" : "problem",
            "name" : "Failure to use HTTPS or SFTP URL in Maven artifact upload/download",
            "precision" : "very-high",
            "problem.severity" : "error",
            "security-severity" : "8.1"
          }
        }, {
          "id" : "java/insecure-ldap-auth",
          "name" : "java/insecure-ldap-auth",
          "shortDescription" : {
            "text" : "Insecure LDAP authentication"
          },
          "fullDescription" : {
            "text" : "LDAP authentication with credentials sent in cleartext makes sensitive information vulnerable to remote attackers"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-522", "external/cwe/cwe-319" ],
            "description" : "LDAP authentication with credentials sent in cleartext makes sensitive information vulnerable to remote attackers",
            "id" : "java/insecure-ldap-auth",
            "kind" : "path-problem",
            "name" : "Insecure LDAP authentication",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "8.8"
          }
        }, {
          "id" : "java/rsa-without-oaep",
          "name" : "java/rsa-without-oaep",
          "shortDescription" : {
            "text" : "Use of RSA algorithm without OAEP"
          },
          "fullDescription" : {
            "text" : "Using RSA encryption without OAEP padding can result in a padding oracle attack, leading to a weaker encryption."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-780" ],
            "description" : "Using RSA encryption without OAEP padding can result in a padding oracle attack, leading to a weaker encryption.",
            "id" : "java/rsa-without-oaep",
            "kind" : "path-problem",
            "name" : "Use of RSA algorithm without OAEP",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/xml/xpath-injection",
          "name" : "java/xml/xpath-injection",
          "shortDescription" : {
            "text" : "XPath injection"
          },
          "fullDescription" : {
            "text" : "Building an XPath expression from user-controlled sources is vulnerable to insertion of malicious code by the user."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-643" ],
            "description" : "Building an XPath expression from user-controlled sources is vulnerable to insertion of\n              malicious code by the user.",
            "id" : "java/xml/xpath-injection",
            "kind" : "path-problem",
            "name" : "XPath injection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/android/intent-redirection",
          "name" : "java/android/intent-redirection",
          "shortDescription" : {
            "text" : "Android Intent redirection"
          },
          "fullDescription" : {
            "text" : "Starting Android components with user-provided Intents can provide access to internal components of the application, increasing the attack surface and potentially causing unintended effects."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-926", "external/cwe/cwe-940" ],
            "description" : "Starting Android components with user-provided Intents\n              can provide access to internal components of the application,\n              increasing the attack surface and potentially causing unintended effects.",
            "id" : "java/android/intent-redirection",
            "kind" : "path-problem",
            "name" : "Android Intent redirection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/xss",
          "name" : "java/xss",
          "shortDescription" : {
            "text" : "Cross-site scripting"
          },
          "fullDescription" : {
            "text" : "Writing user input directly to a web page allows for a cross-site scripting vulnerability."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-079" ],
            "description" : "Writing user input directly to a web page\n              allows for a cross-site scripting vulnerability.",
            "id" : "java/xss",
            "kind" : "path-problem",
            "name" : "Cross-site scripting",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "6.1"
          }
        }, {
          "id" : "java/spring-disabled-csrf-protection",
          "name" : "java/spring-disabled-csrf-protection",
          "shortDescription" : {
            "text" : "Disabled Spring CSRF protection"
          },
          "fullDescription" : {
            "text" : "Disabling CSRF protection makes the application vulnerable to a Cross-Site Request Forgery (CSRF) attack."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-352" ],
            "description" : "Disabling CSRF protection makes the application vulnerable to\n              a Cross-Site Request Forgery (CSRF) attack.",
            "id" : "java/spring-disabled-csrf-protection",
            "kind" : "problem",
            "name" : "Disabled Spring CSRF protection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "8.8"
          }
        }, {
          "id" : "java/http-response-splitting",
          "name" : "java/http-response-splitting",
          "shortDescription" : {
            "text" : "HTTP response splitting"
          },
          "fullDescription" : {
            "text" : "Writing user input directly to an HTTP header makes code vulnerable to attack by header splitting."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-113" ],
            "description" : "Writing user input directly to an HTTP header\n              makes code vulnerable to attack by header splitting.",
            "id" : "java/http-response-splitting",
            "kind" : "path-problem",
            "name" : "HTTP response splitting",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "6.1"
          }
        }, {
          "id" : "java/netty-http-request-or-response-splitting",
          "name" : "java/netty-http-request-or-response-splitting",
          "shortDescription" : {
            "text" : "Disabled Netty HTTP header validation"
          },
          "fullDescription" : {
            "text" : "Disabling HTTP header validation makes code vulnerable to attack by header splitting if user input is written directly to an HTTP header."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-93", "external/cwe/cwe-113" ],
            "description" : "Disabling HTTP header validation makes code vulnerable to\n              attack by header splitting if user input is written directly to\n              an HTTP header.",
            "id" : "java/netty-http-request-or-response-splitting",
            "kind" : "problem",
            "name" : "Disabled Netty HTTP header validation",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "6.1"
          }
        }, {
          "id" : "java/android/webview-debugging-enabled",
          "name" : "java/android/webview-debugging-enabled",
          "shortDescription" : {
            "text" : "Android Webview debugging enabled"
          },
          "fullDescription" : {
            "text" : "Enabling Webview debugging in production builds can expose entry points or leak sensitive information."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-489" ],
            "description" : "Enabling Webview debugging in production builds can expose entry points or leak sensitive information.",
            "id" : "java/android/webview-debugging-enabled",
            "kind" : "path-problem",
            "name" : "Android Webview debugging enabled",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "7.2"
          }
        }, {
          "id" : "java/android/debuggable-attribute-enabled",
          "name" : "java/android/debuggable-attribute-enabled",
          "shortDescription" : {
            "text" : "Android debuggable attribute enabled"
          },
          "fullDescription" : {
            "text" : "An enabled debugger can allow for entry points in the application or reveal sensitive information."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-489" ],
            "description" : "An enabled debugger can allow for entry points in the application or reveal sensitive information.",
            "id" : "java/android/debuggable-attribute-enabled",
            "kind" : "problem",
            "name" : "Android debuggable attribute enabled",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "security-severity" : "7.2"
          }
        }, {
          "id" : "java/concatenated-command-line",
          "name" : "java/concatenated-command-line",
          "shortDescription" : {
            "text" : "Building a command line with string concatenation"
          },
          "fullDescription" : {
            "text" : "Using concatenated strings in a command line is vulnerable to malicious insertion of special characters in the strings."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-078", "external/cwe/cwe-088" ],
            "description" : "Using concatenated strings in a command line is vulnerable to malicious\n              insertion of special characters in the strings.",
            "id" : "java/concatenated-command-line",
            "kind" : "problem",
            "name" : "Building a command line with string concatenation",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/command-line-injection",
          "name" : "java/command-line-injection",
          "shortDescription" : {
            "text" : "Uncontrolled command line"
          },
          "fullDescription" : {
            "text" : "Using externally controlled strings in a command line is vulnerable to malicious changes in the strings."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-078", "external/cwe/cwe-088" ],
            "description" : "Using externally controlled strings in a command line is vulnerable to malicious\n              changes in the strings.",
            "id" : "java/command-line-injection",
            "kind" : "path-problem",
            "name" : "Uncontrolled command line",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/ssrf",
          "name" : "java/ssrf",
          "shortDescription" : {
            "text" : "Server-side request forgery"
          },
          "fullDescription" : {
            "text" : "Making web requests based on unvalidated user-input may cause the server to communicate with malicious servers."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-918" ],
            "description" : "Making web requests based on unvalidated user-input\n              may cause the server to communicate with malicious servers.",
            "id" : "java/ssrf",
            "kind" : "path-problem",
            "name" : "Server-side request forgery",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.1"
          }
        }, {
          "id" : "java/implicit-cast-in-compound-assignment",
          "name" : "java/implicit-cast-in-compound-assignment",
          "shortDescription" : {
            "text" : "Implicit narrowing conversion in compound assignment"
          },
          "fullDescription" : {
            "text" : "Compound assignment statements (for example 'intvar += longvar') that implicitly cast a value of a wider type to a narrower type may result in information loss and numeric errors such as overflows."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "security", "external/cwe/cwe-190", "external/cwe/cwe-192", "external/cwe/cwe-197", "external/cwe/cwe-681" ],
            "description" : "Compound assignment statements (for example 'intvar += longvar') that implicitly\n              cast a value of a wider type to a narrower type may result in information loss and\n              numeric errors such as overflows.",
            "id" : "java/implicit-cast-in-compound-assignment",
            "kind" : "problem",
            "name" : "Implicit narrowing conversion in compound assignment",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "security-severity" : "8.1"
          }
        }, {
          "id" : "java/uncontrolled-arithmetic",
          "name" : "java/uncontrolled-arithmetic",
          "shortDescription" : {
            "text" : "Uncontrolled data in arithmetic expression"
          },
          "fullDescription" : {
            "text" : "Arithmetic operations on uncontrolled data that is not validated can cause overflows."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-190", "external/cwe/cwe-191" ],
            "description" : "Arithmetic operations on uncontrolled data that is not validated can cause\n              overflows.",
            "id" : "java/uncontrolled-arithmetic",
            "kind" : "path-problem",
            "name" : "Uncontrolled data in arithmetic expression",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "8.6"
          }
        }, {
          "id" : "java/comparison-with-wider-type",
          "name" : "java/comparison-with-wider-type",
          "shortDescription" : {
            "text" : "Comparison of narrow type with wide type in loop condition"
          },
          "fullDescription" : {
            "text" : "Comparisons between types of different widths in a loop condition can cause the loop to behave unexpectedly."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "security", "external/cwe/cwe-190", "external/cwe/cwe-197" ],
            "description" : "Comparisons between types of different widths in a loop condition can cause the loop\n              to behave unexpectedly.",
            "id" : "java/comparison-with-wider-type",
            "kind" : "problem",
            "name" : "Comparison of narrow type with wide type in loop condition",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "8.1"
          }
        }, {
          "id" : "java/tainted-arithmetic",
          "name" : "java/tainted-arithmetic",
          "shortDescription" : {
            "text" : "User-controlled data in arithmetic expression"
          },
          "fullDescription" : {
            "text" : "Arithmetic operations on user-controlled data that is not validated can cause overflows."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-190", "external/cwe/cwe-191" ],
            "description" : "Arithmetic operations on user-controlled data that is not validated can cause\n              overflows.",
            "id" : "java/tainted-arithmetic",
            "kind" : "path-problem",
            "name" : "User-controlled data in arithmetic expression",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "8.6"
          }
        }, {
          "id" : "java/android/incomplete-provider-permissions",
          "name" : "java/android/incomplete-provider-permissions",
          "shortDescription" : {
            "text" : "Missing read or write permission in a content provider"
          },
          "fullDescription" : {
            "text" : "Android content providers which do not configure both read and write permissions can allow permission bypass."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-926" ],
            "description" : "Android content providers which do not configure both read and write permissions can allow permission bypass.",
            "id" : "java/android/incomplete-provider-permissions",
            "kind" : "problem",
            "name" : "Missing read or write permission in a content provider",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "8.2"
          }
        }, {
          "id" : "java/user-controlled-bypass",
          "name" : "java/user-controlled-bypass",
          "shortDescription" : {
            "text" : "User-controlled bypass of sensitive method"
          },
          "fullDescription" : {
            "text" : "User-controlled bypassing of sensitive methods may allow attackers to avoid passing through authentication systems."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-807", "external/cwe/cwe-290" ],
            "description" : "User-controlled bypassing of sensitive methods may allow attackers to avoid\n              passing through authentication systems.",
            "id" : "java/user-controlled-bypass",
            "kind" : "path-problem",
            "name" : "User-controlled bypass of sensitive method",
            "precision" : "medium",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/hardcoded-credential-api-call",
          "name" : "java/hardcoded-credential-api-call",
          "shortDescription" : {
            "text" : "Hard-coded credential in API call"
          },
          "fullDescription" : {
            "text" : "Using a hard-coded credential in a call to a sensitive Java API may compromise security."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-798" ],
            "description" : "Using a hard-coded credential in a call to a sensitive Java API may compromise security.",
            "id" : "java/hardcoded-credential-api-call",
            "kind" : "path-problem",
            "name" : "Hard-coded credential in API call",
            "precision" : "medium",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/local-temp-file-or-directory-information-disclosure",
          "name" : "java/local-temp-file-or-directory-information-disclosure",
          "shortDescription" : {
            "text" : "Local information disclosure in a temporary directory"
          },
          "fullDescription" : {
            "text" : "Writing information without explicit permissions to a shared temporary directory may disclose it to other users."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-200", "external/cwe/cwe-732" ],
            "description" : "Writing information without explicit permissions to a shared temporary directory may disclose it to other users.",
            "id" : "java/local-temp-file-or-directory-information-disclosure",
            "kind" : "path-problem",
            "name" : "Local information disclosure in a temporary directory",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "6.5"
          }
        }, {
          "id" : "java/android/websettings-allow-content-access",
          "name" : "java/android/websettings-allow-content-access",
          "shortDescription" : {
            "text" : "Android WebView settings allows access to content links"
          },
          "fullDescription" : {
            "text" : "Access to content providers in a WebView can allow access to protected information by loading content:// links."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-200" ],
            "description" : "Access to content providers in a WebView can allow access to protected information by loading content:// links.",
            "id" : "java/android/websettings-allow-content-access",
            "kind" : "problem",
            "name" : "Android WebView settings allows access to content links",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "6.5"
          }
        }, {
          "id" : "java/android/websettings-file-access",
          "name" : "java/android/websettings-file-access",
          "shortDescription" : {
            "text" : "Android WebSettings file access"
          },
          "fullDescription" : {
            "text" : "Enabling access to the file system in a WebView allows attackers to view sensitive information."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-200" ],
            "description" : "Enabling access to the file system in a WebView allows attackers to view sensitive information.",
            "id" : "java/android/websettings-file-access",
            "kind" : "problem",
            "name" : "Android WebSettings file access",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "6.5"
          }
        }, {
          "id" : "java/socket-auth-race-condition",
          "name" : "java/socket-auth-race-condition",
          "shortDescription" : {
            "text" : "Race condition in socket authentication"
          },
          "fullDescription" : {
            "text" : "Opening a socket after authenticating via a different channel may allow an attacker to connect to the port first."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-421" ],
            "description" : "Opening a socket after authenticating via a different channel may allow an attacker to connect to the port first.",
            "id" : "java/socket-auth-race-condition",
            "kind" : "problem",
            "name" : "Race condition in socket authentication",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "7.2"
          }
        }, {
          "id" : "java/android/cleartext-storage-filesystem",
          "name" : "java/android/cleartext-storage-filesystem",
          "shortDescription" : {
            "text" : "Cleartext storage of sensitive information in the Android filesystem"
          },
          "fullDescription" : {
            "text" : "Cleartext storage of sensitive information in the Android filesystem allows access for users with root privileges or unexpected exposure from chained vulnerabilities."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-312" ],
            "description" : "Cleartext storage of sensitive information in the Android filesystem\n              allows access for users with root privileges or unexpected exposure\n              from chained vulnerabilities.",
            "id" : "java/android/cleartext-storage-filesystem",
            "kind" : "problem",
            "name" : "Cleartext storage of sensitive information in the Android filesystem",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/android/cleartext-storage-shared-prefs",
          "name" : "java/android/cleartext-storage-shared-prefs",
          "shortDescription" : {
            "text" : "Cleartext storage of sensitive information using `SharedPreferences` on Android"
          },
          "fullDescription" : {
            "text" : "Cleartext Storage of Sensitive Information using SharedPreferences on Android allows access for users with root privileges or unexpected exposure from chained vulnerabilities."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-312" ],
            "description" : "Cleartext Storage of Sensitive Information using\n              SharedPreferences on Android allows access for users with root\n              privileges or unexpected exposure from chained vulnerabilities.",
            "id" : "java/android/cleartext-storage-shared-prefs",
            "kind" : "problem",
            "name" : "Cleartext storage of sensitive information using `SharedPreferences` on Android",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/cleartext-storage-in-properties",
          "name" : "java/cleartext-storage-in-properties",
          "shortDescription" : {
            "text" : "Cleartext storage of sensitive information using 'Properties' class"
          },
          "fullDescription" : {
            "text" : "Storing sensitive information in cleartext can expose it to an attacker."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-313" ],
            "description" : "Storing sensitive information in cleartext can expose it to an attacker.",
            "id" : "java/cleartext-storage-in-properties",
            "kind" : "problem",
            "name" : "Cleartext storage of sensitive information using 'Properties' class",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/android/cleartext-storage-database",
          "name" : "java/android/cleartext-storage-database",
          "shortDescription" : {
            "text" : "Cleartext storage of sensitive information using a local database on Android"
          },
          "fullDescription" : {
            "text" : "Cleartext Storage of Sensitive Information using a local database on Android allows access for users with root privileges or unexpected exposure from chained vulnerabilities."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-312" ],
            "description" : "Cleartext Storage of Sensitive Information using\n              a local database on Android allows access for users with root\n              privileges or unexpected exposure from chained vulnerabilities.",
            "id" : "java/android/cleartext-storage-database",
            "kind" : "problem",
            "name" : "Cleartext storage of sensitive information using a local database on Android",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/android/missing-certificate-pinning",
          "name" : "java/android/missing-certificate-pinning",
          "shortDescription" : {
            "text" : "Android missing certificate pinning"
          },
          "fullDescription" : {
            "text" : "Network connections that do not use certificate pinning may allow attackers to eavesdrop on communications."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-295" ],
            "description" : "Network connections that do not use certificate pinning may allow attackers to eavesdrop on communications.",
            "id" : "java/android/missing-certificate-pinning",
            "kind" : "problem",
            "name" : "Android missing certificate pinning",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "5.9"
          }
        }, {
          "id" : "java/partial-path-traversal",
          "name" : "java/partial-path-traversal",
          "shortDescription" : {
            "text" : "Partial path traversal vulnerability"
          },
          "fullDescription" : {
            "text" : "A prefix used to check that a canonicalised path falls within another must be slash-terminated."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-023" ],
            "description" : "A prefix used to check that a canonicalised path falls within another must be slash-terminated.",
            "id" : "java/partial-path-traversal",
            "kind" : "problem",
            "name" : "Partial path traversal vulnerability",
            "precision" : "medium",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/potentially-weak-cryptographic-algorithm",
          "name" : "java/potentially-weak-cryptographic-algorithm",
          "shortDescription" : {
            "text" : "Use of a potentially broken or risky cryptographic algorithm"
          },
          "fullDescription" : {
            "text" : "Using broken or weak cryptographic algorithms can allow an attacker to compromise security."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-327", "external/cwe/cwe-328" ],
            "description" : "Using broken or weak cryptographic algorithms can allow an attacker to compromise security.",
            "id" : "java/potentially-weak-cryptographic-algorithm",
            "kind" : "path-problem",
            "name" : "Use of a potentially broken or risky cryptographic algorithm",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/android/sensitive-keyboard-cache",
          "name" : "java/android/sensitive-keyboard-cache",
          "shortDescription" : {
            "text" : "Android sensitive keyboard cache"
          },
          "fullDescription" : {
            "text" : "Allowing the keyboard to cache sensitive information may result in information leaks to other applications."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-524" ],
            "description" : "Allowing the keyboard to cache sensitive information may result in information leaks to other applications.",
            "id" : "java/android/sensitive-keyboard-cache",
            "kind" : "problem",
            "name" : "Android sensitive keyboard cache",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "8.1"
          }
        }, {
          "id" : "java/insecure-smtp-ssl",
          "name" : "java/insecure-smtp-ssl",
          "shortDescription" : {
            "text" : "Insecure JavaMail SSL Configuration"
          },
          "fullDescription" : {
            "text" : "Configuring a Java application to use authenticated mail session over SSL without certificate validation makes the session susceptible to a man-in-the-middle attack."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-297" ],
            "description" : "Configuring a Java application to use authenticated mail session\n              over SSL without certificate validation\n              makes the session susceptible to a man-in-the-middle attack.",
            "id" : "java/insecure-smtp-ssl",
            "kind" : "problem",
            "name" : "Insecure JavaMail SSL Configuration",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "5.9"
          }
        }, {
          "id" : "java/concatenated-sql-query",
          "name" : "java/concatenated-sql-query",
          "shortDescription" : {
            "text" : "Query built by concatenation with a possibly-untrusted string"
          },
          "fullDescription" : {
            "text" : "Building a SQL or Java Persistence query by concatenating a possibly-untrusted string is vulnerable to insertion of malicious code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-089", "external/cwe/cwe-564" ],
            "description" : "Building a SQL or Java Persistence query by concatenating a possibly-untrusted string\n              is vulnerable to insertion of malicious code.",
            "id" : "java/concatenated-sql-query",
            "kind" : "problem",
            "name" : "Query built by concatenation with a possibly-untrusted string",
            "precision" : "medium",
            "problem.severity" : "error",
            "security-severity" : "8.8"
          }
        }, {
          "id" : "java/improper-validation-of-array-construction",
          "name" : "java/improper-validation-of-array-construction",
          "shortDescription" : {
            "text" : "Improper validation of user-provided size used for array construction"
          },
          "fullDescription" : {
            "text" : "Using unvalidated external input as the argument to a construction of an array can lead to index out of bound exceptions."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-129" ],
            "description" : "Using unvalidated external input as the argument to a construction of an array can lead to index out of bound exceptions.",
            "id" : "java/improper-validation-of-array-construction",
            "kind" : "path-problem",
            "name" : "Improper validation of user-provided size used for array construction",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "8.8"
          }
        }, {
          "id" : "java/improper-validation-of-array-index",
          "name" : "java/improper-validation-of-array-index",
          "shortDescription" : {
            "text" : "Improper validation of user-provided array index"
          },
          "fullDescription" : {
            "text" : "Using external input as an index to an array, without proper validation, can lead to index out of bound exceptions."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-129" ],
            "description" : "Using external input as an index to an array, without proper validation, can lead to index out of bound exceptions.",
            "id" : "java/improper-validation-of-array-index",
            "kind" : "path-problem",
            "name" : "Improper validation of user-provided array index",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "8.8"
          }
        }, {
          "id" : "java/trust-boundary-violation",
          "name" : "java/trust-boundary-violation",
          "shortDescription" : {
            "text" : "Trust boundary violation"
          },
          "fullDescription" : {
            "text" : "Modifying the HTTP session attributes based on data from an untrusted source may violate a trust boundary."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-501" ],
            "description" : "Modifying the HTTP session attributes based on data from an untrusted source may violate a trust boundary.",
            "id" : "java/trust-boundary-violation",
            "kind" : "path-problem",
            "name" : "Trust boundary violation",
            "precision" : "medium",
            "problem.severity" : "error",
            "security-severity" : "8.8"
          }
        }, {
          "id" : "java/android/arbitrary-apk-installation",
          "name" : "java/android/arbitrary-apk-installation",
          "shortDescription" : {
            "text" : "Android APK installation"
          },
          "fullDescription" : {
            "text" : "Creating an intent with a URI pointing to a untrusted file can lead to the installation of an untrusted application."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-094" ],
            "description" : "Creating an intent with a URI pointing to a untrusted file can lead to the installation of an untrusted application.",
            "id" : "java/android/arbitrary-apk-installation",
            "kind" : "path-problem",
            "name" : "Android APK installation",
            "precision" : "medium",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/android/sensitive-communication",
          "name" : "java/android/sensitive-communication",
          "shortDescription" : {
            "text" : "Leaking sensitive information through an implicit Intent"
          },
          "fullDescription" : {
            "text" : "An Android application uses implicit Intents containing sensitive data in a way that exposes it to arbitrary applications on the device."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-927" ],
            "description" : "An Android application uses implicit Intents containing sensitive data\n              in a way that exposes it to arbitrary applications on the device.",
            "id" : "java/android/sensitive-communication",
            "kind" : "path-problem",
            "name" : "Leaking sensitive information through an implicit Intent",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "8.2"
          }
        }, {
          "id" : "java/android/sensitive-result-receiver",
          "name" : "java/android/sensitive-result-receiver",
          "shortDescription" : {
            "text" : "Leaking sensitive information through a ResultReceiver"
          },
          "fullDescription" : {
            "text" : "Sending sensitive data to a 'ResultReceiver' obtained from an untrusted source can allow malicious actors access to your information."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-927" ],
            "description" : "Sending sensitive data to a 'ResultReceiver' obtained from an untrusted source\n              can allow malicious actors access to your information.",
            "id" : "java/android/sensitive-result-receiver",
            "kind" : "path-problem",
            "name" : "Leaking sensitive information through a ResultReceiver",
            "precision" : "medium",
            "problem.severity" : "error",
            "security-severity" : "8.2"
          }
        }, {
          "id" : "java/log-injection",
          "name" : "java/log-injection",
          "shortDescription" : {
            "text" : "Log Injection"
          },
          "fullDescription" : {
            "text" : "Building log entries from user-controlled data may allow insertion of forged log entries by malicious users."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-117" ],
            "description" : "Building log entries from user-controlled data may allow\n              insertion of forged log entries by malicious users.",
            "id" : "java/log-injection",
            "kind" : "path-problem",
            "name" : "Log Injection",
            "precision" : "medium",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/potentially-dangerous-function",
          "name" : "java/potentially-dangerous-function",
          "shortDescription" : {
            "text" : "Use of a potentially dangerous function"
          },
          "fullDescription" : {
            "text" : "Certain standard library routines are dangerous to call."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "security", "external/cwe/cwe-676" ],
            "description" : "Certain standard library routines are dangerous to call.",
            "id" : "java/potentially-dangerous-function",
            "kind" : "problem",
            "name" : "Use of a potentially dangerous function",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "10.0"
          }
        }, {
          "id" : "java/unsafe-cert-trust",
          "name" : "java/unsafe-cert-trust",
          "shortDescription" : {
            "text" : "Unsafe certificate trust"
          },
          "fullDescription" : {
            "text" : "SSLSocket/SSLEngine ignores all SSL certificate validation errors when establishing an HTTPS connection, thereby making the app vulnerable to man-in-the-middle attacks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-273" ],
            "description" : "SSLSocket/SSLEngine ignores all SSL certificate validation\n              errors when establishing an HTTPS connection, thereby making\n              the app vulnerable to man-in-the-middle attacks.",
            "id" : "java/unsafe-cert-trust",
            "kind" : "problem",
            "name" : "Unsafe certificate trust",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/insecure-basic-auth",
          "name" : "java/insecure-basic-auth",
          "shortDescription" : {
            "text" : "Insecure basic authentication"
          },
          "fullDescription" : {
            "text" : "Basic authentication only obfuscates username/password in Base64 encoding, which can be easily recognized and reversed. Transmitting sensitive information without using HTTPS makes the data vulnerable to packet sniffing."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-522", "external/cwe/cwe-319" ],
            "description" : "Basic authentication only obfuscates username/password in\n              Base64 encoding, which can be easily recognized and reversed.\n              Transmitting sensitive information without using HTTPS makes\n              the data vulnerable to packet sniffing.",
            "id" : "java/insecure-basic-auth",
            "kind" : "path-problem",
            "name" : "Insecure basic authentication",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "8.8"
          }
        }, {
          "id" : "java/toctou-race-condition",
          "name" : "java/toctou-race-condition",
          "shortDescription" : {
            "text" : "Time-of-check time-of-use race condition"
          },
          "fullDescription" : {
            "text" : "Using a resource after an unsynchronized state check can lead to a race condition, if the state may be changed between the check and use."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-367" ],
            "description" : "Using a resource after an unsynchronized state check can lead to a race condition,\n              if the state may be changed between the check and use.",
            "id" : "java/toctou-race-condition",
            "kind" : "problem",
            "name" : "Time-of-check time-of-use race condition",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "7.7"
          }
        }, {
          "id" : "java/android/websettings-javascript-enabled",
          "name" : "java/android/websettings-javascript-enabled",
          "shortDescription" : {
            "text" : "Android WebView JavaScript settings"
          },
          "fullDescription" : {
            "text" : "Enabling JavaScript execution in a WebView can result in cross-site scripting attacks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-079" ],
            "description" : "Enabling JavaScript execution in a WebView can result in cross-site scripting attacks.",
            "id" : "java/android/websettings-javascript-enabled",
            "kind" : "problem",
            "name" : "Android WebView JavaScript settings",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "6.1"
          }
        }, {
          "id" : "java/android/webview-addjavascriptinterface",
          "name" : "java/android/webview-addjavascriptinterface",
          "shortDescription" : {
            "text" : "Access Java object methods through JavaScript exposure"
          },
          "fullDescription" : {
            "text" : "Exposing a Java object in a WebView with a JavaScript interface can lead to malicious JavaScript controlling the application."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-079" ],
            "description" : "Exposing a Java object in a WebView with a JavaScript interface can lead to malicious JavaScript controlling the application.",
            "id" : "java/android/webview-addjavascriptinterface",
            "kind" : "problem",
            "name" : "Access Java object methods through JavaScript exposure",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "6.1"
          }
        }, {
          "id" : "java/android/unsafe-android-webview-fetch",
          "name" : "java/android/unsafe-android-webview-fetch",
          "shortDescription" : {
            "text" : "Unsafe resource fetching in Android WebView"
          },
          "fullDescription" : {
            "text" : "JavaScript rendered inside WebViews can access protected application files and web resources from any origin exposing them to attack."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-749", "external/cwe/cwe-079" ],
            "description" : "JavaScript rendered inside WebViews can access protected\n              application files and web resources from any origin exposing them to attack.",
            "id" : "java/android/unsafe-android-webview-fetch",
            "kind" : "path-problem",
            "name" : "Unsafe resource fetching in Android WebView",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "6.1"
          }
        }, {
          "id" : "java/unreachable-exit-in-loop",
          "name" : "java/unreachable-exit-in-loop",
          "shortDescription" : {
            "text" : "Loop with unreachable exit condition"
          },
          "fullDescription" : {
            "text" : "An iteration or loop with an exit condition that cannot be reached is an indication of faulty logic and can likely lead to infinite looping."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-835" ],
            "description" : "An iteration or loop with an exit condition that cannot be\n              reached is an indication of faulty logic and can likely lead to infinite\n              looping.",
            "id" : "java/unreachable-exit-in-loop",
            "kind" : "problem",
            "name" : "Loop with unreachable exit condition",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/relative-path-command",
          "name" : "java/relative-path-command",
          "shortDescription" : {
            "text" : "Executing a command with a relative path"
          },
          "fullDescription" : {
            "text" : "Executing a command with a relative path is vulnerable to malicious changes in the PATH environment variable."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-078", "external/cwe/cwe-088" ],
            "description" : "Executing a command with a relative path is vulnerable to\n              malicious changes in the PATH environment variable.",
            "id" : "java/relative-path-command",
            "kind" : "problem",
            "name" : "Executing a command with a relative path",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/sensitive-log",
          "name" : "java/sensitive-log",
          "shortDescription" : {
            "text" : "Insertion of sensitive information into log files"
          },
          "fullDescription" : {
            "text" : "Writing sensitive information to log files can allow that information to be leaked to an attacker more easily."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-532" ],
            "description" : "Writing sensitive information to log files can allow that\n              information to be leaked to an attacker more easily.",
            "id" : "java/sensitive-log",
            "kind" : "path-problem",
            "name" : "Insertion of sensitive information into log files",
            "precision" : "medium",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/unreleased-lock",
          "name" : "java/unreleased-lock",
          "shortDescription" : {
            "text" : "Unreleased lock"
          },
          "fullDescription" : {
            "text" : "A lock that is acquired one or more times without a matching number of unlocks may cause a deadlock."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "security", "external/cwe/cwe-764", "external/cwe/cwe-833" ],
            "description" : "A lock that is acquired one or more times without a matching number of unlocks\n              may cause a deadlock.",
            "id" : "java/unreleased-lock",
            "kind" : "problem",
            "name" : "Unreleased lock",
            "precision" : "medium",
            "problem.severity" : "error",
            "security-severity" : "5.0"
          }
        }, {
          "id" : "java/summary/lines-of-code-kotlin",
          "name" : "java/summary/lines-of-code-kotlin",
          "shortDescription" : {
            "text" : "Total lines of Kotlin code in the database"
          },
          "fullDescription" : {
            "text" : "The total number of lines of code across all Kotlin files. This is a useful metric of the size of a database. For all Kotlin files that were seen during the build, this query counts the lines of code, excluding whitespace or comments."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary" ],
            "description" : "The total number of lines of code across all Kotlin files. This is a useful metric of the size of a database.\n              For all Kotlin files that were seen during the build, this query counts the lines of code, excluding whitespace\n              or comments.",
            "id" : "java/summary/lines-of-code-kotlin",
            "kind" : "metric",
            "name" : "Total lines of Kotlin code in the database"
          }
        }, {
          "id" : "java/summary/lines-of-code",
          "name" : "java/summary/lines-of-code",
          "shortDescription" : {
            "text" : "Total lines of Java/Kotlin code in the database"
          },
          "fullDescription" : {
            "text" : "The total number of lines of code across all Java and Kotlin files. This is a useful metric of the size of a database. For all source files that were seen during the build, this query counts the lines of code, excluding whitespace or comments."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "lines-of-code" ],
            "description" : "The total number of lines of code across all Java and Kotlin files. This is a useful metric of the size of a database.\n              For all source files that were seen during the build, this query counts the lines of code, excluding whitespace\n              or comments.",
            "id" : "java/summary/lines-of-code",
            "kind" : "metric",
            "name" : "Total lines of Java/Kotlin code in the database"
          }
        }, {
          "id" : "java/summary/lines-of-code-java",
          "name" : "java/summary/lines-of-code-java",
          "shortDescription" : {
            "text" : "Total lines of Java code in the database"
          },
          "fullDescription" : {
            "text" : "The total number of lines of code across all Java files. This is a useful metric of the size of a database. For all Java files that were seen during the build, this query counts the lines of code, excluding whitespace or comments."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary" ],
            "description" : "The total number of lines of code across all Java files. This is a useful metric of the size of a database.\n              For all Java files that were seen during the build, this query counts the lines of code, excluding whitespace\n              or comments.",
            "id" : "java/summary/lines-of-code-java",
            "kind" : "metric",
            "name" : "Total lines of Java code in the database"
          }
        }, {
          "id" : "java/telemetry/external-libs",
          "name" : "java/telemetry/external-libs",
          "shortDescription" : {
            "text" : "External libraries"
          },
          "fullDescription" : {
            "text" : "A list of external libraries used in the code"
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "A list of external libraries used in the code",
            "id" : "java/telemetry/external-libs",
            "kind" : "metric",
            "name" : "External libraries"
          }
        }, {
          "id" : "java/telemetry/supported-external-api",
          "name" : "java/telemetry/supported-external-api",
          "shortDescription" : {
            "text" : "Usage of supported APIs coming from external libraries"
          },
          "fullDescription" : {
            "text" : "A list of supported 3rd party APIs used in the codebase. Excludes test and generated code."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "A list of supported 3rd party APIs used in the codebase. Excludes test and generated code.",
            "id" : "java/telemetry/supported-external-api",
            "kind" : "metric",
            "name" : "Usage of supported APIs coming from external libraries"
          }
        }, {
          "id" : "java/telemetry/extraction-information",
          "name" : "java/telemetry/extraction-information",
          "shortDescription" : {
            "text" : "Java extraction information"
          },
          "fullDescription" : {
            "text" : "Information about the extraction for a Java database"
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "Information about the extraction for a Java database",
            "id" : "java/telemetry/extraction-information",
            "kind" : "metric",
            "name" : "Java extraction information"
          }
        }, {
          "id" : "java/telemetry/supported-external-api-taint",
          "name" : "java/telemetry/supported-external-api-taint",
          "shortDescription" : {
            "text" : "Supported flow steps in external libraries"
          },
          "fullDescription" : {
            "text" : "A list of 3rd party APIs detected as flow steps. Excludes test and generated code."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "A list of 3rd party APIs detected as flow steps. Excludes test and generated code.",
            "id" : "java/telemetry/supported-external-api-taint",
            "kind" : "metric",
            "name" : "Supported flow steps in external libraries"
          }
        }, {
          "id" : "java/telemetry/supported-external-api-sinks",
          "name" : "java/telemetry/supported-external-api-sinks",
          "shortDescription" : {
            "text" : "Supported sinks in external libraries"
          },
          "fullDescription" : {
            "text" : "A list of 3rd party APIs detected as sinks. Excludes test and generated code."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "A list of 3rd party APIs detected as sinks. Excludes test and generated code.",
            "id" : "java/telemetry/supported-external-api-sinks",
            "kind" : "metric",
            "name" : "Supported sinks in external libraries"
          }
        }, {
          "id" : "java/telemetry/unsupported-external-api",
          "name" : "java/telemetry/unsupported-external-api",
          "shortDescription" : {
            "text" : "Usage of unsupported APIs coming from external libraries"
          },
          "fullDescription" : {
            "text" : "A list of 3rd party APIs used in the codebase. Excludes test and generated code."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "A list of 3rd party APIs used in the codebase. Excludes test and generated code.",
            "id" : "java/telemetry/unsupported-external-api",
            "kind" : "metric",
            "name" : "Usage of unsupported APIs coming from external libraries"
          }
        }, {
          "id" : "java/telemetry/supported-external-api-sources",
          "name" : "java/telemetry/supported-external-api-sources",
          "shortDescription" : {
            "text" : "Supported sources in external libraries"
          },
          "fullDescription" : {
            "text" : "A list of 3rd party APIs detected as sources. Excludes test and generated code."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "A list of 3rd party APIs detected as sources. Excludes test and generated code.",
            "id" : "java/telemetry/supported-external-api-sources",
            "kind" : "metric",
            "name" : "Supported sources in external libraries"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/java-queries",
        "semanticVersion" : "0.8.3-dev+a0e73eaab0690055226e73836b7704b26875d568",
        "locations" : [ {
          "uri" : "file:///home/kdas006/codeql-home/codeql-repo/java/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///home/kdas006/codeql-home/codeql-repo/java/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "invocations" : [ {
      "toolExecutionNotifications" : [ {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractSizesTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 1
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemFactoryTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 2
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/MimeUtilityTestCase.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 3
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/MultipartStreamTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 4
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemSerializeTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 5
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 6
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/Constants.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 7
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/RFC2231UtilityTestCase.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 8
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractProgressListenerTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 9
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractFileUploadTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 10
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractFileUploadWrapper.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 11
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/QuotedPrintableDecoderTestCase.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 12
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/ParameterParserTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 13
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/FileItemHeadersTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 14
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 15
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractStreamingTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 16
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaServletFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 17
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaServletDiskFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 18
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/package-info.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 19
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaFileCleaner.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 20
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaServletRequestContext.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 21
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaProgressListenerDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 22
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaSizesTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 23
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaSizesDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 24
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaStreamingTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 25
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaMockHttpServletRequest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 26
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaStreamingDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 27
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaServletFileUploadDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 28
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaServletFileUploadTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 29
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaProgressListenerTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 30
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaMockServletHttpRequest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 31
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxServletFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 32
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxServletDiskFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 33
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxServletRequestContext.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 34
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxFileCleaner.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 35
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/package-info.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 36
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxMockHttpServletRequest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 37
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxSizesDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 38
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxProgressListenerDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 39
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxHttpServletRequestFactory.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 40
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxServletFileUploadTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 41
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxServletFileUploadDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 42
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxSizesTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 43
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxStreamingDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 44
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxStreamingTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 45
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxProgressListenerTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 46
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-portlet/src/main/java/org/apache/commons/fileupload2/portlet/JavaxPortletRequestContext.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 47
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-portlet/src/main/java/org/apache/commons/fileupload2/portlet/package-info.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 48
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-portlet/src/main/java/org/apache/commons/fileupload2/portlet/JavaxPortletFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 49
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-portlet/src/test/java/org/apache/commons/fileupload2/portlet/JavaxPortletFileUploadTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 50
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-portlet/src/test/java/org/apache/commons/fileupload2/portlet/JavaxPortletMockActionRequest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 51
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/RequestContext.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 52
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadException.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 53
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/MimeUtils.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 54
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItemFactory.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 55
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/AbstractRequestContext.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 56
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadFileCountLimitException.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 57
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItem.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 58
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/ParameterParser.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 59
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadByteCountLimitException.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 60
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/QuotedPrintableDecoder.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 61
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemHeaders.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 62
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItem.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 63
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/MultipartInput.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 0
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInputImpl.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 64
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemHeadersProvider.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 65
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInputIteratorImpl.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 66
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInputIterator.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 67
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemFactory.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 68
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadContentTypeException.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 69
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/AbstractFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 70
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemHeadersImpl.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 71
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadSizeException.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 72
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/package-info.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 73
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInput.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 74
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/RFC2231Utils.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 75
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/ProgressListener.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 76
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 0
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/AbstractFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 70
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemSerializeTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 5
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxServletFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 32
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-portlet/src/main/java/org/apache/commons/fileupload2/portlet/JavaxPortletFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 49
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInputIterator.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 67
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-portlet/src/test/java/org/apache/commons/fileupload2/portlet/JavaxPortletMockActionRequest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 51
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInputIteratorImpl.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 66
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/MultipartStreamTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 4
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/RFC2231Utils.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 75
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItem.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 63
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxStreamingTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 45
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadContentTypeException.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 69
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaSizesDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 24
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxHttpServletRequestFactory.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 40
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaFileCleaner.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 20
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractSizesTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 1
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxFileCleaner.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 35
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/package-info.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 19
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-portlet/src/test/java/org/apache/commons/fileupload2/portlet/JavaxPortletFileUploadTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 50
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/ParameterParser.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 59
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadFileCountLimitException.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 57
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItemFactory.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 55
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxServletFileUploadDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 42
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemHeaders.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 62
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractFileUploadWrapper.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 11
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaStreamingDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 27
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemFactoryTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 2
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxServletRequestContext.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 34
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaServletDiskFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 18
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaServletFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 17
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/RequestContext.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 52
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxSizesDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 38
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaServletFileUploadDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 28
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaMockHttpServletRequest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 26
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemHeadersImpl.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 71
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractFileUploadTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 10
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/QuotedPrintableDecoder.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 61
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-portlet/src/main/java/org/apache/commons/fileupload2/portlet/package-info.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 48
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/Constants.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 7
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaProgressListenerTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 30
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaStreamingTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 25
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxServletDiskFileUpload.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 33
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/FileItemHeadersTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 14
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-portlet/src/main/java/org/apache/commons/fileupload2/portlet/JavaxPortletRequestContext.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 47
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/QuotedPrintableDecoderTestCase.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 12
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/ParameterParserTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 13
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemHeadersProvider.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 65
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInput.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 74
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxSizesTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 43
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaServletRequestContext.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 21
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxProgressListenerTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 46
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemFactory.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 68
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaServletFileUploadTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 29
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxStreamingDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 44
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxServletFileUploadTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 41
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaProgressListenerDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 22
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 15
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxProgressListenerDiskTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 39
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractStreamingTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 16
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/package-info.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 36
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadSizeException.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 72
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/RFC2231UtilityTestCase.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 8
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaMockServletHttpRequest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 31
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/package-info.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 73
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadByteCountLimitException.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 60
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/MimeUtilityTestCase.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 3
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadException.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 53
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/MultipartInput.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 0
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/MimeUtils.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 54
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxMockHttpServletRequest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 37
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItem.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 58
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/ProgressListener.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 76
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInputImpl.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 64
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractProgressListenerTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 9
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/AbstractRequestContext.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 56
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaSizesTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 23
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractTest.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 6
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/baseline/expected-extracted-files",
          "index" : 3
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          }
        }
      }, {
        "message" : {
          "text" : "A fatal error occurred: Could not write SARIF file\n(eventual cause: NoSuchFileException \"/home/kdas006/dataset/commons-fileupload/~/codeql-home/res/commons-fileupload.sarif\")"
        },
        "level" : "error",
        "timeUtc" : "2023-11-09T03:08:13.924+00:00",
        "descriptor" : {
          "id" : "cli/database/analyze",
          "index" : 4
        },
        "properties" : {
          "attributes" : {
            "exitCode" : 2
          },
          "visibility" : {
            "telemetry" : false
          }
        }
      } ],
      "executionSuccessful" : true
    } ],
    "artifacts" : [ {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/MultipartInput.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.Charset;\n\nimport org.apache.commons.fileupload2.core.FileItemInput.ItemSkippedException;\nimport org.apache.commons.io.Charsets;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.build.AbstractOrigin;\nimport org.apache.commons.io.build.AbstractStreamBuilder;\nimport org.apache.commons.io.output.NullOutputStream;\n\n/**\n * Low-level API for processing file uploads.\n *\n * <p>\n * This class can be used to process data streams conforming to MIME 'multipart' format as defined in <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC\n * 1867</a>. Arbitrarily large amounts of data in the stream can be processed under constant memory usage.\n * </p>\n * <p>\n * The format of the stream is defined in the following way:\n * </p>\n * <code>\n *   multipart-body := preamble 1*encapsulation close-delimiter epilogue<br>\n *   encapsulation := delimiter body CRLF<br>\n *   delimiter := \"--\" boundary CRLF<br>\n *   close-delimiter := \"--\" boundary \"--\"<br>\n *   preamble := &lt;ignore&gt;<br>\n *   epilogue := &lt;ignore&gt;<br>\n *   body := header-part CRLF body-part<br>\n *   header-part := 1*header CRLF<br>\n *   header := header-name \":\" header-value<br>\n *   header-name := &lt;printable ascii characters except \":\"&gt;<br>\n *   header-value := &lt;any ascii characters except CR &amp; LF&gt;<br>\n *   body-data := &lt;arbitrary data&gt;<br>\n * </code>\n *\n * <p>\n * Note that body-data can contain another mulipart entity. There is limited support for single pass processing of such nested streams. The nested stream is\n * <strong>required</strong> to have a boundary token of the same length as the parent stream (see {@link #setBoundary(byte[])}).\n * </p>\n * <p>\n * Here is an example of usage of this class:\n * </p>\n *\n * <pre>\n * try {\n *     MultipartInput multipartStream = new MultipartInput(input, boundary);\n *     boolean nextPart = multipartStream.skipPreamble();\n *     OutputStream output;\n *     while (nextPart) {\n *         String header = multipartStream.readHeaders();\n *         // process headers\n *         // create some output stream\n *         multipartStream.readBodyData(output);\n *         nextPart = multipartStream.readBoundary();\n *     }\n * } catch (MultipartInput.MalformedStreamException e) {\n *     // the stream failed to follow required syntax\n * } catch (IOException e) {\n *     // a read or write error occurred\n * }\n * </pre>\n */\npublic final class MultipartInput {\n\n    /**\n     * Builds a new {@link MultipartInput} instance.\n     * <p>\n     * For example:\n     * </p>\n     *\n     * <pre>{@code\n     * MultipartInput factory = MultipartInput.builder().setPath(path).setBufferSize(DEFAULT_THRESHOLD).get();\n     * }\n     * </pre>\n     */\n    public static class Builder extends AbstractStreamBuilder<MultipartInput, Builder> {\n\n        /**\n         * Boundary.\n         */\n        private byte[] boundary;\n\n        /**\n         * Progress notifier.\n         */\n        private ProgressNotifier progressNotifier;\n\n        public Builder() {\n            setBufferSizeDefault(DEFAULT_BUFSIZE);\n        }\n\n        /**\n         * Constructs a new instance.\n         * <p>\n         * This builder uses the InputStream, buffer size, boundary and progress notifier aspects.\n         * </p>\n         * <p>\n         * You must provide an origin that can be converted to a Reader by this builder, otherwise, this call will throw an\n         * {@link UnsupportedOperationException}.\n         * </p>\n         *\n         * @return a new instance.\n         * @throws IOException                   if an I/O error occurs.\n         * @throws UnsupportedOperationException if the origin cannot provide a Path.\n         * @see AbstractOrigin#getReader(Charset)\n         */\n        @Override\n        public MultipartInput get() throws IOException {\n            return new MultipartInput(getInputStream(), boundary, getBufferSize(), progressNotifier);\n        }\n\n        /**\n         * Sets the boundary.\n         *\n         * @param boundary the boundary.\n         * @return this\n         */\n        public Builder setBoundary(final byte[] boundary) {\n            this.boundary = boundary;\n            return this;\n        }\n\n        /**\n         * Sets the progress notifier.\n         *\n         * @param progressNotifier progress notifier..\n         * @return this\n         */\n        public Builder setProgressNotifier(final ProgressNotifier progressNotifier) {\n            this.progressNotifier = progressNotifier;\n            return this;\n        }\n\n    }\n\n    /**\n     * Signals an attempt to set an invalid boundary token.\n     */\n    public static class FileUploadBoundaryException extends FileUploadException {\n\n        /**\n         * The UID to use when serializing this instance.\n         */\n        private static final long serialVersionUID = 2;\n\n        /**\n         * Constructs an instance with the specified detail message.\n         *\n         * @param message The detail message (which is saved for later retrieval by the {@link #getMessage()} method)\n         */\n        public FileUploadBoundaryException(final String message) {\n            super(message);\n        }\n\n    }\n\n    /**\n     * An {@link InputStream} for reading an items contents.\n     */\n    public class ItemInputStream extends InputStream {\n\n        /**\n         * Offset when converting negative bytes to integers.\n         */\n        private static final int BYTE_POSITIVE_OFFSET = 256;\n\n        /**\n         * The number of bytes, which have been read so far.\n         */\n        private long total;\n\n        /**\n         * The number of bytes, which must be hold, because they might be a part of the boundary.\n         */\n        private int pad;\n\n        /**\n         * The current offset in the buffer.\n         */\n        private int pos;\n\n        /**\n         * Whether the stream is already closed.\n         */\n        private boolean closed;\n\n        /**\n         * Creates a new instance.\n         */\n        ItemInputStream() {\n            findSeparator();\n        }\n\n        /**\n         * Returns the number of bytes, which are currently available, without blocking.\n         *\n         * @throws IOException An I/O error occurs.\n         * @return Number of bytes in the buffer.\n         */\n        @Override\n        public int available() throws IOException {\n            if (pos == -1) {\n                return tail - head - pad;\n            }\n            return pos - head;\n        }\n\n        private void checkOpen() throws ItemSkippedException {\n            if (closed) {\n                throw new FileItemInput.ItemSkippedException(\"checkOpen()\");\n            }\n        }\n\n        /**\n         * Closes the input stream.\n         *\n         * @throws IOException An I/O error occurred.\n         */\n        @Override\n        public void close() throws IOException {\n            close(false);\n        }\n\n        /**\n         * Closes the input stream.\n         *\n         * @param closeUnderlying Whether to close the underlying stream (hard close)\n         * @throws IOException An I/O error occurred.\n         */\n        public void close(final boolean closeUnderlying) throws IOException {\n            if (closed) {\n                return;\n            }\n            if (closeUnderlying) {\n                closed = true;\n                input.close();\n            } else {\n                for (;;) {\n                    var av = available();\n                    if (av == 0) {\n                        av = makeAvailable();\n                        if (av == 0) {\n                            break;\n                        }\n                    }\n                    skip(av);\n                }\n            }\n            closed = true;\n        }\n\n        /**\n         * Called for finding the separator.\n         */\n        private void findSeparator() {\n            pos = MultipartInput.this.findSeparator();\n            if (pos == -1) {\n                if (tail - head > keepRegion) {\n                    pad = keepRegion;\n                } else {\n                    pad = tail - head;\n                }\n            }\n        }\n\n        /**\n         * Gets the number of bytes, which have been read by the stream.\n         *\n         * @return Number of bytes, which have been read so far.\n         */\n        public long getBytesRead() {\n            return total;\n        }\n\n        public boolean isClosed() {\n            return closed;\n        }\n\n        /**\n         * Attempts to read more data.\n         *\n         * @return Number of available bytes\n         * @throws IOException An I/O error occurred.\n         */\n        private int makeAvailable() throws IOException {\n            if (pos != -1) {\n                return 0;\n            }\n\n            // Move the data to the beginning of the buffer.\n            total += tail - head - pad;\n            System.arraycopy(buffer, tail - pad, buffer, 0, pad);\n\n            // Refill buffer with new data.\n            head = 0;\n            tail = pad;\n\n            for (;;) {\n                final var bytesRead = input.read(buffer, tail, bufSize - tail);\n                if (bytesRead == -1) {\n                    // The last pad amount is left in the buffer.\n                    // Boundary can't be in there so signal an error\n                    // condition.\n                    final var msg = \"Stream ended unexpectedly\";\n                    throw new MalformedStreamException(msg);\n                }\n                if (notifier != null) {\n                    notifier.noteBytesRead(bytesRead);\n                }\n                tail += bytesRead;\n\n                findSeparator();\n                final var av = available();\n\n                if (av > 0 || pos != -1) {\n                    return av;\n                }\n            }\n        }\n\n        /**\n         * Reads the next byte in the stream.\n         *\n         * @return The next byte in the stream, as a non-negative integer, or -1 for EOF.\n         * @throws IOException An I/O error occurred.\n         */\n        @Override\n        public int read() throws IOException {\n            checkOpen();\n            if (available() == 0 && makeAvailable() == 0) {\n                return -1;\n            }\n            ++total;\n            final int b = buffer[head++];\n            if (b >= 0) {\n                return b;\n            }\n            return b + BYTE_POSITIVE_OFFSET;\n        }\n\n        /**\n         * Reads bytes into the given buffer.\n         *\n         * @param b   The destination buffer, where to write to.\n         * @param off Offset of the first byte in the buffer.\n         * @param len Maximum number of bytes to read.\n         * @return Number of bytes, which have been actually read, or -1 for EOF.\n         * @throws IOException An I/O error occurred.\n         */\n        @Override\n        public int read(final byte[] b, final int off, final int len) throws IOException {\n            checkOpen();\n            if (len == 0) {\n                return 0;\n            }\n            var res = available();\n            if (res == 0) {\n                res = makeAvailable();\n                if (res == 0) {\n                    return -1;\n                }\n            }\n            res = Math.min(res, len);\n            System.arraycopy(buffer, head, b, off, res);\n            head += res;\n            total += res;\n            return res;\n        }\n\n        /**\n         * Skips the given number of bytes.\n         *\n         * @param bytes Number of bytes to skip.\n         * @return The number of bytes, which have actually been skipped.\n         * @throws IOException An I/O error occurred.\n         */\n        @Override\n        public long skip(final long bytes) throws IOException {\n            checkOpen();\n            var av = available();\n            if (av == 0) {\n                av = makeAvailable();\n                if (av == 0) {\n                    return 0;\n                }\n            }\n            final var res = Math.min(av, bytes);\n            head += res;\n            return res;\n        }\n\n    }\n\n    /**\n     * Signals that the input stream fails to follow the required syntax.\n     */\n    public static class MalformedStreamException extends FileUploadException {\n\n        /**\n         * The UID to use when serializing this instance.\n         */\n        private static final long serialVersionUID = 2;\n\n        /**\n         * Constructs an {@code MalformedStreamException} with the specified detail message.\n         *\n         * @param message The detail message.\n         */\n        public MalformedStreamException(final String message) {\n            super(message);\n        }\n\n        /**\n         * Constructs an {@code MalformedStreamException} with the specified detail message.\n         *\n         * @param message The detail message.\n         * @param cause   The cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the\n         *                cause is nonexistent or unknown.)\n         */\n        public MalformedStreamException(final String message, final Throwable cause) {\n            super(message, cause);\n        }\n\n    }\n\n    /**\n     * Internal class, which is used to invoke the {@link ProgressListener}.\n     */\n    public static class ProgressNotifier {\n\n        /**\n         * The listener to invoke.\n         */\n        private final ProgressListener progressListener;\n\n        /**\n         * Number of expected bytes, if known, or -1.\n         */\n        private final long contentLength;\n\n        /**\n         * Number of bytes, which have been read so far.\n         */\n        private long bytesRead;\n\n        /**\n         * Number of items, which have been read so far.\n         */\n        private int items;\n\n        /**\n         * Creates a new instance with the given listener and content length.\n         *\n         * @param progressListener The listener to invoke.\n         * @param contentLength    The expected content length.\n         */\n        public ProgressNotifier(final ProgressListener progressListener, final long contentLength) {\n            this.progressListener = progressListener != null ? progressListener : ProgressListener.NOP;\n            this.contentLength = contentLength;\n        }\n\n        /**\n         * Called to indicate that bytes have been read.\n         *\n         * @param byteCount Number of bytes, which have been read.\n         */\n        void noteBytesRead(final int byteCount) {\n            //\n            // Indicates, that the given number of bytes have been read from the input stream.\n            //\n            bytesRead += byteCount;\n            notifyListener();\n        }\n\n        /**\n         * Called to indicate, that a new file item has been detected.\n         */\n        public void noteItem() {\n            ++items;\n            notifyListener();\n        }\n\n        /**\n         * Called for notifying the listener.\n         */\n        private void notifyListener() {\n            progressListener.update(bytesRead, contentLength, items);\n        }\n\n    }\n\n    /**\n     * The Carriage Return ASCII character value.\n     */\n    public static final byte CR = 0x0D;\n\n    /**\n     * The Line Feed ASCII character value.\n     */\n    public static final byte LF = 0x0A;\n\n    /**\n     * The dash (-) ASCII character value.\n     */\n    public static final byte DASH = 0x2D;\n\n    /**\n     * The maximum length of {@code header-part} that will be processed (10 kilobytes = 10240 bytes.).\n     */\n    public static final int HEADER_PART_SIZE_MAX = 10_240;\n\n    /**\n     * The default length of the buffer used for processing a request.\n     */\n    static final int DEFAULT_BUFSIZE = 4096;\n\n    /**\n     * A byte sequence that marks the end of {@code header-part} ({@code CRLFCRLF}).\n     */\n    static final byte[] HEADER_SEPARATOR = { CR, LF, CR, LF };\n\n    /**\n     * A byte sequence that that follows a delimiter that will be followed by an encapsulation ({@code CRLF}).\n     */\n    static final byte[] FIELD_SEPARATOR = { CR, LF };\n\n    /**\n     * A byte sequence that that follows a delimiter of the last encapsulation in the stream ({@code --}).\n     */\n    static final byte[] STREAM_TERMINATOR = { DASH, DASH };\n\n    /**\n     * A byte sequence that precedes a boundary ({@code CRLF--}).\n     */\n    static final byte[] BOUNDARY_PREFIX = { CR, LF, DASH, DASH };\n\n    /**\n     * Compares {@code count} first bytes in the arrays {@code a} and {@code b}.\n     *\n     * @param a     The first array to compare.\n     * @param b     The second array to compare.\n     * @param count How many bytes should be compared.\n     * @return {@code true} if {@code count} first bytes in arrays {@code a} and {@code b} are equal.\n     */\n    static boolean arrayEquals(final byte[] a, final byte[] b, final int count) {\n        for (var i = 0; i < count; i++) {\n            if (a[i] != b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Constructs a new {@link Builder}.\n     *\n     * @return a new {@link Builder}.\n     */\n    public static Builder builder() {\n        return new Builder();\n    }\n\n    /**\n     * The input stream from which data is read.\n     */\n    private final InputStream input;\n\n    /**\n     * The length of the boundary token plus the leading {@code CRLF--}.\n     */\n    private int boundaryLength;\n\n    /**\n     * The amount of data, in bytes, that must be kept in the buffer in order to detect delimiters reliably.\n     */\n    private final int keepRegion;\n\n    /**\n     * The byte sequence that partitions the stream.\n     */\n    private final byte[] boundary;\n\n    /**\n     * The table for Knuth-Morris-Pratt search algorithm.\n     */\n    private final int[] boundaryTable;\n\n    /**\n     * The length of the buffer used for processing the request.\n     */\n    private final int bufSize;\n\n    /**\n     * The buffer used for processing the request.\n     */\n    private final byte[] buffer;\n\n    /**\n     * The index of first valid character in the buffer. <br>\n     * 0 <= head < bufSize\n     */\n    private int head;\n\n    /**\n     * The index of last valid character in the buffer + 1. <br>\n     * 0 <= tail <= bufSize\n     */\n    private int tail;\n\n    /**\n     * The content encoding to use when reading headers.\n     */\n    private Charset headerCharset;\n\n    /**\n     * The progress notifier, if any, or null.\n     */\n    private final ProgressNotifier notifier;\n\n    /**\n     * Constructs a {@code MultipartInput} with a custom size buffer.\n     * <p>\n     * Note that the buffer must be at least big enough to contain the boundary string, plus 4 characters for CR/LF and double dash, plus at least one byte of\n     * data. Too small a buffer size setting will degrade performance.\n     * </p>\n     *\n     * @param input      The {@code InputStream} to serve as a data source.\n     * @param boundary   The token used for dividing the stream into {@code encapsulations}.\n     * @param bufferSize The size of the buffer to be used, in bytes.\n     * @param notifier   The notifier, which is used for calling the progress listener, if any.\n     * @throws IllegalArgumentException If the buffer size is too small.\n     */\n    private MultipartInput(final InputStream input, final byte[] boundary, final int bufferSize, final ProgressNotifier notifier) {\n        if (boundary == null) {\n            throw new IllegalArgumentException(\"boundary may not be null\");\n        }\n        // We prepend CR/LF to the boundary to chop trailing CR/LF from\n        // body-data tokens.\n        this.boundaryLength = boundary.length + BOUNDARY_PREFIX.length;\n        if (bufferSize < this.boundaryLength + 1) {\n            throw new IllegalArgumentException(\"The buffer size specified for the MultipartInput is too small\");\n        }\n\n        this.input = input;\n        this.bufSize = Math.max(bufferSize, boundaryLength * 2);\n        this.buffer = new byte[this.bufSize];\n        this.notifier = notifier;\n\n        this.boundary = new byte[this.boundaryLength];\n        this.boundaryTable = new int[this.boundaryLength + 1];\n        this.keepRegion = this.boundary.length;\n\n        System.arraycopy(BOUNDARY_PREFIX, 0, this.boundary, 0, BOUNDARY_PREFIX.length);\n        System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length);\n        computeBoundaryTable();\n\n        head = 0;\n        tail = 0;\n    }\n\n    /**\n     * Computes the table used for Knuth-Morris-Pratt search algorithm.\n     */\n    private void computeBoundaryTable() {\n        var position = 2;\n        var candidate = 0;\n\n        boundaryTable[0] = -1;\n        boundaryTable[1] = 0;\n\n        while (position <= boundaryLength) {\n            if (boundary[position - 1] == boundary[candidate]) {\n                boundaryTable[position] = candidate + 1;\n                candidate++;\n                position++;\n            } else if (candidate > 0) {\n                candidate = boundaryTable[candidate];\n            } else {\n                boundaryTable[position] = 0;\n                position++;\n            }\n        }\n    }\n\n    /**\n     * Reads {@code body-data} from the current {@code encapsulation} and discards it.\n     * <p>\n     * Use this method to skip encapsulations you don't need or don't understand.\n     * </p>\n     *\n     * @return The amount of data discarded.\n     * @throws MalformedStreamException if the stream ends unexpectedly.\n     * @throws IOException              if an i/o error occurs.\n     */\n    public long discardBodyData() throws MalformedStreamException, IOException {\n        return readBodyData(NullOutputStream.INSTANCE);\n    }\n\n    /**\n     * Searches for a byte of specified value in the {@code buffer}, starting at the specified {@code position}.\n     *\n     * @param value The value to find.\n     * @param pos   The starting position for searching.\n     *\n     * @return The position of byte found, counting from beginning of the {@code buffer}, or {@code -1} if not found.\n     */\n    protected int findByte(final byte value, final int pos) {\n        for (var i = pos; i < tail; i++) {\n            if (buffer[i] == value) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Searches for the {@code boundary} in the {@code buffer} region delimited by {@code head} and {@code tail}.\n     *\n     * @return The position of the boundary found, counting from the beginning of the {@code buffer}, or {@code -1} if not found.\n     */\n    protected int findSeparator() {\n        var bufferPos = this.head;\n        var tablePos = 0;\n        while (bufferPos < this.tail) {\n            while (tablePos >= 0 && buffer[bufferPos] != boundary[tablePos]) {\n                tablePos = boundaryTable[tablePos];\n            }\n            bufferPos++;\n            tablePos++;\n            if (tablePos == boundaryLength) {\n                return bufferPos - boundaryLength;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Gets the character encoding used when reading the headers of an individual part. When not specified, or {@code null}, the platform default encoding is\n     * used.\n     *\n     * @return The encoding used to read part headers.\n     */\n    public Charset getHeaderCharset() {\n        return headerCharset;\n    }\n\n    /**\n     * Creates a new {@link ItemInputStream}.\n     *\n     * @return A new instance of {@link ItemInputStream}.\n     */\n    public ItemInputStream newInputStream() {\n        return new ItemInputStream();\n    }\n\n    /**\n     * Reads {@code body-data} from the current {@code encapsulation} and writes its contents into the output {@code Stream}.\n     * <p>\n     * Arbitrary large amounts of data can be processed by this method using a constant size buffer. (see {@link MultipartInput#builder()}).\n     * </p>\n     *\n     * @param output The {@code Stream} to write data into. May be null, in which case this method is equivalent to {@link #discardBodyData()}.\n     * @return the amount of data written.\n     * @throws MalformedStreamException if the stream ends unexpectedly.\n     * @throws IOException              if an i/o error occurs.\n     */\n    public long readBodyData(final OutputStream output) throws MalformedStreamException, IOException {\n        try (var inputStream = newInputStream()) {\n            return IOUtils.copyLarge(inputStream, output);\n        }\n    }\n\n    /**\n     * Skips a {@code boundary} token, and checks whether more {@code encapsulations} are contained in the stream.\n     *\n     * @return {@code true} if there are more encapsulations in this stream; {@code false} otherwise.\n     * @throws FileUploadSizeException  if the bytes read from the stream exceeded the size limits\n     * @throws MalformedStreamException if the stream ends unexpectedly or fails to follow required syntax.\n     */\n    public boolean readBoundary() throws FileUploadSizeException, MalformedStreamException {\n        final var marker = new byte[2];\n        final boolean nextChunk;\n        head += boundaryLength;\n        try {\n            marker[0] = readByte();\n            if (marker[0] == LF) {\n                // Work around IE5 Mac bug with input type=image.\n                // Because the boundary delimiter, not including the trailing\n                // CRLF, must not appear within any file (RFC 2046, section\n                // 5.1.1), we know the missing CR is due to a buggy browser\n                // rather than a file containing something similar to a\n                // boundary.\n                return true;\n            }\n\n            marker[1] = readByte();\n            if (arrayEquals(marker, STREAM_TERMINATOR, 2)) {\n                nextChunk = false;\n            } else if (arrayEquals(marker, FIELD_SEPARATOR, 2)) {\n                nextChunk = true;\n            } else {\n                throw new MalformedStreamException(\"Unexpected characters follow a boundary\");\n            }\n        } catch (final FileUploadSizeException e) {\n            throw e;\n        } catch (final IOException e) {\n            throw new MalformedStreamException(\"Stream ended unexpectedly\", e);\n        }\n        return nextChunk;\n    }\n\n    /**\n     * Reads a byte from the {@code buffer}, and refills it as necessary.\n     *\n     * @return The next byte from the input stream.\n     * @throws IOException if there is no more data available.\n     */\n    public byte readByte() throws IOException {\n        // Buffer depleted ?\n        if (head == tail) {\n            head = 0;\n            // Refill.\n            tail = input.read(buffer, head, bufSize);\n            if (tail == -1) {\n                // No more data available.\n                throw new IOException(\"No more data is available\");\n            }\n            if (notifier != null) {\n                notifier.noteBytesRead(tail);\n            }\n        }\n        return buffer[head++];\n    }\n\n    /**\n     * Reads the {@code header-part} of the current {@code encapsulation}.\n     * <p>\n     * Headers are returned verbatim to the input stream, including the trailing {@code CRLF} marker. Parsing is left to the application.\n     * </p>\n     *\n     * @return The {@code header-part} of the current encapsulation.\n     * @throws FileUploadSizeException  if the bytes read from the stream exceeded the size limits.\n     * @throws MalformedStreamException if the stream ends unexpectedly.\n     */\n    public String readHeaders() throws FileUploadSizeException, MalformedStreamException {\n        var i = 0;\n        byte b;\n        // to support multi-byte characters\n        final var baos = new ByteArrayOutputStream();\n        var size = 0;\n        while (i < HEADER_SEPARATOR.length) {\n            try {\n                b = readByte();\n            } catch (final FileUploadSizeException e) {\n                // wraps a FileUploadSizeException, re-throw as it will be unwrapped later\n                throw e;\n            } catch (final IOException e) {\n                throw new MalformedStreamException(\"Stream ended unexpectedly\", e);\n            }\n            if (++size > HEADER_PART_SIZE_MAX) {\n                throw new MalformedStreamException(\n                        String.format(\"Header section has more than %s bytes (maybe it is not properly terminated)\", HEADER_PART_SIZE_MAX));\n            }\n            if (b == HEADER_SEPARATOR[i]) {\n                i++;\n            } else {\n                i = 0;\n            }\n            baos.write(b);\n        }\n\n        try {\n            return baos.toString(Charsets.toCharset(headerCharset, Charset.defaultCharset()).name());\n        } catch (final UnsupportedEncodingException e) {\n            // not possible\n            throw new IllegalStateException(e);\n        }\n    }\n\n    /**\n     * Changes the boundary token used for partitioning the stream.\n     * <p>\n     * This method allows single pass processing of nested multipart streams.\n     * </p>\n     * <p>\n     * The boundary token of the nested stream is {@code required} to be of the same length as the boundary token in parent stream.\n     * </p>\n     * <p>\n     * Restoring the parent stream boundary token after processing of a nested stream is left to the application.\n     * </p>\n     *\n     * @param boundary The boundary to be used for parsing of the nested stream.\n     * @throws FileUploadBoundaryException if the {@code boundary} has a different length than the one being currently parsed.\n     */\n    public void setBoundary(final byte[] boundary) throws FileUploadBoundaryException {\n        if (boundary.length != boundaryLength - BOUNDARY_PREFIX.length) {\n            throw new FileUploadBoundaryException(\"The length of a boundary token cannot be changed\");\n        }\n        System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length);\n        computeBoundaryTable();\n    }\n\n    /**\n     * Sets the character encoding to be used when reading the headers of individual parts. When not specified, or {@code null}, the platform default encoding\n     * is used.\n     *\n     * @param headerCharset The encoding used to read part headers.\n     */\n    public void setHeaderCharset(final Charset headerCharset) {\n        this.headerCharset = headerCharset;\n    }\n\n    /**\n     * Finds the beginning of the first {@code encapsulation}.\n     *\n     * @return {@code true} if an {@code encapsulation} was found in the stream.\n     * @throws IOException if an i/o error occurs.\n     */\n    public boolean skipPreamble() throws IOException {\n        // First delimiter may be not preceded with a CRLF.\n        System.arraycopy(boundary, 2, boundary, 0, boundary.length - 2);\n        boundaryLength = boundary.length - 2;\n        computeBoundaryTable();\n        try {\n            // Discard all data up to the delimiter.\n            discardBodyData();\n\n            // Read boundary - if succeeded, the stream contains an\n            // encapsulation.\n            return readBoundary();\n        } catch (final MalformedStreamException e) {\n            return false;\n        } finally {\n            // Restore delimiter.\n            System.arraycopy(boundary, 0, boundary, 2, boundary.length - 2);\n            boundaryLength = boundary.length;\n            boundary[0] = CR;\n            boundary[1] = LF;\n            computeBoundaryTable();\n        }\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractSizesTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.fail;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\n\nimport org.apache.commons.io.IOUtils;\nimport org.junit.jupiter.api.Test;\n\n/**\n * Unit test for items with varying sizes.\n *\n * @param <AFU> The FileUpload type.\n * @param <R>   The FileUpload request type.\n * @param <I>   The FileItem type.\n * @param <F>   The FileItemFactory type.\n */\npublic abstract class AbstractSizesTest<AFU extends AbstractFileUpload<R, I, F>, R, I extends FileItem<I>, F extends FileItemFactory<I>>\n        extends AbstractTest<AFU, R, I, F> {\n\n    /**\n     * Checks, whether limiting the file size works.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testFileSizeLimit() throws IOException {\n        // @formatter:off\n        final var request =\n            \"-----1234\\r\\n\" +\n            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"foo.tab\\\"\\r\\n\" +\n            \"Content-Type: text/whatever\\r\\n\" +\n            \"\\r\\n\" +\n            \"This is the content of the file\\n\" +\n            \"\\r\\n\" +\n            \"-----1234--\\r\\n\";\n        // @formatter:on\n\n        var upload = newFileUpload();\n        upload.setFileSizeMax(-1);\n        var req = newMockHttpServletRequest(request, null, null);\n        var fileItems = upload.parseRequest(req);\n        assertEquals(1, fileItems.size());\n        var item = fileItems.get(0);\n        assertEquals(\"This is the content of the file\\n\", new String(item.get()));\n\n        upload = newFileUpload();\n        upload.setFileSizeMax(40);\n        req = newMockHttpServletRequest(request, null, null);\n        fileItems = upload.parseRequest(req);\n        assertEquals(1, fileItems.size());\n        item = fileItems.get(0);\n        assertEquals(\"This is the content of the file\\n\", new String(item.get()));\n\n        upload = newFileUpload();\n        upload.setFileSizeMax(30);\n        req = newMockHttpServletRequest(request, null, null);\n        try {\n            upload.parseRequest(req);\n            fail(\"Expected exception.\");\n        } catch (final FileUploadByteCountLimitException e) {\n            assertEquals(30, e.getPermitted());\n        }\n    }\n\n    /**\n     * Checks, whether a faked Content-Length header is detected.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testFileSizeLimitWithFakedContentLength() throws IOException {\n        // @formatter:off\n        final var request =\n            \"-----1234\\r\\n\" +\n            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"foo.tab\\\"\\r\\n\" +\n            \"Content-Type: text/whatever\\r\\n\" +\n            \"Content-Length: 10\\r\\n\" +\n            \"\\r\\n\" +\n            \"This is the content of the file\\n\" +\n            \"\\r\\n\" +\n            \"-----1234--\\r\\n\";\n        // @formatter:on\n\n        var upload = newFileUpload();\n        upload.setFileSizeMax(-1);\n        var req = newMockHttpServletRequest(request, null, null);\n        var fileItems = upload.parseRequest(req);\n        assertEquals(1, fileItems.size());\n        var item = fileItems.get(0);\n        assertEquals(\"This is the content of the file\\n\", new String(item.get()));\n\n        upload = newFileUpload();\n        upload.setFileSizeMax(40);\n        req = newMockHttpServletRequest(request, null, null);\n        fileItems = upload.parseRequest(req);\n        assertEquals(1, fileItems.size());\n        item = fileItems.get(0);\n        assertEquals(\"This is the content of the file\\n\", new String(item.get()));\n\n        // provided Content-Length is larger than the FileSizeMax -> handled by ctor\n        upload = newFileUpload();\n        upload.setFileSizeMax(5);\n        req = newMockHttpServletRequest(request, null, null);\n        try {\n            upload.parseRequest(req);\n            fail(\"Expected exception.\");\n        } catch (final FileUploadByteCountLimitException e) {\n            assertEquals(5, e.getPermitted());\n        }\n\n        // provided Content-Length is wrong, actual content is larger -> handled by LimitedInputStream\n        upload = newFileUpload();\n        upload.setFileSizeMax(15);\n        req = newMockHttpServletRequest(request, null, null);\n        try {\n            upload.parseRequest(req);\n            fail(\"Expected exception.\");\n        } catch (final FileUploadByteCountLimitException e) {\n            assertEquals(15, e.getPermitted());\n        }\n    }\n\n    /**\n     * Checks whether maxSize works.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testMaxSizeLimit() throws IOException {\n        // @formatter:off\n        final var request =\n            \"-----1234\\r\\n\" +\n            \"Content-Disposition: form-data; name=\\\"file1\\\"; filename=\\\"foo1.tab\\\"\\r\\n\" +\n            \"Content-Type: text/whatever\\r\\n\" +\n            \"Content-Length: 10\\r\\n\" +\n            \"\\r\\n\" +\n            \"This is the content of the file\\n\" +\n            \"\\r\\n\" +\n            \"-----1234\\r\\n\" +\n            \"Content-Disposition: form-data; name=\\\"file2\\\"; filename=\\\"foo2.tab\\\"\\r\\n\" +\n            \"Content-Type: text/whatever\\r\\n\" +\n            \"\\r\\n\" +\n            \"This is the content of the file\\n\" +\n            \"\\r\\n\" +\n            \"-----1234--\\r\\n\";\n        // @formatter:on\n\n        final var upload = newFileUpload();\n        upload.setFileSizeMax(-1);\n        upload.setSizeMax(200);\n\n        final var req = newMockHttpServletRequest(request, null, null);\n        try {\n            upload.parseRequest(req);\n            fail(\"Expected exception.\");\n        } catch (final FileUploadSizeException e) {\n            assertEquals(200, e.getPermitted());\n        }\n    }\n\n    @Test\n    public void testMaxSizeLimitUnknownContentLength() throws IOException {\n        // @formatter:off\n        final var request =\n            \"-----1234\\r\\n\" +\n            \"Content-Disposition: form-data; name=\\\"file1\\\"; filename=\\\"foo1.tab\\\"\\r\\n\" +\n            \"Content-Type: text/whatever\\r\\n\" +\n            \"Content-Length: 10\\r\\n\" +\n            \"\\r\\n\" +\n            \"This is the content of the file\\n\" +\n            \"\\r\\n\" +\n            \"-----1234\\r\\n\" +\n            \"Content-Disposition: form-data; name=\\\"file2\\\"; filename=\\\"foo2.tab\\\"\\r\\n\" +\n            \"Content-Type: text/whatever\\r\\n\" +\n            \"\\r\\n\" +\n            \"This is the content of the file\\n\" +\n            \"\\r\\n\" +\n            \"-----1234--\\r\\n\";\n        // @formatter:on\n\n        final var upload = newFileUpload();\n        upload.setFileSizeMax(-1);\n        upload.setSizeMax(300);\n\n        // the first item should be within the max size limit\n        // set the read limit to 10 to simulate a \"real\" stream\n        // otherwise the buffer would be immediately filled\n\n        final var req = newMockHttpServletRequest(request, -1L, 10);\n\n        final var it = upload.getItemIterator(req);\n        assertTrue(it.hasNext());\n\n        final var item = it.next();\n        assertFalse(item.isFormField());\n        assertEquals(\"file1\", item.getFieldName());\n        assertEquals(\"foo1.tab\", item.getName());\n\n        {\n            try (final var baos = new ByteArrayOutputStream();\n                    final var stream = item.getInputStream()) {\n                IOUtils.copy(stream, baos);\n            }\n\n        }\n\n        // the second item is over the size max, thus we expect an error\n        // the header is still within size max -> this shall still succeed\n        assertTrue(it.hasNext());\n\n        assertThrows(FileUploadException.class, () -> {\n            final var item2 = it.next();\n            try (final var baos = new ByteArrayOutputStream();\n                    final var stream = item2.getInputStream()) {\n                IOUtils.copy(stream, baos);\n            }\n        });\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemFactoryTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertSame;\n\nimport org.apache.commons.fileupload2.core.FileItemFactory.AbstractFileItemBuilder;\nimport org.junit.jupiter.api.Test;\n\n/**\n * Tests for {@link DiskFileItem}.\n */\npublic class DiskFileItemFactoryTest {\n\n    @Test\n    void testHeaders() {\n        final var factory = DiskFileItemFactory.builder().get();\n        final var fileItemBuilder = factory.fileItemBuilder();\n        assertNotNull(fileItemBuilder.getFileItemHeaders());\n        final var fileItem = fileItemBuilder.get();\n        assertNotNull(fileItem.getHeaders(), \"Missing default headers (empty)\");\n        assertFalse(fileItem.getHeaders().getHeaderNames().hasNext());\n        final var fileItemHeaders = AbstractFileItemBuilder.newFileItemHeaders();\n        assertNotNull(fileItemHeaders);\n        fileItem.setHeaders(fileItemHeaders);\n        assertSame(fileItemHeaders, fileItem.getHeaders());\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/MimeUtilityTestCase.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.io.UnsupportedEncodingException;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * Use the online <a href=\"http://dogmamix.com/MimeHeadersDecoder/\">MimeHeadersDecoder</a> to validate expected values.\n */\npublic final class MimeUtilityTestCase {\n\n    private static void assertEncoded(final String expected, final String encoded) throws Exception {\n        assertEquals(expected, MimeUtils.decodeText(encoded));\n    }\n\n    @Test\n    public void decodeInvalidEncoding() {\n        assertThrows(UnsupportedEncodingException.class, () -> MimeUtils.decodeText(\"=?invalid?B?xyz-?=\"));\n    }\n\n    @Test\n    public void decodeIso88591Base64Encoded() throws Exception {\n        assertEncoded(\"If you can read this you understand the example.\",\n                \"=?ISO-8859-1?B?SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?= \" + \"=?ISO-8859-2?B?dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=\\\"\\r\\n\");\n    }\n\n    @Test\n    public void decodeIso88591Base64EncodedWithWhiteSpace() throws Exception {\n        assertEncoded(\"If you can read this you understand the example.\",\n                \"=?ISO-8859-1?B?SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=\\t  \\r\\n   =?ISO-8859-\" + \"2?B?dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=\\\"\\r\\n\");\n    }\n\n    @Test\n    public void decodeUtf8Base64Encoded() throws Exception {\n        assertEncoded(\" h\\u00e9! \\u00e0\\u00e8\\u00f4u !!!\", \"=?UTF-8?B?IGjDqSEgw6DDqMO0dSAhISE=?=\");\n    }\n\n    @Test\n    public void decodeUtf8QuotedPrintableEncoded() throws Exception {\n        assertEncoded(\" h\\u00e9! \\u00e0\\u00e8\\u00f4u !!!\", \"=?UTF-8?Q?_h=C3=A9!_=C3=A0=C3=A8=C3=B4u_!!!?=\");\n    }\n\n    @Test\n    public void noNeedToDecode() throws Exception {\n        assertEncoded(\"abc\", \"abc\");\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/MultipartStreamTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * Unit tests {@link MultipartInput}.\n */\npublic class MultipartStreamTest {\n\n    static private final String BOUNDARY_TEXT = \"myboundary\";\n\n    @Test\n    public void testSmallBuffer() {\n        final var strData = \"foobar\";\n        final var contents = strData.getBytes();\n        final InputStream input = new ByteArrayInputStream(contents);\n        final var boundary = BOUNDARY_TEXT.getBytes();\n        final var iBufSize = 1;\n        assertThrows(IllegalArgumentException.class, () -> MultipartInput.builder().setInputStream(input).setBoundary(boundary).setBufferSize(iBufSize)\n                .setProgressNotifier(new MultipartInput.ProgressNotifier(null, contents.length)).get());\n    }\n\n    @Test\n    public void testThreeParamConstructor() throws Exception {\n        final var strData = \"foobar\";\n        final var contents = strData.getBytes();\n        final InputStream input = new ByteArrayInputStream(contents);\n        final var boundary = BOUNDARY_TEXT.getBytes();\n        final var iBufSize = boundary.length + MultipartInput.BOUNDARY_PREFIX.length + 1;\n        final var ms = MultipartInput.builder().setInputStream(input).setBoundary(boundary).setBufferSize(iBufSize)\n                .setProgressNotifier(new MultipartInput.ProgressNotifier(null, contents.length)).get();\n        assertNotNull(ms);\n    }\n\n    @Test\n    public void testTwoParamConstructor() throws Exception {\n        final var strData = \"foobar\";\n        final var contents = strData.getBytes();\n        final InputStream input = new ByteArrayInputStream(contents);\n        final var boundary = BOUNDARY_TEXT.getBytes();\n        final var ms = MultipartInput.builder().setInputStream(input).setBoundary(boundary)\n                .setProgressNotifier(new MultipartInput.ProgressNotifier(null, contents.length)).get();\n        assertNotNull(ms);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemSerializeTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectOutputStream;\nimport java.nio.file.FileVisitResult;\nimport java.nio.file.Files;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.Path;\nimport java.nio.file.attribute.BasicFileAttributes;\n\nimport org.apache.commons.io.file.PathUtils;\nimport org.apache.commons.io.file.SimplePathVisitor;\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\n/**\n * Serialization Unit tests for {@link DiskFileItem}.\n */\npublic class DiskFileItemSerializeTest {\n\n    /**\n     * Use a private repository to catch any files left over by tests.\n     */\n    private static final Path REPOSITORY = PathUtils.getTempDirectory().resolve(\"DiskFileItemRepo\");\n\n    /**\n     * Content type for regular form items.\n     */\n    private static final String TEXT_CONTENT_TYPE = \"text/plain\";\n\n    /**\n     * Very low threshold for testing memory versus disk options.\n     */\n    private static final int THRESHOLD = 16;\n\n    /**\n     * Compare content bytes.\n     */\n    private void compareBytes(final String text, final byte[] origBytes, final byte[] newBytes) {\n        assertNotNull(origBytes, \"origBytes must not be null\");\n        assertNotNull(newBytes, \"newBytes must not be null\");\n        assertEquals(origBytes.length, newBytes.length, text + \" byte[] length\");\n        for (var i = 0; i < origBytes.length; i++) {\n            assertEquals(origBytes[i], newBytes[i], text + \" byte[\" + i + \"]\");\n        }\n    }\n\n    /**\n     * Create content bytes of a specified size.\n     */\n    private byte[] createContentBytes(final int size) {\n        final var buffer = new StringBuilder(size);\n        byte count = 0;\n        for (var i = 0; i < size; i++) {\n            buffer.append(count + \"\");\n            count++;\n            if (count > 9) {\n                count = 0;\n            }\n        }\n        return buffer.toString().getBytes();\n    }\n\n    /**\n     * Create a FileItem with the specfied content bytes.\n     */\n    private DiskFileItem createFileItem(final byte[] contentBytes) throws IOException {\n        return createFileItem(contentBytes, REPOSITORY);\n    }\n\n    /**\n     * Create a FileItem with the specfied content bytes and repository.\n     */\n    private DiskFileItem createFileItem(final byte[] contentBytes, final Path repository) throws IOException {\n        // @formatter:off\n        final FileItemFactory<DiskFileItem> factory = DiskFileItemFactory.builder()\n                .setBufferSize(THRESHOLD)\n                .setPath(repository)\n                .get();\n        // @formatter:on\n        // @formatter:off\n        final var item = factory.fileItemBuilder()\n                .setFieldName(\"textField\")\n                .setContentType(TEXT_CONTENT_TYPE)\n                .setFormField(true)\n                .setFileName(\"My File Name\")\n                .get();\n        // @formatter:on\n\n        try (var os = item.getOutputStream()) {\n            os.write(contentBytes);\n        }\n        return item;\n    }\n\n    /**\n     * Deserializes.\n     */\n    private Object deserialize(final ByteArrayOutputStream baos) {\n        return SerializationUtils.deserialize(baos.toByteArray());\n    }\n\n    /**\n     * Serializes.\n     */\n    private ByteArrayOutputStream serialize(final Object target) throws IOException {\n        try (final var baos = new ByteArrayOutputStream();\n                final var oos = new ObjectOutputStream(baos)) {\n            oos.writeObject(target);\n            oos.flush();\n            return baos;\n        }\n    }\n\n    @BeforeEach\n    public void setUp() throws IOException {\n        if (Files.exists(REPOSITORY)) {\n            PathUtils.deleteDirectory(REPOSITORY);\n        } else {\n            Files.createDirectories(REPOSITORY);\n        }\n    }\n\n    @AfterEach\n    public void tearDown() throws IOException {\n        if (Files.exists(REPOSITORY)) {\n            PathUtils.visitFileTree(new SimplePathVisitor() {\n                @Override\n                public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {\n                    System.out.println(\"Found leftover file \" + file);\n                    return FileVisitResult.CONTINUE;\n                }\n\n            }, REPOSITORY);\n            PathUtils.deleteDirectory(REPOSITORY);\n        }\n    }\n\n    /**\n     * Test creation of a field for which the amount of data falls above the configured threshold.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testAboveThreshold() throws IOException {\n        // Create the FileItem\n        final var testFieldValueBytes = createContentBytes(THRESHOLD + 1);\n        final var item = createFileItem(testFieldValueBytes);\n\n        // Check state is as expected\n        assertFalse(item.isInMemory(), \"Initial: in memory\");\n        assertEquals(item.getSize(), testFieldValueBytes.length, \"Initial: size\");\n        compareBytes(\"Initial\", item.get(), testFieldValueBytes);\n\n        testWritingToFile(item, testFieldValueBytes);\n        item.delete();\n    }\n\n    /**\n     * Test creation of a field for which the amount of data falls below the configured threshold.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testBelowThreshold() throws IOException {\n        // Create the FileItem\n        final var testFieldValueBytes = createContentBytes(THRESHOLD - 1);\n        testInMemoryObject(testFieldValueBytes);\n    }\n\n    @Test\n    public void testCheckFileName() {\n        assertThrows(InvalidPathException.class, () -> DiskFileItem.checkFileName(\"\\0\"));\n    }\n\n    /**\n     * Helper method to test creation of a field.\n     */\n    private void testInMemoryObject(final byte[] testFieldValueBytes) throws IOException {\n        testInMemoryObject(testFieldValueBytes, REPOSITORY);\n    }\n\n    /**\n     * Helper method to test creation of a field when a repository is used.\n     */\n    private void testInMemoryObject(final byte[] testFieldValueBytes, final Path repository) throws IOException {\n        final var item = createFileItem(testFieldValueBytes, repository);\n\n        // Check state is as expected\n        assertTrue(item.isInMemory(), \"Initial: in memory\");\n        assertEquals(item.getSize(), testFieldValueBytes.length, \"Initial: size\");\n        compareBytes(\"Initial\", item.get(), testFieldValueBytes);\n        testWritingToFile(item, testFieldValueBytes);\n        item.delete();\n    }\n\n    /**\n     * Test deserialization fails when repository is not valid.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testInvalidRepository() throws IOException {\n        // Create the FileItem\n        final var testFieldValueBytes = createContentBytes(THRESHOLD);\n        final var repository = PathUtils.getTempDirectory().resolve(\"file\");\n        final var item = createFileItem(testFieldValueBytes, repository);\n        assertThrows(IOException.class, () -> deserialize(serialize(item)));\n    }\n\n    /**\n     * Test creation of a field for which the amount of data equals the configured threshold.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testThreshold() throws IOException {\n        // Create the FileItem\n        final var testFieldValueBytes = createContentBytes(THRESHOLD);\n        testInMemoryObject(testFieldValueBytes);\n    }\n\n    /**\n     * Test serialization and deserialization when repository is not null.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testValidRepository() throws IOException {\n        // Create the FileItem\n        final var testFieldValueBytes = createContentBytes(THRESHOLD);\n        testInMemoryObject(testFieldValueBytes, REPOSITORY);\n    }\n\n    /**\n     * Helper method to test writing item contents to a file.\n     */\n    private void testWritingToFile(final DiskFileItem item, final byte[] testFieldValueBytes) throws IOException {\n        final var temp = Files.createTempFile(\"fileupload\", null);\n        // Note that the file exists and is initially empty;\n        // write() must be able to handle that.\n        item.write(temp);\n        compareBytes(\"Initial\", Files.readAllBytes(temp), testFieldValueBytes);\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\n\n/**\n * Abstract test.\n *\n * @param <AFU> The AbstractFileUpload type.\n * @param <R>   The FileUpload request type.\n * @param <I>   The FileItem type.\n * @param <F>   The FileItemFactory type.\n */\npublic abstract class AbstractTest<AFU extends AbstractFileUpload<R, I, F>, R, I extends FileItem<I>, F extends FileItemFactory<I>> {\n\n    protected abstract AFU newFileUpload();\n\n    protected R newMockHttpServletRequest(final byte[] request, final Long overrideContenLength, final String contentType, final Integer overrideReadLimit) {\n        return newMockHttpServletRequest(new ByteArrayInputStream(request), overrideContenLength != null ? overrideContenLength : request.length, contentType,\n                overrideReadLimit != null ? overrideReadLimit : -1);\n    }\n\n    protected abstract R newMockHttpServletRequest(InputStream requestInputStream, long requestLength, String contentType, int readLimit);\n\n    protected R newMockHttpServletRequest(final String request, final Long overrideContenLength, final Integer overrideReadLimit) {\n        return newMockHttpServletRequest(request.getBytes(StandardCharsets.US_ASCII), overrideContenLength, Constants.CONTENT_TYPE, overrideReadLimit);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/Constants.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\n/**\n * Constants used for testing.\n */\npublic final class Constants {\n\n    /**\n     * The content type used in several tests.\n     */\n    public static final String CONTENT_TYPE = \"multipart/form-data; boundary=---1234\";\n\n    private Constants() {\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/RFC2231UtilityTestCase.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.io.UnsupportedEncodingException;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * The expected characters are encoded in UTF16, while the actual characters may be encoded in UTF-8/ISO-8859-1\n *\n * RFC 5987 recommends to support both UTF-8 & ISO 8859-1. Test values are taken from https://tools.ietf.org/html/rfc5987#section-3.2.2\n */\npublic final class RFC2231UtilityTestCase {\n\n    private static void assertEncoded(final String expected, final String encoded) throws Exception {\n        assertEquals(expected, RFC2231Utils.decodeText(encoded));\n    }\n\n    @Test\n    public void decodeInvalidEncoding() throws Exception {\n        assertThrows(UnsupportedEncodingException.class, () -> RFC2231Utils.decodeText(\"abc'en'hello\"));\n    }\n\n    @Test\n    public void decodeIso88591() throws Exception {\n        assertEncoded(\"\\u00A3 rate\", \"iso-8859-1'en'%A3%20rate\"); // \"Â£ rate\"\n    }\n\n    @Test\n    public void decodeUtf8() throws Exception {\n        assertEncoded(\"\\u00a3 \\u0061\\u006e\\u0064 \\u20ac \\u0072\\u0061\\u0074\\u0065\\u0073\", \"UTF-8''%c2%a3%20and%20%e2%82%ac%20rates\"); // \"Â£ and â¬ rates\"\n    }\n\n    @Test\n    public void noNeedToDecode() throws Exception {\n        assertEncoded(\"abc\", \"abc\");\n    }\n\n    @Test\n    public void testHasEncodedValue() {\n        final var nameWithAsteriskAtEnd = \"paramname*\";\n        assertTrue(RFC2231Utils.hasEncodedValue(nameWithAsteriskAtEnd));\n\n        final var nameWithAsteriskNotAtEnd = \"param*name\";\n        assertFalse(RFC2231Utils.hasEncodedValue(nameWithAsteriskNotAtEnd));\n\n        final var nameWithoutAsterisk = \"paramname\";\n        assertFalse(RFC2231Utils.hasEncodedValue(nameWithoutAsterisk));\n    }\n\n    @Test\n    public void testStripDelimiter() {\n        final var nameWithAsteriskAtEnd = \"paramname*\";\n        assertEquals(\"paramname\", RFC2231Utils.stripDelimiter(nameWithAsteriskAtEnd));\n\n        final var nameWithAsteriskNotAtEnd = \"param*name\";\n        assertEquals(\"param*name\", RFC2231Utils.stripDelimiter(nameWithAsteriskNotAtEnd));\n\n        final var nameWithTwoAsterisks = \"param*name*\";\n        assertEquals(\"param*name\", RFC2231Utils.stripDelimiter(nameWithTwoAsterisks));\n\n        final var nameWithoutAsterisk = \"paramname\";\n        assertEquals(\"paramname\", RFC2231Utils.stripDelimiter(nameWithoutAsterisk));\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractProgressListenerTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * Tests the {@link ProgressListener}.\n *\n * @param <AFU> The subclass of FileUpload.\n * @param <R>   The FileUpload request type.\n * @param <I>   The FileItem type.\n * @param <F>   The FileItemFactory type.\n */\npublic abstract class AbstractProgressListenerTest<AFU extends AbstractFileUpload<R, I, F>, R, I extends FileItem<I>, F extends FileItemFactory<I>>\n        extends AbstractTest<AFU, R, I, F> {\n\n    protected static class ProgressListenerImpl implements ProgressListener {\n\n        private final long expectedContentLength;\n\n        private final int expectedItems;\n\n        private Long bytesRead;\n\n        private Integer items;\n\n        ProgressListenerImpl(final long contentLength, final int itemCount) {\n            expectedContentLength = contentLength;\n            expectedItems = itemCount;\n        }\n\n        void checkFinished() {\n            assertEquals(expectedContentLength, bytesRead.longValue());\n            assertEquals(expectedItems, items.intValue());\n        }\n\n        @Override\n        public void update(final long actualBytesRead, final long actualContentLength, final int actualItems) {\n            assertTrue(actualBytesRead >= 0 && actualBytesRead <= expectedContentLength);\n            assertTrue(actualContentLength == -1 || actualContentLength == expectedContentLength);\n            assertTrue(actualItems >= 0 && actualItems <= expectedItems);\n\n            assertTrue(bytesRead == null || actualBytesRead >= bytesRead.longValue());\n            bytesRead = Long.valueOf(actualBytesRead);\n            assertTrue(items == null || actualItems >= items.intValue());\n            items = Integer.valueOf(actualItems);\n        }\n\n    }\n\n    protected void runTest(final int itemCount, final long contentLength, final R request) throws FileUploadException, IOException {\n        final var upload = newFileUpload();\n        final var listener = new ProgressListenerImpl(contentLength, itemCount);\n        upload.setProgressListener(listener);\n        final var iter = upload.getItemIterator(request);\n        for (var i = 0; i < itemCount; i++) {\n            final var idxI = i;\n            final var fileItemInput = iter.next();\n            try (final var inputStream = fileItemInput.getInputStream()) {\n                for (var j = 0; j < 16_384 + i; j++) {\n                    final var idxJ = j;\n                    //\n                    // This used to be assertEquals((byte) j, (byte) istream.read()); but this seems to trigger a bug in JRockit, so we express the same like\n                    // this:\n                    //\n                    final var b1 = (byte) j;\n                    final var b2 = (byte) inputStream.read();\n                    assertEquals(b1, b2, () -> String.format(\"itemCount = %,d, i = %,d, j = %,d\", itemCount, idxI, idxJ));\n                }\n                assertEquals(-1, inputStream.read());\n            }\n        }\n        assertTrue(!iter.hasNext());\n        listener.checkFinished();\n    }\n\n    /**\n     * Parse a very long file upload by using a progress listener.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testProgressListener() throws IOException {\n        final var numItems = 512;\n        final var baos = new ByteArrayOutputStream();\n        for (var i = 0; i < numItems; i++) {\n            final var header = \"-----1234\\r\\n\" + \"Content-Disposition: form-data; name=\\\"field\" + (i + 1) + \"\\\"\\r\\n\" + \"\\r\\n\";\n            baos.write(header.getBytes(StandardCharsets.US_ASCII));\n            for (var j = 0; j < 16384 + i; j++) {\n                baos.write((byte) j);\n            }\n            baos.write(\"\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n        }\n        baos.write(\"-----1234--\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n        final var requestBytes = baos.toByteArray();\n\n        var request = newMockHttpServletRequest(requestBytes, null, Constants.CONTENT_TYPE, null);\n        runTest(numItems, requestBytes.length, request);\n        request = newMockHttpServletRequest(requestBytes, -1L, Constants.CONTENT_TYPE, null);\n        runTest(numItems, requestBytes.length, request);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractFileUploadTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * Common tests for implementations of {@link AbstractFileUpload}. This is a parameterized test. Tests must be valid and common to all implementations of\n * FileUpload added as parameter in this class.\n *\n * @param <AFU> The {@link AbstractFileUpload} type.\n * @param <R>   The FileUpload request type.\n * @param <I>   The FileItem type.\n * @param <F>   The FileItemFactory type.\n */\npublic abstract class AbstractFileUploadTest<AFU extends AbstractFileUpload<R, I, F>, R, I extends FileItem<I>, F extends FileItemFactory<I>>\n        extends AbstractFileUploadWrapper<AFU, R, I, F> {\n\n    protected AbstractFileUploadTest(final AFU fileUpload) {\n        super(fileUpload);\n    }\n\n    private void assertHeaders(final String[] headerNames, final String[] headerValues, final I fileItems, final int index) {\n        for (var i = 0; i < headerNames.length; i++) {\n            final var value = fileItems.getHeaders().getHeader(headerNames[i]);\n            if (i == index) {\n                assertEquals(headerValues[i], value);\n            } else {\n                assertNull(value);\n            }\n        }\n    }\n\n    /**\n     * Tests <a href=\"https://issues.apache.org/jira/browse/FILEUPLOAD-239\">FILEUPLOAD-239</a>\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testContentTypeAttachment() throws IOException {\n        // @formatter:off\n        final var fileItems = parseUpload(upload,\n                \"-----1234\\r\\n\" +\n                \"content-disposition: form-data; name=\\\"field1\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"Joe Blow\\r\\n\" +\n                \"-----1234\\r\\n\" +\n                \"content-disposition: form-data; name=\\\"pics\\\"\\r\\n\" +\n                \"Content-type: multipart/mixed, boundary=---9876\\r\\n\" +\n                \"\\r\\n\" +\n                \"-----9876\\r\\n\" +\n                \"Content-disposition: attachment; filename=\\\"file1.txt\\\"\\r\\n\" +\n                \"Content-Type: text/plain\\r\\n\" +\n                \"\\r\\n\" +\n                \"... contents of file1.txt ...\\r\\n\" +\n                \"-----9876--\\r\\n\" +\n                \"-----1234--\\r\\n\");\n        // @formatter:on\n        assertEquals(2, fileItems.size());\n\n        final var field = fileItems.get(0);\n        assertEquals(\"field1\", field.getFieldName());\n        assertTrue(field.isFormField());\n        assertEquals(\"Joe Blow\", field.getString());\n\n        final var fileItem = fileItems.get(1);\n        assertEquals(\"pics\", fileItem.getFieldName());\n        assertFalse(fileItem.isFormField());\n        assertEquals(\"... contents of file1.txt ...\", fileItem.getString());\n        assertEquals(\"text/plain\", fileItem.getContentType());\n        assertEquals(\"file1.txt\", fileItem.getName());\n    }\n\n    /**\n     * This is what the browser does if you submit the form without choosing a file.\n     *\n     * @throws FileUploadException Test failure.\n     */\n    @Test\n    public void testEmptyFile() throws FileUploadException {\n        // @formatter:off\n        final var fileItems = parseUpload (upload,\n                                                \"-----1234\\r\\n\" +\n                                                \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"\\\"\\r\\n\" +\n                                                \"\\r\\n\" +\n                                                \"\\r\\n\" +\n                                                \"-----1234--\\r\\n\");\n        // @formatter:on\n        assertEquals(1, fileItems.size());\n\n        final var file = fileItems.get(0);\n        assertFalse(file.isFormField());\n        assertEquals(\"\", file.getString());\n        assertEquals(\"\", file.getName());\n    }\n\n    @Test\n    public void testFilenameCaseSensitivity() throws IOException {\n        // @formatter:off\n        final var fileItems = parseUpload(upload,\n                                               \"-----1234\\r\\n\" +\n                                               \"Content-Disposition: form-data; \"\n                                             + \"name=\\\"FiLe\\\"; filename=\\\"FOO.tab\\\"\\r\\n\" +\n                                               \"Content-Type: text/whatever\\r\\n\" +\n                                               \"\\r\\n\" +\n                                               \"This is the content of the file\\n\" +\n                                               \"\\r\\n\" +\n                                               \"-----1234--\\r\\n\");\n        // @formatter:on\n        assertEquals(1, fileItems.size());\n\n        final var file = fileItems.get(0);\n        assertEquals(\"FiLe\", file.getFieldName());\n        assertEquals(\"FOO.tab\", file.getName());\n    }\n\n    @Test\n    public void testFileUpload() throws IOException {\n        // @formatter:off\n        final var fileItems = parseUpload(upload,\n                                               \"-----1234\\r\\n\" +\n                                               \"Content-Disposition: \"\n                                               + \"form-data; name=\\\"file\\\"; filename=\\\"foo.tab\\\"\\r\\n\" +\n                                               \"Content-Type: text/whatever\\r\\n\" +\n                                               \"\\r\\n\" +\n                                               \"This is the content of the file\\n\" +\n                                               \"\\r\\n\" +\n                                               \"-----1234\\r\\n\" +\n                                               \"Content-Disposition: form-data; name=\\\"field\\\"\\r\\n\" +\n                                               \"\\r\\n\" +\n                                               \"fieldValue\\r\\n\" +\n                                               \"-----1234\\r\\n\" +\n                                               \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                                               \"\\r\\n\" +\n                                               \"value1\\r\\n\" +\n                                               \"-----1234\\r\\n\" +\n                                               \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                                               \"\\r\\n\" +\n                                               \"value2\\r\\n\" +\n                                               \"-----1234--\\r\\n\");\n        // @formatter:on\n        assertEquals(4, fileItems.size());\n\n        final var file = fileItems.get(0);\n        assertEquals(\"file\", file.getFieldName());\n        assertFalse(file.isFormField());\n        assertEquals(\"This is the content of the file\\n\", file.getString());\n        assertEquals(\"text/whatever\", file.getContentType());\n        assertEquals(\"foo.tab\", file.getName());\n\n        final var field = fileItems.get(1);\n        assertEquals(\"field\", field.getFieldName());\n        assertTrue(field.isFormField());\n        assertEquals(\"fieldValue\", field.getString());\n\n        final var multi0 = fileItems.get(2);\n        assertEquals(\"multi\", multi0.getFieldName());\n        assertTrue(multi0.isFormField());\n        assertEquals(\"value1\", multi0.getString());\n\n        final var multi1 = fileItems.get(3);\n        assertEquals(\"multi\", multi1.getFieldName());\n        assertTrue(multi1.isFormField());\n        assertEquals(\"value2\", multi1.getString());\n    }\n\n    /**\n     * Test case for <a href=\"https://issues.apache.org/jira/browse/FILEUPLOAD-130\">\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testFileUpload130() throws IOException {\n        final String[] headerNames = { \"SomeHeader\", \"OtherHeader\", \"YetAnotherHeader\", \"WhatAHeader\" };\n        final String[] headerValues = { \"present\", \"Is there\", \"Here\", \"Is That\" };\n        // @formatter:off\n        final var fileItems = parseUpload(upload,\n                                               \"-----1234\\r\\n\" +\n                                               \"Content-Disposition: form-data; name=\\\"file\\\"; \"\n                                             + \"filename=\\\"foo.tab\\\"\\r\\n\" +\n                                               \"Content-Type: text/whatever\\r\\n\" +\n                                               headerNames[0] + \": \" + headerValues[0] + \"\\r\\n\" +\n                                               \"\\r\\n\" +\n                                               \"This is the content of the file\\n\" +\n                                               \"\\r\\n\" +\n                                               \"-----1234\\r\\n\" +\n                                               \"Content-Disposition: form-data; \\r\\n\" +\n                                               \"\\tname=\\\"field\\\"\\r\\n\" +\n                                               headerNames[1] + \": \" + headerValues[1] + \"\\r\\n\" +\n                                               \"\\r\\n\" +\n                                               \"fieldValue\\r\\n\" +\n                                               \"-----1234\\r\\n\" +\n                                               \"Content-Disposition: form-data;\\r\\n\" +\n                                               \"     name=\\\"multi\\\"\\r\\n\" +\n                                               headerNames[2] + \": \" + headerValues[2] + \"\\r\\n\" +\n                                               \"\\r\\n\" +\n                                               \"value1\\r\\n\" +\n                                               \"-----1234\\r\\n\" +\n                                               \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                                               headerNames[3] + \": \" + headerValues[3] + \"\\r\\n\" +\n                                               \"\\r\\n\" +\n                                               \"value2\\r\\n\" +\n                                               \"-----1234--\\r\\n\");\n        // @formatter:on\n        assertEquals(4, fileItems.size());\n\n        final var file = fileItems.get(0);\n        assertHeaders(headerNames, headerValues, file, 0);\n\n        final var field = fileItems.get(1);\n        assertHeaders(headerNames, headerValues, field, 1);\n\n        final var multi0 = fileItems.get(2);\n        assertHeaders(headerNames, headerValues, multi0, 2);\n\n        final var multi1 = fileItems.get(3);\n        assertHeaders(headerNames, headerValues, multi1, 3);\n    }\n\n    /**\n     * Test for <a href=\"https://issues.apache.org/jira/browse/FILEUPLOAD-62\">FILEUPLOAD-62</a>\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testFILEUPLOAD62() throws IOException {\n        // @formatter:off\n        final var contentType = \"multipart/form-data; boundary=AaB03x\";\n        final var request =\n            \"--AaB03x\\r\\n\" +\n            \"content-disposition: form-data; name=\\\"field1\\\"\\r\\n\" +\n            \"\\r\\n\" +\n            \"Joe Blow\\r\\n\" +\n            \"--AaB03x\\r\\n\" +\n            \"content-disposition: form-data; name=\\\"pics\\\"\\r\\n\" +\n            \"Content-type: multipart/mixed; boundary=BbC04y\\r\\n\" +\n            \"\\r\\n\" +\n            \"--BbC04y\\r\\n\" +\n            \"Content-disposition: attachment; filename=\\\"file1.txt\\\"\\r\\n\" +\n            \"Content-Type: text/plain\\r\\n\" +\n            \"\\r\\n\" +\n            \"... contents of file1.txt ...\\r\\n\" +\n            \"--BbC04y\\r\\n\" +\n            \"Content-disposition: attachment; filename=\\\"file2.gif\\\"\\r\\n\" +\n            \"Content-type: image/gif\\r\\n\" +\n            \"Content-Transfer-Encoding: binary\\r\\n\" +\n            \"\\r\\n\" +\n            \"...contents of file2.gif...\\r\\n\" +\n            \"--BbC04y--\\r\\n\" +\n            \"--AaB03x--\";\n        // @formatter:on\n        final var fileItems = parseUpload(upload, request.getBytes(StandardCharsets.US_ASCII), contentType);\n        assertEquals(3, fileItems.size());\n        final var item0 = fileItems.get(0);\n        assertEquals(\"field1\", item0.getFieldName());\n        assertNull(item0.getName());\n        assertEquals(\"Joe Blow\", new String(item0.get()));\n        final var item1 = fileItems.get(1);\n        assertEquals(\"pics\", item1.getFieldName());\n        assertEquals(\"file1.txt\", item1.getName());\n        assertEquals(\"... contents of file1.txt ...\", new String(item1.get()));\n        final var item2 = fileItems.get(2);\n        assertEquals(\"pics\", item2.getFieldName());\n        assertEquals(\"file2.gif\", item2.getName());\n        assertEquals(\"...contents of file2.gif...\", new String(item2.get()));\n    }\n\n    /**\n     * Test for <a href=\"https://issues.apache.org/jira/browse/FILEUPLOAD-111\">FILEUPLOAD-111</a>\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testFoldedHeaders() throws IOException {\n        // @formatter:off\n        final var fileItems = parseUpload(upload, \"-----1234\\r\\n\" +\n                \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"foo.tab\\\"\\r\\n\" +\n                \"Content-Type: text/whatever\\r\\n\" +\n                \"\\r\\n\" +\n                \"This is the content of the file\\n\" +\n                \"\\r\\n\" +\n                \"-----1234\\r\\n\" +\n                \"Content-Disposition: form-data; \\r\\n\" +\n                \"\\tname=\\\"field\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"fieldValue\\r\\n\" +\n                \"-----1234\\r\\n\" +\n                \"Content-Disposition: form-data;\\r\\n\" +\n                \"     name=\\\"multi\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"value1\\r\\n\" +\n                \"-----1234\\r\\n\" +\n                \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"value2\\r\\n\" +\n                \"-----1234--\\r\\n\");\n        // @formatter:on\n        assertEquals(4, fileItems.size());\n\n        final var file = fileItems.get(0);\n        assertEquals(\"file\", file.getFieldName());\n        assertFalse(file.isFormField());\n        assertEquals(\"This is the content of the file\\n\", file.getString());\n        assertEquals(\"text/whatever\", file.getContentType());\n        assertEquals(\"foo.tab\", file.getName());\n\n        final var field = fileItems.get(1);\n        assertEquals(\"field\", field.getFieldName());\n        assertTrue(field.isFormField());\n        assertEquals(\"fieldValue\", field.getString());\n\n        final var multi0 = fileItems.get(2);\n        assertEquals(\"multi\", multi0.getFieldName());\n        assertTrue(multi0.isFormField());\n        assertEquals(\"value1\", multi0.getString());\n\n        final var multi1 = fileItems.get(3);\n        assertEquals(\"multi\", multi1.getFieldName());\n        assertTrue(multi1.isFormField());\n        assertEquals(\"value2\", multi1.getString());\n    }\n\n    /**\n     * Internet Explorer 5 for the Mac has a bug where the carriage return is missing on any boundary line immediately preceding an input with type=image.\n     * (type=submit does not have the bug.)\n     *\n     * @throws FileUploadException Test failure.\n     */\n    @Test\n    public void testIE5MacBug() throws FileUploadException {\n        final var fileItems = parseUpload(upload,\n        // @formatter:off\n                \"-----1234\\r\\n\" +\n                \"Content-Disposition: form-data; name=\\\"field1\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"fieldValue\\r\\n\" +\n                \"-----1234\\n\" + // NOTE \\r missing\n                \"Content-Disposition: form-data; name=\\\"submitName.x\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"42\\r\\n\" +\n                \"-----1234\\n\" + // NOTE \\r missing\n                \"Content-Disposition: form-data; name=\\\"submitName.y\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"21\\r\\n\" +\n                \"-----1234\\r\\n\" +\n                \"Content-Disposition: form-data; name=\\\"field2\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"fieldValue2\\r\\n\" +\n                \"-----1234--\\r\\n\");\n        //@formatter:on\n\n        assertEquals(4, fileItems.size());\n\n        final var field1 = fileItems.get(0);\n        assertEquals(\"field1\", field1.getFieldName());\n        assertTrue(field1.isFormField());\n        assertEquals(\"fieldValue\", field1.getString());\n\n        final var submitX = fileItems.get(1);\n        assertEquals(\"submitName.x\", submitX.getFieldName());\n        assertTrue(submitX.isFormField());\n        assertEquals(\"42\", submitX.getString());\n\n        final var submitY = fileItems.get(2);\n        assertEquals(\"submitName.y\", submitY.getFieldName());\n        assertTrue(submitY.isFormField());\n        assertEquals(\"21\", submitY.getString());\n\n        final var field2 = fileItems.get(3);\n        assertEquals(\"field2\", field2.getFieldName());\n        assertTrue(field2.isFormField());\n        assertEquals(\"fieldValue2\", field2.getString());\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractFileUploadWrapper.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\n\n/**\n * Common tests for implementations of {@link AbstractFileUpload}. This is a parameterized test. Tests must be valid and common to all implementations of\n * FileUpload added as parameter in this class.\n *\n * @param <AFU> The type for {@link AbstractFileUpload}.\n * @param <R>   The FileUpload request type.\n * @param <I>   The FileItem type.\n * @param <F>   The FileItemFactory type.\n */\npublic abstract class AbstractFileUploadWrapper<AFU extends AbstractFileUpload<R, I, F>, R, I extends FileItem<I>, F extends FileItemFactory<I>> {\n\n    protected final AFU upload;\n\n    protected AbstractFileUploadWrapper(final AFU fileUpload) {\n        this.upload = fileUpload;\n    }\n\n    public List<I> parseUpload(final AFU upload, final byte[] bytes) throws FileUploadException {\n        return parseUpload(upload, bytes, Constants.CONTENT_TYPE);\n    }\n\n    public abstract List<I> parseUpload(final AFU upload, final byte[] bytes, final String contentType) throws FileUploadException;\n\n    public List<I> parseUpload(final AFU upload, final String content) throws FileUploadException {\n        final var bytes = content.getBytes(StandardCharsets.US_ASCII);\n        return parseUpload(upload, bytes, Constants.CONTENT_TYPE);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/QuotedPrintableDecoderTestCase.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.fail;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n */\npublic final class QuotedPrintableDecoderTestCase {\n\n    private static void assertEncoded(final String clearText, final String encoded) throws Exception {\n        final var expected = clearText.getBytes(StandardCharsets.US_ASCII);\n\n        final var out = new ByteArrayOutputStream(encoded.length());\n        final var encodedData = encoded.getBytes(StandardCharsets.US_ASCII);\n        QuotedPrintableDecoder.decode(encodedData, out);\n        final var actual = out.toByteArray();\n\n        assertArrayEquals(expected, actual);\n    }\n\n    private static void assertIOException(final String messageText, final String encoded) {\n        final var out = new ByteArrayOutputStream(encoded.length());\n        final var encodedData = encoded.getBytes(StandardCharsets.US_ASCII);\n        try {\n            QuotedPrintableDecoder.decode(encodedData, out);\n            fail(\"Expected IOException\");\n        } catch (final IOException e) {\n            final var em = e.getMessage();\n            assertTrue(em.contains(messageText), \"Expected to find \" + messageText + \" in '\" + em + \"'\");\n        }\n    }\n\n    @Test\n    public void basicEncodeDecode() throws Exception {\n        assertEncoded(\"= Hello there =\\r\\n\", \"=3D Hello there =3D=0D=0A\");\n    }\n\n    @Test\n    public void emptyDecode() throws Exception {\n        assertEncoded(\"\", \"\");\n    }\n\n    @Test\n    public void invalidCharDecode() {\n        assertThrows(IOException.class, () -> assertEncoded(\"=\\r\\n\", \"=3D=XD=XA\"));\n    }\n\n    @Test\n    public void invalidQuotedPrintableEncoding() throws Exception {\n        assertIOException(\"truncated escape sequence\", \"YWJjMTIzXy0uKn4hQCMkJV4mKCkre31cIlxcOzpgLC9bXQ==\");\n    }\n\n    @Test\n    public void invalidSoftBreak1() throws Exception {\n        assertIOException(\"CR must be followed by LF\", \"=\\r\\r\");\n    }\n\n    @Test\n    public void invalidSoftBreak2() throws Exception {\n        assertIOException(\"CR must be followed by LF\", \"=\\rn\");\n    }\n\n    @Test\n    public void plainDecode() throws Exception {\n        // spaces are allowed in encoded data\n        // There are special rules for trailing spaces; these are not currently implemented.\n        assertEncoded(\"The quick brown fox jumps over the lazy dog.\", \"The quick brown fox jumps over the lazy dog.\");\n    }\n\n    /**\n     * This is NOT supported by Commons-Codec, see CODEC-121.\n     *\n     * @throws Exception\n     * @see <a href=\"https://issues.apache.org/jira/browse/CODEC-121\">CODEC-121</a>\n     */\n    @Test\n    public void softLineBreakDecode() throws Exception {\n        assertEncoded(\"If you believe that truth=beauty, then surely mathematics is the most \" + \"beautiful branch of philosophy.\",\n                \"If you believe that truth=3Dbeauty, then \" + \"surely=20=\\r\\nmathematics is the most beautiful branch of philosophy.\");\n    }\n\n    @Test\n    public void truncatedEscape() throws Exception {\n        assertIOException(\"truncated\", \"=1\");\n    }\n\n    @Test\n    public void unsafeDecode() throws Exception {\n        assertEncoded(\"=\\r\\n\", \"=3D=0D=0A\");\n    }\n\n    @Test\n    public void unsafeDecodeLowerCase() throws Exception {\n        assertEncoded(\"=\\r\\n\", \"=3d=0d=0a\");\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/ParameterParserTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * Unit tests for {@link ParameterParser}.\n */\npublic class ParameterParserTest {\n\n    @Test\n    public void testContentTypeParsing() {\n        final var s = \"text/plain; Charset=UTF-8\";\n        final var parser = new ParameterParser();\n        parser.setLowerCaseNames(true);\n        final var params = parser.parse(s, ';');\n        assertEquals(\"UTF-8\", params.get(\"charset\"));\n    }\n\n    // See: https://issues.apache.org/jira/browse/FILEUPLOAD-139\n    @Test\n    public void testFileUpload139() {\n        final var parser = new ParameterParser();\n        var s = \"Content-type: multipart/form-data , boundary=AaB03x\";\n        var params = parser.parse(s, new char[] { ',', ';' });\n        assertEquals(\"AaB03x\", params.get(\"boundary\"));\n\n        s = \"Content-type: multipart/form-data, boundary=AaB03x\";\n        params = parser.parse(s, new char[] { ';', ',' });\n        assertEquals(\"AaB03x\", params.get(\"boundary\"));\n\n        s = \"Content-type: multipart/mixed, boundary=BbC04y\";\n        params = parser.parse(s, new char[] { ',', ';' });\n        assertEquals(\"BbC04y\", params.get(\"boundary\"));\n    }\n\n    /**\n     * Test for <a href=\"https://issues.apache.org/jira/browse/FILEUPLOAD-199\">FILEUPLOAD-199</a>\n     */\n    @Test\n    public void testFileUpload199() {\n        final var parser = new ParameterParser();\n        final var s = \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"=?ISO-8859-\"\n                + \"1?B?SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?= =?ISO-8859-2?B?dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=\\\"\\r\\n\";\n        final var params = parser.parse(s, new char[] { ',', ';' });\n        assertEquals(\"If you can read this you understand the example.\", params.get(\"filename\"));\n    }\n\n    /**\n     * Test for <a href=\"https://issues.apache.org/jira/browse/FILEUPLOAD-274\">FILEUPLOAD-274</a>\n     */\n    @Test\n    public void testFileUpload274() {\n        final var parser = new ParameterParser();\n\n        // Should parse a UTF-8 charset\n        var s = \"Content-Disposition: form-data; \" + \"name=\\\"file\\\"; filename*=UTF-8''%E3%81%93%E3%82%93%E3%81%AB%E3%81%A1%E3%81%AF\\r\\n\";\n        var params = parser.parse(s, new char[] { ',', ';' });\n        assertEquals(\"\\u3053\\u3093\\u306B\\u3061\\u306F\", params.get(\"filename\")); // filename = \"ããã«ã¡ã¯\" in japanese\n\n        // Should parse ISO-8859-1 charset\n        s = \"Content-Disposition: form-data; name=\\\"file\\\"; filename*=UTF-8''%70%C3%A2%74%C3%A9\\r\\n\";\n        params = parser.parse(s, new char[] { ',', ';' });\n        assertEquals(\"\\u0070\\u00e2\\u0074\\u00e9\", params.get(\"filename\")); // filename = \"pÃ¢tÃ©\" in french\n\n        // Should not decode if '*' is not at the end of param-name\n        s = \"Content-Disposition: form-data; name=\\\"file\\\"; file*name=UTF-8''%61%62%63\\r\\n\";\n        params = parser.parse(s, new char[] { ',', ';' });\n        assertEquals(\"UTF-8''%61%62%63\", params.get(\"file*name\"));\n\n        // Should not decode if param-value does not follow <charset>'<lang>'<encoded>\n        s = \"Content-Disposition: form-data; name=\\\"file\\\"; filename*=a'bc\\r\\n\";\n        params = parser.parse(s, new char[] { ',', ';' });\n        assertEquals(\"a'bc\", params.get(\"filename\"));\n\n        // Should not decode if param-name doesn't have '*' at end\n        s = \"Content-Disposition: form-data; name=\\\"file\\\"; filename=a'b'c\\r\\n\";\n        params = parser.parse(s, new char[] { ',', ';' });\n        assertEquals(\"a'b'c\", params.get(\"filename\"));\n    }\n\n    @Test\n    public void testParsing() {\n        var s = \"test; test1 =  stuff   ; test2 =  \\\"stuff; stuff\\\"; test3=\\\"stuff\";\n        final var parser = new ParameterParser();\n        var params = parser.parse(s, ';');\n        assertNull(params.get(\"test\"));\n        assertEquals(\"stuff\", params.get(\"test1\"));\n        assertEquals(\"stuff; stuff\", params.get(\"test2\"));\n        assertEquals(\"\\\"stuff\", params.get(\"test3\"));\n\n        params = parser.parse(s, new char[] { ',', ';' });\n        assertNull(params.get(\"test\"));\n        assertEquals(\"stuff\", params.get(\"test1\"));\n        assertEquals(\"stuff; stuff\", params.get(\"test2\"));\n        assertEquals(\"\\\"stuff\", params.get(\"test3\"));\n\n        s = \"  test  , test1=stuff   ,  , test2=, test3, \";\n        params = parser.parse(s, ',');\n        assertNull(params.get(\"test\"));\n        assertEquals(\"stuff\", params.get(\"test1\"));\n        assertNull(params.get(\"test2\"));\n        assertNull(params.get(\"test3\"));\n\n        s = \"  test\";\n        params = parser.parse(s, ';');\n        assertNull(params.get(\"test\"));\n\n        s = \"  \";\n        params = parser.parse(s, ';');\n        assertEquals(0, params.size());\n\n        s = \" = stuff \";\n        params = parser.parse(s, ';');\n        assertEquals(0, params.size());\n    }\n\n    @Test\n    public void testParsingEscapedChars() {\n        var s = \"param = \\\"stuff\\\\\\\"; more stuff\\\"\";\n        final var parser = new ParameterParser();\n        var params = parser.parse(s, ';');\n        assertEquals(1, params.size());\n        assertEquals(\"stuff\\\\\\\"; more stuff\", params.get(\"param\"));\n\n        s = \"param = \\\"stuff\\\\\\\\\\\"; anotherparam\";\n        params = parser.parse(s, ';');\n        assertEquals(2, params.size());\n        assertEquals(\"stuff\\\\\\\\\", params.get(\"param\"));\n        assertNull(params.get(\"anotherparam\"));\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/FileItemHeadersTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Iterator;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * Unit tests {@link FileItemHeaders} and {@link FileItemHeadersImpl}.\n */\npublic class FileItemHeadersTest {\n\n    /**\n     * @throws Exception\n     */\n    @Test\n    public void testFileItemHeaders() throws Exception {\n        final var mutableFileItemHeaders = new FileItemHeadersImpl();\n        mutableFileItemHeaders.addHeader(\"Content-Disposition\", \"form-data; name=\\\"FileItem\\\"; filename=\\\"file1.txt\\\"\");\n        mutableFileItemHeaders.addHeader(\"Content-Type\", \"text/plain\");\n\n        mutableFileItemHeaders.addHeader(\"TestHeader\", \"headerValue1\");\n        mutableFileItemHeaders.addHeader(\"TestHeader\", \"headerValue2\");\n        mutableFileItemHeaders.addHeader(\"TestHeader\", \"headerValue3\");\n        mutableFileItemHeaders.addHeader(\"testheader\", \"headerValue4\");\n\n        final var headerNameIterator = mutableFileItemHeaders.getHeaderNames();\n        assertEquals(\"content-disposition\", headerNameIterator.next());\n        assertEquals(\"content-type\", headerNameIterator.next());\n        assertEquals(\"testheader\", headerNameIterator.next());\n        assertFalse(headerNameIterator.hasNext());\n\n        assertEquals(mutableFileItemHeaders.getHeader(\"Content-Disposition\"), \"form-data; name=\\\"FileItem\\\"; filename=\\\"file1.txt\\\"\");\n        assertEquals(mutableFileItemHeaders.getHeader(\"Content-Type\"), \"text/plain\");\n        assertEquals(mutableFileItemHeaders.getHeader(\"content-type\"), \"text/plain\");\n        assertEquals(mutableFileItemHeaders.getHeader(\"TestHeader\"), \"headerValue1\");\n        assertNull(mutableFileItemHeaders.getHeader(\"DummyHeader\"));\n\n        Iterator<String> headerValueEnumeration;\n\n        headerValueEnumeration = mutableFileItemHeaders.getHeaders(\"Content-Type\");\n        assertTrue(headerValueEnumeration.hasNext());\n        assertEquals(headerValueEnumeration.next(), \"text/plain\");\n        assertFalse(headerValueEnumeration.hasNext());\n\n        headerValueEnumeration = mutableFileItemHeaders.getHeaders(\"content-type\");\n        assertTrue(headerValueEnumeration.hasNext());\n        assertEquals(headerValueEnumeration.next(), \"text/plain\");\n        assertFalse(headerValueEnumeration.hasNext());\n\n        headerValueEnumeration = mutableFileItemHeaders.getHeaders(\"TestHeader\");\n        assertTrue(headerValueEnumeration.hasNext());\n        assertEquals(headerValueEnumeration.next(), \"headerValue1\");\n        assertTrue(headerValueEnumeration.hasNext());\n        assertEquals(headerValueEnumeration.next(), \"headerValue2\");\n        assertTrue(headerValueEnumeration.hasNext());\n        assertEquals(headerValueEnumeration.next(), \"headerValue3\");\n        assertTrue(headerValueEnumeration.hasNext());\n        assertEquals(headerValueEnumeration.next(), \"headerValue4\");\n        assertFalse(headerValueEnumeration.hasNext());\n\n        headerValueEnumeration = mutableFileItemHeaders.getHeaders(\"DummyHeader\");\n        assertFalse(headerValueEnumeration.hasNext());\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertSame;\n\nimport org.apache.commons.fileupload2.core.FileItemFactory.AbstractFileItemBuilder;\nimport org.junit.jupiter.api.Test;\n\n/**\n * Tests for {@link DiskFileItem}.\n */\npublic class DiskFileItemTest {\n\n    @Test\n    void testBuilderHeaders() {\n        final var builder = DiskFileItem.builder();\n        assertNotNull(builder.getFileItemHeaders());\n        final var fileItem = builder.get();\n        assertNotNull(fileItem.getHeaders(), \"Missing default headers (empty)\");\n        assertFalse(fileItem.getHeaders().getHeaderNames().hasNext());\n        assertNotNull(fileItem.getHeaders());\n        final var fileItemHeaders = AbstractFileItemBuilder.newFileItemHeaders();\n        assertNotNull(fileItemHeaders);\n        fileItem.setHeaders(fileItemHeaders);\n        assertSame(fileItemHeaders, fileItem.getHeaders());\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/AbstractStreamingTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 16
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.fail;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.InvalidPathException;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * Unit test for items with varying sizes.\n *\n * @param <AFU> The subclass of FileUpload.\n * @param <R>   The type of FileUpload request.\n * @param <C>   The request context type.\n * @param <I>   The FileItem type.\n * @param <F>   The FileItemFactory type.\n */\npublic abstract class AbstractStreamingTest<AFU extends AbstractFileUpload<R, I, F>, R, C extends AbstractRequestContext<?>, I extends FileItem<I>, F extends FileItemFactory<I>>\n        extends AbstractTest<AFU, R, I, F> {\n\n    protected String getFooter() {\n        return \"-----1234--\\r\\n\";\n    }\n\n    protected String getHeader(final String value) {\n        // @formatter:off\n        return \"-----1234\\r\\n\"\n            + \"Content-Disposition: form-data; name=\\\"\" + value + \"\\\"\\r\\n\"\n            + \"\\r\\n\";\n        // @formatter:on\n    }\n\n    protected abstract F newDiskFileItemFactory();\n\n    protected byte[] newRequest() throws IOException {\n        final var baos = new ByteArrayOutputStream();\n        try (final var osw = new OutputStreamWriter(baos, StandardCharsets.US_ASCII)) {\n            var add = 16;\n            var num = 0;\n            for (var i = 0; i < 16384; i += add) {\n                if (++add == 32) {\n                    add = 16;\n                }\n                osw.write(getHeader(\"field\" + num++));\n                osw.flush();\n                for (var j = 0; j < i; j++) {\n                    baos.write((byte) j);\n                }\n                osw.write(\"\\r\\n\");\n            }\n            osw.write(getFooter());\n        }\n        return baos.toByteArray();\n    }\n\n    protected abstract C newServletRequestContext(final R request);\n\n    protected byte[] newShortRequest() throws IOException {\n        final var baos = new ByteArrayOutputStream();\n        try (final var osw = new OutputStreamWriter(baos, StandardCharsets.US_ASCII)) {\n            osw.write(getHeader(\"field\"));\n            osw.write(\"123\");\n            osw.write(\"\\r\\n\");\n            osw.write(getFooter());\n        }\n        return baos.toByteArray();\n    }\n\n    protected List<I> parseUpload(final byte[] bytes) throws FileUploadException {\n        return parseUpload(new ByteArrayInputStream(bytes), bytes.length);\n    }\n\n    protected List<I> parseUpload(final InputStream inputStream, final int length) throws FileUploadException {\n        final var contentType = \"multipart/form-data; boundary=---1234\";\n\n        final var upload = newFileUpload();\n        upload.setFileItemFactory(newDiskFileItemFactory());\n        final var request = newMockHttpServletRequest(inputStream, length, contentType, -1);\n\n        return upload.parseRequest(newServletRequestContext(request));\n    }\n\n    protected FileItemInputIterator parseUpload(final int length, final InputStream inputStream) throws FileUploadException, IOException {\n        final var contentType = \"multipart/form-data; boundary=---1234\";\n\n        final var upload = newFileUpload();\n        upload.setFileItemFactory(newDiskFileItemFactory());\n        final var request = newMockHttpServletRequest(inputStream, length, contentType, -1);\n\n        return upload.getItemIterator(newServletRequestContext(request));\n    }\n\n    /**\n     * Tests a file upload with varying file sizes.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testFileUpload() throws IOException {\n        final var request = newRequest();\n        final var fileItems = parseUpload(request);\n        final var fileIter = fileItems.iterator();\n        var add = 16;\n        var num = 0;\n        for (var i = 0; i < 16384; i += add) {\n            if (++add == 32) {\n                add = 16;\n            }\n            final var item = fileIter.next();\n            assertEquals(\"field\" + num++, item.getFieldName());\n            final var bytes = item.get();\n            assertEquals(i, bytes.length);\n            for (var j = 0; j < i; j++) {\n                assertEquals((byte) j, bytes[j]);\n            }\n        }\n        assertTrue(!fileIter.hasNext());\n    }\n\n    /**\n     * Test for FILEUPLOAD-135\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testFILEUPLOAD135() throws IOException {\n        final var request = newShortRequest();\n        final var bais = new ByteArrayInputStream(request);\n        final var fileItems = parseUpload(new InputStream() {\n            @Override\n            public int read() throws IOException {\n                return bais.read();\n            }\n\n            @Override\n            public int read(final byte[] b, final int off, final int len) throws IOException {\n                return bais.read(b, off, Math.min(len, 3));\n            }\n\n        }, request.length);\n        final var fileIter = fileItems.iterator();\n        assertTrue(fileIter.hasNext());\n        final var item = fileIter.next();\n        assertEquals(\"field\", item.getFieldName());\n        final var bytes = item.get();\n        assertEquals(3, bytes.length);\n        assertEquals((byte) '1', bytes[0]);\n        assertEquals((byte) '2', bytes[1]);\n        assertEquals((byte) '3', bytes[2]);\n        assertTrue(!fileIter.hasNext());\n    }\n\n    /**\n     * Tests, whether an invalid request throws a proper exception.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testFileUploadException() throws IOException {\n        final var request = newRequest();\n        final var invalidRequest = new byte[request.length - 11];\n        System.arraycopy(request, 0, invalidRequest, 0, request.length - 11);\n        try {\n            parseUpload(invalidRequest);\n            fail(\"Expected EndOfStreamException\");\n        } catch (final FileUploadException e) {\n            assertTrue(e.getSuppressed()[0] instanceof MultipartInput.MalformedStreamException, e.toString());\n        }\n    }\n\n    /**\n     * Tests, whether an {@link InvalidPathException} is thrown.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testInvalidFileNameException() throws IOException {\n        final var fileName = \"foo.exe\\u0000.png\";\n        // @formatter:off\n        final var request =\n            \"-----1234\\r\\n\" +\n            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"\" + fileName + \"\\\"\\r\\n\" +\n            \"Content-Type: text/whatever\\r\\n\" +\n            \"\\r\\n\" +\n            \"This is the content of the file\\n\" +\n            \"\\r\\n\" +\n            \"-----1234\\r\\n\" +\n            \"Content-Disposition: form-data; name=\\\"field\\\"\\r\\n\" +\n            \"\\r\\n\" +\n            \"fieldValue\\r\\n\" +\n            \"-----1234\\r\\n\" +\n            \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n            \"\\r\\n\" +\n            \"value1\\r\\n\" +\n            \"-----1234\\r\\n\" +\n            \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n            \"\\r\\n\" +\n            \"value2\\r\\n\" +\n            \"-----1234--\\r\\n\";\n        // @formatter:on\n        final var reqBytes = request.getBytes(StandardCharsets.US_ASCII);\n\n        final var fileItemIter = parseUpload(reqBytes.length, new ByteArrayInputStream(reqBytes));\n        final var fileItemInput = fileItemIter.next();\n        try {\n            fileItemInput.getName();\n            fail(\"Expected exception\");\n        } catch (final InvalidPathException e) {\n            assertEquals(fileName, e.getInput());\n            assertEquals(26, e.getMessage().indexOf(fileName));\n            assertEquals(7, e.getIndex());\n            assertTrue(e.getMessage().contains(\"foo.exe\\\\0.png\"));\n        }\n\n        try {\n            parseUpload(reqBytes);\n            fail(\"Expected exception\");\n        } catch (final InvalidPathException e) {\n            assertEquals(fileName, e.getInput());\n            assertEquals(26, e.getMessage().indexOf(fileName));\n            assertEquals(7, e.getIndex());\n            assertTrue(e.getMessage().contains(\"foo.exe\\\\0.png\"));\n        }\n    }\n\n    /**\n     * Tests, whether an IOException is properly delegated.\n     *\n     * @throws IOException Test failure.\n     */\n    @Test\n    public void testIOException() throws IOException {\n        final var request = newRequest();\n        final InputStream stream = new FilterInputStream(new ByteArrayInputStream(request)) {\n            private int num;\n\n            @Override\n            public int read() throws IOException {\n                if (++num > 123) {\n                    throw new IOException(\"123\");\n                }\n                return super.read();\n            }\n\n            @Override\n            public int read(final byte[] buffer, final int offset, final int length) throws IOException {\n                for (var i = 0; i < length; i++) {\n                    final var res = read();\n                    if (res == -1) {\n                        return i == 0 ? -1 : i;\n                    }\n                    buffer[offset + i] = (byte) res;\n                }\n                return length;\n            }\n        };\n        try {\n            parseUpload(stream, request.length);\n            fail(\"Expected IOException\");\n        } catch (final FileUploadException e) {\n            assertTrue(e.getCause() instanceof IOException);\n            assertEquals(\"123\", e.getCause().getMessage());\n        }\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaServletFileUpload.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 17
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUpload;\nimport org.apache.commons.fileupload2.core.FileItem;\nimport org.apache.commons.fileupload2.core.FileItemFactory;\nimport org.apache.commons.fileupload2.core.FileItemInputIterator;\nimport org.apache.commons.fileupload2.core.FileUploadException;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n/**\n * High level API for processing file uploads.\n * <p>\n * This class handles multiple files per single HTML widget, sent using {@code multipart/mixed} encoding type, as specified by\n * <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>. Use {@link #parseRequest(HttpServletRequest)} to acquire a list of {@link FileItem}s associated\n * with a given HTML widget.\n * </p>\n * <p>\n * How the data for individual parts is stored is determined by the factory used to create them; a given part may be in memory, on disk, or somewhere else.\n * </p>\n *\n * @param <I> The FileItem type.\n * @param <F> the FileItemFactory type.\n */\npublic class JakartaServletFileUpload<I extends FileItem<I>, F extends FileItemFactory<I>> extends AbstractFileUpload<HttpServletRequest, I, F> {\n\n    /**\n     * Constant for HTTP POST method.\n     */\n    private static final String POST_METHOD = \"POST\";\n\n    /**\n     * Tests whether the request contains multipart content.\n     *\n     * @param request The servlet request to be evaluated. Must be non-null.\n     *\n     * @return {@code true} if the request is multipart; {@code false} otherwise.\n     */\n    public static final boolean isMultipartContent(final HttpServletRequest request) {\n        return POST_METHOD.equalsIgnoreCase(request.getMethod()) && AbstractFileUpload.isMultipartContent(new JakartaServletRequestContext(request));\n    }\n\n    /**\n     * Constructs an uninitialized instance of this class. A factory must be configured, using {@code setFileItemFactory()}, before attempting to parse\n     * requests.\n     *\n     * @see AbstractFileUpload#AbstractFileUpload()\n     */\n    public JakartaServletFileUpload() {\n    }\n\n    /**\n     * Constructs an instance of this class which uses the supplied factory to create {@code FileItem} instances.\n     *\n     * @see AbstractFileUpload#AbstractFileUpload()\n     * @param fileItemFactory The factory to use for creating file items.\n     */\n    public JakartaServletFileUpload(final F fileItemFactory) {\n        setFileItemFactory(fileItemFactory);\n    }\n\n    /**\n     * Gets an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} file item iterator.\n     *\n     * @param request The servlet request to be parsed.\n     * @return An iterator to instances of {@code FileItemInput} parsed from the request, in the order that they were transmitted.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     * @throws IOException         An I/O error occurred. This may be a network error while communicating with the client or a problem while storing the\n     *                             uploaded content.\n     */\n    @Override\n    public FileItemInputIterator getItemIterator(final HttpServletRequest request) throws FileUploadException, IOException {\n        return super.getItemIterator(new JakartaServletRequestContext(request));\n    }\n\n    /**\n     * Parses an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} stream.\n     *\n     * @param request The servlet request to be parsed.\n     * @return A map of {@code FileItem} instances parsed from the request.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     */\n    @Override\n    public Map<String, List<I>> parseParameterMap(final HttpServletRequest request) throws FileUploadException {\n        return parseParameterMap(new JakartaServletRequestContext(request));\n    }\n\n    /**\n     * Parses an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} stream.\n     *\n     * @param request The servlet request to be parsed.\n     * @return A list of {@code FileItem} instances parsed from the request, in the order that they were transmitted.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     */\n    @Override\n    public List<I> parseRequest(final HttpServletRequest request) throws FileUploadException {\n        return parseRequest(new JakartaServletRequestContext(request));\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaServletDiskFileUpload.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 18
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.fileupload2.jakarta;\n\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\n\n/**\n * A JakartaServletFileUpload for {@link DiskFileItem} and {@link DiskFileItemFactory}.\n */\npublic class JakartaServletDiskFileUpload extends JakartaServletFileUpload<DiskFileItem, DiskFileItemFactory> {\n\n    public JakartaServletDiskFileUpload() {\n        super(DiskFileItemFactory.builder().get());\n    }\n\n    public JakartaServletDiskFileUpload(final DiskFileItemFactory fileItemFactory) {\n        super(fileItemFactory);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/package-info.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 19
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * <p>\n * An implementation of {@link org.apache.commons.fileupload2.core.AbstractFileUpload} for use in servlets conforming to the namespace {@code jakarta.servlet}.\n *\n * </p>\n * <p>\n * The following code fragment demonstrates typical usage.\n * </p>\n *\n * <pre>{@code\n * DiskFileItemFactory factory = DiskFileItemFactory().builder().get();\n * // Configure the factory here, if desired.\n * JakartaServletFileUpload  upload = new JakartaServletFileUpload (factory);\n * // Configure the uploader here, if desired.\n * List fileItems = upload.parseRequest(request);\n * }</pre>\n * <p>\n * Please see the FileUpload <a href=\"https://commons.apache.org/fileupload/using.html\" target=\"_top\">User Guide</a> for further details and examples of how to\n * use this package.\n * </p>\n */\npackage org.apache.commons.fileupload2.jakarta;\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaFileCleaner.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 20
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport org.apache.commons.io.FileCleaningTracker;\n\nimport jakarta.servlet.ServletContext;\nimport jakarta.servlet.ServletContextEvent;\nimport jakarta.servlet.ServletContextListener;\n\n/**\n * A servlet context listener, which ensures that the {@link FileCleaningTracker}'s reaper thread is terminated, when the web application is destroyed.\n */\npublic class JakartaFileCleaner implements ServletContextListener {\n\n    /**\n     * Attribute name, which is used for storing an instance of {@link FileCleaningTracker} in the web application.\n     */\n    public static final String FILE_CLEANING_TRACKER_ATTRIBUTE = JakartaFileCleaner.class.getName() + \".FileCleaningTracker\";\n\n    /**\n     * Gets the instance of {@link FileCleaningTracker}, which is associated with the given {@link ServletContext}.\n     *\n     * @param servletContext The servlet context to query\n     * @return The contexts tracker\n     */\n    public static FileCleaningTracker getFileCleaningTracker(final ServletContext servletContext) {\n        return (FileCleaningTracker) servletContext.getAttribute(FILE_CLEANING_TRACKER_ATTRIBUTE);\n    }\n\n    /**\n     * Sets the instance of {@link FileCleaningTracker}, which is associated with the given {@link ServletContext}.\n     *\n     * @param servletContext The servlet context to modify\n     * @param tracker        The tracker to set\n     */\n    public static void setFileCleaningTracker(final ServletContext servletContext, final FileCleaningTracker tracker) {\n        servletContext.setAttribute(FILE_CLEANING_TRACKER_ATTRIBUTE, tracker);\n    }\n\n    /**\n     * Called when the web application is being destroyed. Calls {@link FileCleaningTracker#exitWhenFinished()}.\n     *\n     * @param sce The servlet context, used for calling {@link #getFileCleaningTracker(ServletContext)}.\n     */\n    @Override\n    public void contextDestroyed(final ServletContextEvent sce) {\n        getFileCleaningTracker(sce.getServletContext()).exitWhenFinished();\n    }\n\n    /**\n     * Called when the web application is initialized. Does nothing.\n     *\n     * @param sce The servlet context, used for calling {@link #setFileCleaningTracker(ServletContext, FileCleaningTracker)}.\n     */\n    @Override\n    public void contextInitialized(final ServletContextEvent sce) {\n        setFileCleaningTracker(sce.getServletContext(), new FileCleaningTracker());\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/main/java/org/apache/commons/fileupload2/jakarta/JakartaServletRequestContext.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 21
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.apache.commons.fileupload2.core.AbstractRequestContext;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n/**\n * Provides access to the request information needed for a request made to an HTTP servlet.\n */\npublic class JakartaServletRequestContext extends AbstractRequestContext<HttpServletRequest> {\n\n    /**\n     * The request for which the context is being provided.\n     */\n    private final HttpServletRequest request;\n\n    /**\n     * Constructs a context for this request.\n     *\n     * @param request The request to which this context applies.\n     */\n    public JakartaServletRequestContext(final HttpServletRequest request) {\n        super(request::getHeader, request::getContentLength, request);\n        this.request = request;\n    }\n\n    /**\n     * Gets the character encoding for the request.\n     *\n     * @return The character encoding for the request.\n     */\n    @Override\n    public String getCharacterEncoding() {\n        return request.getCharacterEncoding();\n    }\n\n    /**\n     * Gets the content type of the request.\n     *\n     * @return The content type of the request.\n     */\n    @Override\n    public String getContentType() {\n        return request.getContentType();\n    }\n\n    /**\n     * Gets the input stream for the request.\n     *\n     * @return The input stream for the request.\n     * @throws IOException if a problem occurs.\n     */\n    @Override\n    public InputStream getInputStream() throws IOException {\n        return request.getInputStream();\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaProgressListenerDiskTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 22
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport java.io.InputStream;\n\nimport org.apache.commons.fileupload2.core.AbstractProgressListenerTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\nimport org.apache.commons.fileupload2.core.ProgressListener;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n/**\n * Tests the {@link ProgressListener}.\n */\npublic class JakartaProgressListenerDiskTest extends\n        AbstractProgressListenerTest<JakartaServletFileUpload<DiskFileItem, DiskFileItemFactory>, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected JakartaServletDiskFileUpload newFileUpload() {\n        return new JakartaServletDiskFileUpload();\n    }\n\n    @Override\n    protected HttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType, final int readLimit) {\n        return new JakartaMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaSizesTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 23
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport java.io.InputStream;\n\nimport org.apache.commons.fileupload2.core.AbstractSizesTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n/**\n * Unit test for items with varying sizes.\n */\npublic class JakartaSizesTest\n        extends AbstractSizesTest<JakartaServletFileUpload<DiskFileItem, DiskFileItemFactory>, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected JakartaServletFileUpload<DiskFileItem, DiskFileItemFactory> newFileUpload() {\n        return new JakartaServletFileUpload<>(DiskFileItemFactory.builder().get());\n    }\n\n    @Override\n    protected JakartaMockHttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType,\n            final int readLimit) {\n        return new JakartaMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaSizesDiskTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 24
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport java.io.InputStream;\n\nimport org.apache.commons.fileupload2.core.AbstractSizesTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n/**\n * Unit test for items with varying sizes.\n */\npublic class JakartaSizesDiskTest extends AbstractSizesTest<JakartaServletDiskFileUpload, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected JakartaServletDiskFileUpload newFileUpload() {\n        return new JakartaServletDiskFileUpload();\n    }\n\n    @Override\n    protected JakartaMockHttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType,\n            final int readLimit) {\n        return new JakartaMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaStreamingTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 25
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport java.io.InputStream;\n\nimport org.apache.commons.fileupload2.core.AbstractStreamingTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n/**\n * Unit test for items with varying sizes.\n */\npublic class JakartaStreamingTest extends\n        AbstractStreamingTest<JakartaServletFileUpload<DiskFileItem, DiskFileItemFactory>, HttpServletRequest, JakartaServletRequestContext, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected DiskFileItemFactory newDiskFileItemFactory() {\n        return DiskFileItemFactory.builder().get();\n    }\n\n    @Override\n    protected JakartaServletFileUpload<DiskFileItem, DiskFileItemFactory> newFileUpload() {\n        return new JakartaServletFileUpload<>();\n    }\n\n    @Override\n    protected HttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType, final int readLimit) {\n        return new JakartaMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n    @Override\n    protected JakartaServletRequestContext newServletRequestContext(final HttpServletRequest request) {\n        return new JakartaServletRequestContext(request);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaMockHttpServletRequest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 26
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.security.Principal;\nimport java.util.Collection;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUpload;\n\nimport jakarta.servlet.AsyncContext;\nimport jakarta.servlet.DispatcherType;\nimport jakarta.servlet.ReadListener;\nimport jakarta.servlet.RequestDispatcher;\nimport jakarta.servlet.ServletContext;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.ServletInputStream;\nimport jakarta.servlet.ServletRequest;\nimport jakarta.servlet.ServletResponse;\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\nimport jakarta.servlet.http.HttpUpgradeHandler;\nimport jakarta.servlet.http.Part;\n\n/**\n * Test fixture for {@link HttpServletRequest}.\n */\npublic class JakartaMockHttpServletRequest implements HttpServletRequest {\n\n    private static class MyServletInputStream extends ServletInputStream {\n\n        private final InputStream inputStream;\n        private final int readLimit;\n\n        /**\n         * Creates a new instance, which returns the given streams data.\n         */\n        MyServletInputStream(final InputStream inputStream, final int readLimit) {\n            this.inputStream = inputStream;\n            this.readLimit = readLimit;\n        }\n\n        @Override\n        public boolean isFinished() {\n            return false;\n        }\n\n        @Override\n        public boolean isReady() {\n            return false;\n        }\n\n        @Override\n        public int read() throws IOException {\n            return inputStream.read();\n        }\n\n        @Override\n        public int read(final byte[] b, final int off, final int len) throws IOException {\n            if (readLimit > 0) {\n                return inputStream.read(b, off, Math.min(readLimit, len));\n            }\n            return inputStream.read(b, off, len);\n        }\n\n        @Override\n        public void setReadListener(final ReadListener readListener) {\n\n        }\n\n    }\n\n    private final InputStream requestInputStream;\n\n    private final long requestLength;\n\n    private final String contentType;\n\n    private final int readLimit;\n\n    private final Map<String, String> headers = new HashMap<>();\n\n    /**\n     * Creates a new instance with the given request data and content type.\n     */\n    public JakartaMockHttpServletRequest(final byte[] requestData, final String contentType) {\n        this(new ByteArrayInputStream(requestData), requestData.length, contentType, -1);\n    }\n\n    /**\n     * Creates a new instance with the given request data and content type.\n     */\n    public JakartaMockHttpServletRequest(final InputStream requestInputStream, final long requestLength, final String contentType, final int readLimit) {\n        this.requestInputStream = requestInputStream;\n        this.requestLength = requestLength;\n        this.contentType = contentType;\n        this.headers.put(AbstractFileUpload.CONTENT_TYPE, contentType);\n        this.readLimit = readLimit;\n    }\n\n    @Override\n    public boolean authenticate(final HttpServletResponse response) throws IOException, ServletException {\n        return false;\n    }\n\n    @Override\n    public String changeSessionId() {\n        return null;\n    }\n\n    @Override\n    public AsyncContext getAsyncContext() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getAttribute(String)\n     */\n    @Override\n    public Object getAttribute(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getAttributeNames()\n     */\n    @Override\n    public Enumeration<String> getAttributeNames() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getAuthType()\n     */\n    @Override\n    public String getAuthType() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getCharacterEncoding()\n     */\n    @Override\n    public String getCharacterEncoding() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getContentLength()\n     */\n    @Override\n    public int getContentLength() {\n        return requestInputStream != null ? Math.toIntExact(requestLength) : -1;\n    }\n\n    @Override\n    public long getContentLengthLong() {\n        return 0;\n    }\n\n    /**\n     * @see ServletRequest#getContentType()\n     */\n    @Override\n    public String getContentType() {\n        return contentType;\n    }\n\n    /**\n     * @see HttpServletRequest#getContextPath()\n     */\n    @Override\n    public String getContextPath() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getCookies()\n     */\n    @Override\n    public Cookie[] getCookies() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getDateHeader(String)\n     */\n    @Override\n    public long getDateHeader(final String arg0) {\n        return 0;\n    }\n\n    @Override\n    public DispatcherType getDispatcherType() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getHeader(String)\n     */\n    @Override\n    public String getHeader(final String headerName) {\n        return headers.get(headerName);\n    }\n\n    /**\n     * @see HttpServletRequest#getHeaderNames()\n     */\n    @Override\n    public Enumeration<String> getHeaderNames() {\n        // todo - implement\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getHeaders(String)\n     */\n    @Override\n    public Enumeration<String> getHeaders(final String arg0) {\n        // todo - implement\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getInputStream()\n     */\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n        return new MyServletInputStream(requestInputStream, readLimit);\n    }\n\n    /**\n     * @see HttpServletRequest#getIntHeader(String)\n     */\n    @Override\n    public int getIntHeader(final String arg0) {\n        return 0;\n    }\n\n    /**\n     * @see ServletRequest#getLocalAddr()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public String getLocalAddr() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocale()\n     */\n    @Override\n    public Locale getLocale() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocales()\n     */\n    @Override\n    public Enumeration<Locale> getLocales() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocalName()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public String getLocalName() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocalPort()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public int getLocalPort() {\n        return 0;\n    }\n\n    /**\n     * @see HttpServletRequest#getMethod()\n     */\n    @Override\n    public String getMethod() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameter(String)\n     */\n    @Override\n    public String getParameter(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameterMap()\n     */\n    @Override\n    public Map<String, String[]> getParameterMap() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameterNames()\n     */\n    @Override\n    public Enumeration<String> getParameterNames() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameterValues(String)\n     */\n    @Override\n    public String[] getParameterValues(final String arg0) {\n        return null;\n    }\n\n    @Override\n    public Part getPart(final String name) throws IOException, ServletException {\n        return null;\n    }\n\n    @Override\n    public Collection<Part> getParts() throws IOException, ServletException {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getPathInfo()\n     */\n    @Override\n    public String getPathInfo() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getPathTranslated()\n     */\n    @Override\n    public String getPathTranslated() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getProtocol()\n     */\n    @Override\n    public String getProtocol() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getQueryString()\n     */\n    @Override\n    public String getQueryString() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getReader()\n     */\n    @Override\n    public BufferedReader getReader() throws IOException {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRealPath(String)\n     * @deprecated\n     */\n    @Override\n    @Deprecated\n    public String getRealPath(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRemoteAddr()\n     */\n    @Override\n    public String getRemoteAddr() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRemoteHost()\n     */\n    @Override\n    public String getRemoteHost() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRemotePort()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public int getRemotePort() {\n        return 0;\n    }\n\n    /**\n     * @see HttpServletRequest#getRemoteUser()\n     */\n    @Override\n    public String getRemoteUser() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRequestDispatcher(String)\n     */\n    @Override\n    public RequestDispatcher getRequestDispatcher(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getRequestedSessionId()\n     */\n    @Override\n    public String getRequestedSessionId() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getRequestURI()\n     */\n    @Override\n    public String getRequestURI() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getRequestURL()\n     */\n    @Override\n    public StringBuffer getRequestURL() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getScheme()\n     */\n    @Override\n    public String getScheme() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getServerName()\n     */\n    @Override\n    public String getServerName() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getServerPort()\n     */\n    @Override\n    public int getServerPort() {\n        return 0;\n    }\n\n    @Override\n    public ServletContext getServletContext() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getServletPath()\n     */\n    @Override\n    public String getServletPath() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getSession()\n     */\n    @Override\n    public HttpSession getSession() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getSession(boolean)\n     */\n    @Override\n    public HttpSession getSession(final boolean arg0) {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getUserPrincipal()\n     */\n    @Override\n    public Principal getUserPrincipal() {\n        return null;\n    }\n\n    @Override\n    public boolean isAsyncStarted() {\n        return false;\n    }\n\n    @Override\n    public boolean isAsyncSupported() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdFromCookie()\n     */\n    @Override\n    public boolean isRequestedSessionIdFromCookie() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdFromUrl()\n     * @deprecated\n     */\n    @Override\n    @Deprecated\n    public boolean isRequestedSessionIdFromUrl() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdFromURL()\n     */\n    @Override\n    public boolean isRequestedSessionIdFromURL() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdValid()\n     */\n    @Override\n    public boolean isRequestedSessionIdValid() {\n        return false;\n    }\n\n    /**\n     * @see ServletRequest#isSecure()\n     */\n    @Override\n    public boolean isSecure() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isUserInRole(String)\n     */\n    @Override\n    public boolean isUserInRole(final String arg0) {\n        return false;\n    }\n\n    @Override\n    public void login(final String username, final String password) throws ServletException {\n\n    }\n\n    @Override\n    public void logout() throws ServletException {\n\n    }\n\n    /**\n     * @see ServletRequest#removeAttribute(String)\n     */\n    @Override\n    public void removeAttribute(final String arg0) {\n    }\n\n    /**\n     * @see ServletRequest#setAttribute(String, Object)\n     */\n    @Override\n    public void setAttribute(final String arg0, final Object arg1) {\n    }\n\n    /**\n     * @see ServletRequest#setCharacterEncoding(String)\n     */\n    @Override\n    public void setCharacterEncoding(final String arg0) throws UnsupportedEncodingException {\n    }\n\n    @Override\n    public AsyncContext startAsync() throws IllegalStateException {\n        return null;\n    }\n\n    @Override\n    public AsyncContext startAsync(final ServletRequest servletRequest, final ServletResponse servletResponse) throws IllegalStateException {\n        return null;\n    }\n\n    @Override\n    public <T extends HttpUpgradeHandler> T upgrade(final Class<T> handlerClass) throws IOException, ServletException {\n        return null;\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaStreamingDiskTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 27
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport java.io.InputStream;\n\nimport org.apache.commons.fileupload2.core.AbstractStreamingTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n/**\n * Unit test for items with varying sizes.\n */\npublic class JakartaStreamingDiskTest\n        extends AbstractStreamingTest<JakartaServletDiskFileUpload, HttpServletRequest, JakartaServletRequestContext, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected DiskFileItemFactory newDiskFileItemFactory() {\n        return DiskFileItemFactory.builder().get();\n    }\n\n    @Override\n    protected JakartaServletDiskFileUpload newFileUpload() {\n        return new JakartaServletDiskFileUpload();\n    }\n\n    @Override\n    protected HttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType, final int readLimit) {\n        return new JakartaMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n    @Override\n    protected JakartaServletRequestContext newServletRequestContext(final HttpServletRequest request) {\n        return new JakartaServletRequestContext(request);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaServletFileUploadDiskTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 28
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUploadTest;\nimport org.apache.commons.fileupload2.core.Constants;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\nimport org.apache.commons.fileupload2.core.FileUploadException;\nimport org.junit.jupiter.api.Test;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n/**\n * Tests {@link JakartaServletFileUpload} and\n *\n * @see AbstractFileUploadTest\n */\npublic class JakartaServletFileUploadDiskTest extends AbstractFileUploadTest<JakartaServletDiskFileUpload, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    public JakartaServletFileUploadDiskTest() {\n        super(new JakartaServletDiskFileUpload());\n    }\n\n    @Test\n    public void parseImpliedUtf8() throws Exception {\n        // utf8 encoded form-data without explicit content-type encoding\n        // @formatter:off\n        final var text = \"-----1234\\r\\n\" +\n                \"Content-Disposition: form-data; name=\\\"utf8Html\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"ThÃ­s Ã­s the coÃ±teÃ±t of the fÃ­le\\n\" +\n                \"\\r\\n\" +\n                \"-----1234--\\r\\n\";\n        // @formatter:on\n\n        final var bytes = text.getBytes(StandardCharsets.UTF_8);\n        final HttpServletRequest request = new JakartaMockServletHttpRequest(bytes, Constants.CONTENT_TYPE);\n        // @formatter:off\n        final var fileItemFactory = DiskFileItemFactory.builder()\n                .setCharset(StandardCharsets.UTF_8)\n                .get();\n        // @formatter:on\n        final var upload = new JakartaServletDiskFileUpload(fileItemFactory);\n        final var fileItems = upload.parseRequest(request);\n        final var fileItem = fileItems.get(0);\n        assertTrue(fileItem.getString().contains(\"coÃ±teÃ±t\"), fileItem.getString());\n    }\n\n    /*\n     * Test case for <a href=\"https://issues.apache.org/jira/browse/FILEUPLOAD-210\">\n     */\n    @Test\n    public void parseParameterMap() throws Exception {\n        // @formatter:off\n        final var text = \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"foo.tab\\\"\\r\\n\" +\n                      \"Content-Type: text/whatever\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"This is the content of the file\\n\" +\n                      \"\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"field\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"fieldValue\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"value1\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"value2\\r\\n\" +\n                      \"-----1234--\\r\\n\";\n        // @formatter:on\n        final var bytes = text.getBytes(StandardCharsets.US_ASCII);\n        final HttpServletRequest request = new JakartaMockServletHttpRequest(bytes, Constants.CONTENT_TYPE);\n\n        final var upload = new JakartaServletDiskFileUpload();\n        final var mappedParameters = upload.parseParameterMap(request);\n        assertTrue(mappedParameters.containsKey(\"file\"));\n        assertEquals(1, mappedParameters.get(\"file\").size());\n\n        assertTrue(mappedParameters.containsKey(\"field\"));\n        assertEquals(1, mappedParameters.get(\"field\").size());\n\n        assertTrue(mappedParameters.containsKey(\"multi\"));\n        assertEquals(2, mappedParameters.get(\"multi\").size());\n    }\n\n    @Override\n    public List<DiskFileItem> parseUpload(final JakartaServletDiskFileUpload upload, final byte[] bytes, final String contentType) throws FileUploadException {\n        final HttpServletRequest request = new JakartaMockHttpServletRequest(bytes, contentType);\n        return upload.parseRequest(new JakartaServletRequestContext(request));\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaServletFileUploadTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 29
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUploadTest;\nimport org.apache.commons.fileupload2.core.Constants;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\nimport org.apache.commons.fileupload2.core.FileUploadException;\nimport org.junit.jupiter.api.Test;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n/**\n * Tests {@link JakartaServletFileUpload}.\n *\n * @see AbstractFileUploadTest\n */\npublic class JakartaServletFileUploadTest\n        extends AbstractFileUploadTest<JakartaServletFileUpload<DiskFileItem, DiskFileItemFactory>, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    public JakartaServletFileUploadTest() {\n        super(new JakartaServletFileUpload<>(DiskFileItemFactory.builder().get()));\n    }\n\n    @Test\n    public void parseImpliedUtf8() throws Exception {\n        // utf8 encoded form-data without explicit content-type encoding\n        // @formatter:off\n        final var text = \"-----1234\\r\\n\" +\n                \"Content-Disposition: form-data; name=\\\"utf8Html\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"ThÃ­s Ã­s the coÃ±teÃ±t of the fÃ­le\\n\" +\n                \"\\r\\n\" +\n                \"-----1234--\\r\\n\";\n        // @formatter:on\n\n        final var bytes = text.getBytes(StandardCharsets.UTF_8);\n        final HttpServletRequest request = new JakartaMockServletHttpRequest(bytes, Constants.CONTENT_TYPE);\n        // @formatter:off\n        final var fileItemFactory = DiskFileItemFactory.builder()\n                .setCharset(StandardCharsets.UTF_8)\n                .get();\n        // @formatter:on\n        final var upload = new JakartaServletFileUpload<>(fileItemFactory);\n        final var fileItems = upload.parseRequest(request);\n        final var fileItem = fileItems.get(0);\n        assertTrue(fileItem.getString().contains(\"coÃ±teÃ±t\"), fileItem.getString());\n    }\n\n    /*\n     * Test case for <a href=\"https://issues.apache.org/jira/browse/FILEUPLOAD-210\">\n     */\n    @Test\n    public void parseParameterMap() throws Exception {\n        // @formatter:off\n        final var text = \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"foo.tab\\\"\\r\\n\" +\n                      \"Content-Type: text/whatever\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"This is the content of the file\\n\" +\n                      \"\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"field\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"fieldValue\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"value1\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"value2\\r\\n\" +\n                      \"-----1234--\\r\\n\";\n        // @formatter:on\n        final var bytes = text.getBytes(StandardCharsets.US_ASCII);\n        final HttpServletRequest request = new JakartaMockServletHttpRequest(bytes, Constants.CONTENT_TYPE);\n\n        final var upload = new JakartaServletFileUpload<>(DiskFileItemFactory.builder().get());\n        final var mappedParameters = upload.parseParameterMap(request);\n        assertTrue(mappedParameters.containsKey(\"file\"));\n        assertEquals(1, mappedParameters.get(\"file\").size());\n\n        assertTrue(mappedParameters.containsKey(\"field\"));\n        assertEquals(1, mappedParameters.get(\"field\").size());\n\n        assertTrue(mappedParameters.containsKey(\"multi\"));\n        assertEquals(2, mappedParameters.get(\"multi\").size());\n    }\n\n    @Override\n    public List<DiskFileItem> parseUpload(final JakartaServletFileUpload<DiskFileItem, DiskFileItemFactory> upload, final byte[] bytes,\n            final String contentType) throws FileUploadException {\n        final HttpServletRequest request = new JakartaMockHttpServletRequest(bytes, contentType);\n        return upload.parseRequest(new JakartaServletRequestContext(request));\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaProgressListenerTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 30
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport java.io.InputStream;\n\nimport org.apache.commons.fileupload2.core.AbstractProgressListenerTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\nimport org.apache.commons.fileupload2.core.ProgressListener;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n/**\n * Tests the {@link ProgressListener}.\n */\npublic class JakartaProgressListenerTest extends\n        AbstractProgressListenerTest<JakartaServletFileUpload<DiskFileItem, DiskFileItemFactory>, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected JakartaServletFileUpload<DiskFileItem, DiskFileItemFactory> newFileUpload() {\n        return new JakartaServletFileUpload<>();\n    }\n\n    @Override\n    protected HttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType, final int readLimit) {\n        return new JakartaMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-jakarta/src/test/java/org/apache/commons/fileupload2/jakarta/JakartaMockServletHttpRequest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 31
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.jakarta;\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.security.Principal;\nimport java.util.Collection;\nimport java.util.Enumeration;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUpload;\n\nimport jakarta.servlet.AsyncContext;\nimport jakarta.servlet.DispatcherType;\nimport jakarta.servlet.ReadListener;\nimport jakarta.servlet.RequestDispatcher;\nimport jakarta.servlet.ServletContext;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.ServletInputStream;\nimport jakarta.servlet.ServletRequest;\nimport jakarta.servlet.ServletResponse;\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\nimport jakarta.servlet.http.HttpUpgradeHandler;\nimport jakarta.servlet.http.Part;\n\npublic class JakartaMockServletHttpRequest implements HttpServletRequest {\n\n    private static class MyServletInputStream extends jakarta.servlet.ServletInputStream {\n\n        private final InputStream inputStream;\n        private final int readLimit;\n\n        /**\n         * Creates a new instance, which returns the given streams data.\n         */\n        public MyServletInputStream(final InputStream inputStream, final int readLimit) {\n            this.inputStream = inputStream;\n            this.readLimit = readLimit;\n        }\n\n        @Override\n        public boolean isFinished() {\n            return false;\n        }\n\n        @Override\n        public boolean isReady() {\n            return false;\n        }\n\n        @Override\n        public int read() throws IOException {\n            return inputStream.read();\n        }\n\n        @Override\n        public int read(final byte[] b, final int off, final int len) throws IOException {\n            if (readLimit > 0) {\n                return inputStream.read(b, off, Math.min(readLimit, len));\n            }\n            return inputStream.read(b, off, len);\n        }\n\n        @Override\n        public void setReadListener(final ReadListener readListener) {\n            throw new IllegalStateException(\"Not implemented\");\n        }\n\n    }\n\n    private final InputStream requestInputStream;\n\n    private long requestLength;\n\n    private final String contentType;\n\n    private int readLimit = -1;\n\n    private final Map<String, String> headers = new java.util.HashMap<>();\n\n    /**\n     * Creates a new instance with the given request data and content type.\n     */\n    public JakartaMockServletHttpRequest(final byte[] requestData, final String strContentType) {\n        this(new ByteArrayInputStream(requestData), requestData.length, strContentType);\n    }\n\n    /**\n     * Creates a new instance with the given request data and content type.\n     */\n    public JakartaMockServletHttpRequest(final InputStream requestData, final long requestLength, final String strContentType) {\n        this.requestInputStream = requestData;\n        this.requestLength = requestLength;\n        this.contentType = strContentType;\n        this.headers.put(AbstractFileUpload.CONTENT_TYPE, strContentType);\n    }\n\n    @Override\n    public boolean authenticate(final HttpServletResponse response) throws IOException, ServletException {\n        return false;\n    }\n\n    @Override\n    public String changeSessionId() {\n        return null;\n    }\n\n    @Override\n    public AsyncContext getAsyncContext() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getAttribute(String)\n     */\n    @Override\n    public Object getAttribute(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getAttributeNames()\n     */\n    @Override\n    public Enumeration<String> getAttributeNames() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getAuthType()\n     */\n    @Override\n    public String getAuthType() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getCharacterEncoding()\n     */\n    @Override\n    public String getCharacterEncoding() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getContentLength()\n     */\n    @Override\n    public int getContentLength() {\n        return requestInputStream != null ? Math.toIntExact(requestLength) : -1;\n    }\n\n    @Override\n    public long getContentLengthLong() {\n        return getContentLength();\n    }\n\n    /**\n     * @see ServletRequest#getContentType()\n     */\n    @Override\n    public String getContentType() {\n        return contentType;\n    }\n\n    /**\n     * @see HttpServletRequest#getContextPath()\n     */\n    @Override\n    public String getContextPath() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getCookies()\n     */\n    @Override\n    public Cookie[] getCookies() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getDateHeader(String)\n     */\n    @Override\n    public long getDateHeader(final String arg0) {\n        return 0;\n    }\n\n    @Override\n    public DispatcherType getDispatcherType() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getHeader(String)\n     */\n    @Override\n    public String getHeader(final String headerName) {\n        return headers.get(headerName);\n    }\n\n    /**\n     * @see HttpServletRequest#getHeaderNames()\n     */\n    @Override\n    public Enumeration<String> getHeaderNames() {\n        // todo - implement\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getHeaders(String)\n     */\n    @Override\n    public Enumeration<String> getHeaders(final String arg0) {\n        // todo - implement\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getInputStream()\n     */\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n        return new MyServletInputStream(requestInputStream, readLimit);\n    }\n\n    /**\n     * @see HttpServletRequest#getIntHeader(String)\n     */\n    @Override\n    public int getIntHeader(final String arg0) {\n        return 0;\n    }\n\n    /**\n     * @see ServletRequest#getLocalAddr()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public String getLocalAddr() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocale()\n     */\n    @Override\n    public Locale getLocale() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocales()\n     */\n    @Override\n    public Enumeration<Locale> getLocales() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocalName()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public String getLocalName() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocalPort()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public int getLocalPort() {\n        return 0;\n    }\n\n    /**\n     * @see HttpServletRequest#getMethod()\n     */\n    @Override\n    public String getMethod() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameter(String)\n     */\n    @Override\n    public String getParameter(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameterMap()\n     */\n    @Override\n    public Map<String, String[]> getParameterMap() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameterNames()\n     */\n    @Override\n    public Enumeration<String> getParameterNames() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameterValues(String)\n     */\n    @Override\n    public String[] getParameterValues(final String arg0) {\n        return null;\n    }\n\n    @Override\n    public Part getPart(final String name) throws IOException, ServletException {\n        return null;\n    }\n\n    @Override\n    public Collection<Part> getParts() throws IOException, ServletException {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getPathInfo()\n     */\n    @Override\n    public String getPathInfo() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getPathTranslated()\n     */\n    @Override\n    public String getPathTranslated() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getProtocol()\n     */\n    @Override\n    public String getProtocol() {\n        return null;\n    }\n\n    public String getProtocolRequestId() {\n        throw new IllegalStateException(\"Not implemented 6.0.0\");\n    }\n\n    /**\n     * @see HttpServletRequest#getQueryString()\n     */\n    @Override\n    public String getQueryString() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getReader()\n     */\n    @Override\n    public BufferedReader getReader() throws IOException {\n        return null;\n    }\n\n    @Override\n    public String getRealPath(final String path) {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRemoteAddr()\n     */\n    @Override\n    public String getRemoteAddr() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRemoteHost()\n     */\n    @Override\n    public String getRemoteHost() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRemotePort()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public int getRemotePort() {\n        return 0;\n    }\n\n    /**\n     * @see HttpServletRequest#getRemoteUser()\n     */\n    @Override\n    public String getRemoteUser() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRequestDispatcher(String)\n     */\n    @Override\n    public RequestDispatcher getRequestDispatcher(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getRequestedSessionId()\n     */\n    @Override\n    public String getRequestedSessionId() {\n        return null;\n    }\n\n    public String getRequestId() {\n        throw new IllegalStateException(\"Not implemented 6.0.0\");\n    }\n\n    /**\n     * @see HttpServletRequest#getRequestURI()\n     */\n    @Override\n    public String getRequestURI() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getRequestURL()\n     */\n    @Override\n    public StringBuffer getRequestURL() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getScheme()\n     */\n    @Override\n    public String getScheme() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getServerName()\n     */\n    @Override\n    public String getServerName() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getServerPort()\n     */\n    @Override\n    public int getServerPort() {\n        return 0;\n    }\n\n    @Override\n    public ServletContext getServletContext() {\n        final var session = getSession();\n        if (session == null) {\n            return null;\n        }\n        return session.getServletContext();\n    }\n\n    /**\n     * @see HttpServletRequest#getServletPath()\n     */\n    @Override\n    public String getServletPath() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getSession()\n     */\n    @Override\n    public HttpSession getSession() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getSession(boolean)\n     */\n    @Override\n    public HttpSession getSession(final boolean arg0) {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getUserPrincipal()\n     */\n    @Override\n    public Principal getUserPrincipal() {\n        return null;\n    }\n\n    @Override\n    public boolean isAsyncStarted() {\n        return false;\n    }\n\n    @Override\n    public boolean isAsyncSupported() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdFromCookie()\n     */\n    @Override\n    public boolean isRequestedSessionIdFromCookie() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdFromUrl()\n     * @deprecated\n     */\n    @Override\n    @Deprecated\n    public boolean isRequestedSessionIdFromUrl() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdFromURL()\n     */\n    @Override\n    public boolean isRequestedSessionIdFromURL() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdValid()\n     */\n    @Override\n    public boolean isRequestedSessionIdValid() {\n        return false;\n    }\n\n    /**\n     * @see ServletRequest#isSecure()\n     */\n    @Override\n    public boolean isSecure() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isUserInRole(String)\n     */\n    @Override\n    public boolean isUserInRole(final String arg0) {\n        return false;\n    }\n\n    @Override\n    public void login(final String username, final String password) throws ServletException {\n        throw new IllegalStateException(\"Not implemented\");\n    }\n\n    @Override\n    public void logout() throws ServletException {\n        throw new IllegalStateException(\"Not implemented\");\n    }\n\n    /**\n     * @see ServletRequest#removeAttribute(String)\n     */\n    @Override\n    public void removeAttribute(final String arg0) {\n    }\n\n    /**\n     * @see ServletRequest#setAttribute(String, Object)\n     */\n    @Override\n    public void setAttribute(final String arg0, final Object arg1) {\n    }\n\n    /**\n     * @see ServletRequest#setCharacterEncoding(String)\n     */\n    @Override\n    public void setCharacterEncoding(final String arg0) throws UnsupportedEncodingException {\n    }\n\n    /**\n     * For testing attack scenarios in SizesTest.\n     */\n    public void setContentLength(final long length) {\n        this.requestLength = length;\n    }\n\n    /**\n     * Sets the read limit. This can be used to limit the number of bytes to read ahead.\n     *\n     * @param readLimit the read limit to use\n     */\n    public void setReadLimit(final int readLimit) {\n        this.readLimit = readLimit;\n    }\n\n    @Override\n    public AsyncContext startAsync() throws IllegalStateException {\n        throw new IllegalStateException(\"Not implemented\");\n    }\n\n    @Override\n    public AsyncContext startAsync(final ServletRequest servletRequest, final ServletResponse servletResponse) throws IllegalStateException {\n        throw new IllegalStateException(\"Not implemented\");\n    }\n\n    @Override\n    public <T extends HttpUpgradeHandler> T upgrade(final Class<T> handlerClass) throws IOException, ServletException {\n        throw new IllegalStateException(\"Not implemented\");\n    }\n\n//    @Override\n//    public ServletConnection getServletConnection() {\n//        throw new IllegalStateException(\"Not implemented 6.0.0\");\n//    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxServletFileUpload.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 32
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.javax;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUpload;\nimport org.apache.commons.fileupload2.core.FileItem;\nimport org.apache.commons.fileupload2.core.FileItemFactory;\nimport org.apache.commons.fileupload2.core.FileItemInputIterator;\nimport org.apache.commons.fileupload2.core.FileUploadException;\n\n/**\n * High level API for processing file uploads.\n * <p>\n * This class handles multiple files per single HTML widget, sent using {@code multipart/mixed} encoding type, as specified by\n * <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>. Use {@link #parseRequest(HttpServletRequest)} to acquire a list of {@link FileItem}s associated\n * with a given HTML widget.\n * </p>\n * <p>\n * How the data for individual parts is stored is determined by the factory used to create them; a given part may be in memory, on disk, or somewhere else.\n * </p>\n *\n * @param <I> The FileItem type.\n * @param <F> the FileItemFactory type.\n */\npublic class JavaxServletFileUpload<I extends FileItem<I>, F extends FileItemFactory<I>> extends AbstractFileUpload<HttpServletRequest, I, F> {\n\n    /**\n     * Constant for HTTP POST method.\n     */\n    private static final String POST_METHOD = \"POST\";\n\n    /**\n     * Tests whether the request contains multipart content.\n     *\n     * @param request The servlet request to be evaluated. Must be non-null.\n     *\n     * @return {@code true} if the request is multipart; {@code false} otherwise.\n     */\n    public static final boolean isMultipartContent(final HttpServletRequest request) {\n        return POST_METHOD.equalsIgnoreCase(request.getMethod()) && AbstractFileUpload.isMultipartContent(new JavaxServletRequestContext(request));\n    }\n\n    /**\n     * Constructs an uninitialized instance of this class. A factory must be configured, using {@code setFileItemFactory()}, before attempting to parse\n     * requests.\n     *\n     * @see AbstractFileUpload#AbstractFileUpload()\n     */\n    public JavaxServletFileUpload() {\n    }\n\n    /**\n     * Constructs an instance of this class which uses the supplied factory to create {@code FileItem} instances.\n     *\n     * @see AbstractFileUpload#AbstractFileUpload()\n     * @param fileItemFactory The factory to use for creating file items.\n     */\n    public JavaxServletFileUpload(final F fileItemFactory) {\n        setFileItemFactory(fileItemFactory);\n    }\n\n    /**\n     * Gets an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} file item iterator.\n     *\n     * @param request The servlet request to be parsed.\n     * @return An iterator to instances of {@code FileItemInput} parsed from the request, in the order that they were transmitted.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     * @throws IOException         An I/O error occurred. This may be a network error while communicating with the client or a problem while storing the\n     *                             uploaded content.\n     */\n    @Override\n    public FileItemInputIterator getItemIterator(final HttpServletRequest request) throws FileUploadException, IOException {\n        return super.getItemIterator(new JavaxServletRequestContext(request));\n    }\n\n    /**\n     * Parses an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} stream.\n     *\n     * @param request The servlet request to be parsed.\n     * @return A map of {@code FileItem} instances parsed from the request.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     */\n    @Override\n    public Map<String, List<I>> parseParameterMap(final HttpServletRequest request) throws FileUploadException {\n        return parseParameterMap(new JavaxServletRequestContext(request));\n    }\n\n    /**\n     * Parses an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} stream.\n     *\n     * @param request The servlet request to be parsed.\n     * @return A list of {@code FileItem} instances parsed from the request, in the order that they were transmitted.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     */\n    @Override\n    public List<I> parseRequest(final HttpServletRequest request) throws FileUploadException {\n        return parseRequest(new JavaxServletRequestContext(request));\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxServletDiskFileUpload.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 33
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.fileupload2.javax;\n\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\n\n/**\n * A JavaxServletFileUpload for {@link DiskFileItem} and {@link DiskFileItemFactory}.\n */\npublic class JavaxServletDiskFileUpload extends JavaxServletFileUpload<DiskFileItem, DiskFileItemFactory> {\n\n    public JavaxServletDiskFileUpload() {\n        super(DiskFileItemFactory.builder().get());\n    }\n\n    public JavaxServletDiskFileUpload(final DiskFileItemFactory fileItemFactory) {\n        super(fileItemFactory);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxServletRequestContext.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 34
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.javax;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractRequestContext;\n\n/**\n * Provides access to the request information needed for a request made to an HTTP servlet.\n */\npublic class JavaxServletRequestContext extends AbstractRequestContext<HttpServletRequest> {\n\n    /**\n     * Constructs a context for this request.\n     *\n     * @param request The request to which this context applies.\n     */\n    public JavaxServletRequestContext(final HttpServletRequest request) {\n        super(request::getHeader, request::getContentLength, request);\n    }\n\n    /**\n     * Gets the character encoding for the request.\n     *\n     * @return The character encoding for the request.\n     */\n    @Override\n    public String getCharacterEncoding() {\n        return getRequest().getCharacterEncoding();\n    }\n\n    /**\n     * Gets the content type of the request.\n     *\n     * @return The content type of the request.\n     */\n    @Override\n    public String getContentType() {\n        return getRequest().getContentType();\n    }\n\n    /**\n     * Gets the input stream for the request.\n     *\n     * @return The input stream for the request.\n     * @throws IOException if a problem occurs.\n     */\n    @Override\n    public InputStream getInputStream() throws IOException {\n        return getRequest().getInputStream();\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/JavaxFileCleaner.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 35
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.javax;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletContextEvent;\nimport javax.servlet.ServletContextListener;\n\nimport org.apache.commons.io.FileCleaningTracker;\n\n/**\n * A servlet context listener, which ensures that the {@link FileCleaningTracker}'s reaper thread is terminated, when the web application is destroyed.\n */\npublic class JavaxFileCleaner implements ServletContextListener {\n\n    /**\n     * Attribute name, which is used for storing an instance of {@link FileCleaningTracker} in the web application.\n     */\n    public static final String FILE_CLEANING_TRACKER_ATTRIBUTE = JavaxFileCleaner.class.getName() + \".FileCleaningTracker\";\n\n    /**\n     * Gets the instance of {@link FileCleaningTracker}, which is associated with the given {@link ServletContext}.\n     *\n     * @param servletContext The servlet context to query\n     * @return The contexts tracker\n     */\n    public static FileCleaningTracker getFileCleaningTracker(final ServletContext servletContext) {\n        return (FileCleaningTracker) servletContext.getAttribute(FILE_CLEANING_TRACKER_ATTRIBUTE);\n    }\n\n    /**\n     * Sets the instance of {@link FileCleaningTracker}, which is associated with the given {@link ServletContext}.\n     *\n     * @param servletContext The servlet context to modify\n     * @param tracker        The tracker to set\n     */\n    public static void setFileCleaningTracker(final ServletContext servletContext, final FileCleaningTracker tracker) {\n        servletContext.setAttribute(FILE_CLEANING_TRACKER_ATTRIBUTE, tracker);\n    }\n\n    /**\n     * Called when the web application is being destroyed. Calls {@link FileCleaningTracker#exitWhenFinished()}.\n     *\n     * @param sce The servlet context, used for calling {@link #getFileCleaningTracker(ServletContext)}.\n     */\n    @Override\n    public void contextDestroyed(final ServletContextEvent sce) {\n        getFileCleaningTracker(sce.getServletContext()).exitWhenFinished();\n    }\n\n    /**\n     * Called when the web application is initialized. Does nothing.\n     *\n     * @param sce The servlet context, used for calling {@link #setFileCleaningTracker(ServletContext, FileCleaningTracker)}.\n     */\n    @Override\n    public void contextInitialized(final ServletContextEvent sce) {\n        setFileCleaningTracker(sce.getServletContext(), new FileCleaningTracker());\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/main/java/org/apache/commons/fileupload2/javax/package-info.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 36
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * <p>\n * An implementation of {@link org.apache.commons.fileupload2.core.AbstractFileUpload} for use in servlets conforming to JSR 53. This implementation requires\n * only access to the servlet's current {@code HttpServletRequest} instance, and a suitable {@link org.apache.commons.fileupload2.core.FileItemFactory}\n * implementation, such as {@link org.apache.commons.fileupload2.core.DiskFileItemFactory}.\n * </p>\n * <p>\n * The following code fragment demonstrates typical usage.\n * </p>\n *\n * <pre>{@code\n * DiskFileItemFactory factory = DiskFileItemFactory().builder().get();\n * // Configure the factory here, if desired.\n * ServletFileUpload upload = new ServletFileUpload(factory);\n * // Configure the uploader here, if desired.\n * List fileItems = upload.parseRequest(request);\n * }</pre>\n * <p>\n * Please see the FileUpload <a href=\"https://commons.apache.org/fileupload/using.html\" target=\"_top\">User Guide</a> for further details and examples of how to\n * use this package.\n * </p>\n */\npackage org.apache.commons.fileupload2.javax;\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxMockHttpServletRequest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 37
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.javax;\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.security.Principal;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletInputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUpload;\n\n/**\n * Test fixture for {@link HttpServletRequest}.\n */\npublic class JavaxMockHttpServletRequest implements HttpServletRequest {\n\n    private static class MyServletInputStream extends ServletInputStream {\n\n        private final InputStream inputStream;\n        private final int readLimit;\n\n        /**\n         * Creates a new instance, which returns the given streams data.\n         */\n        public MyServletInputStream(final InputStream inputStream, final int readLimit) {\n            this.inputStream = inputStream;\n            this.readLimit = readLimit;\n        }\n\n        @Override\n        public int read() throws IOException {\n            return inputStream.read();\n        }\n\n        @Override\n        public int read(final byte[] b, final int off, final int len) throws IOException {\n            if (readLimit > 0) {\n                return inputStream.read(b, off, Math.min(readLimit, len));\n            }\n            return inputStream.read(b, off, len);\n        }\n\n    }\n\n    private final InputStream requestInputStream;\n\n    private final long requestLength;\n\n    private final String contentType;\n\n    private final int readLimit;\n\n    private final Map<String, String> headers = new HashMap<>();\n\n    /**\n     * Creates a new instance with the given request data and content type.\n     */\n    public JavaxMockHttpServletRequest(final byte[] requestData, final String contentType) {\n        this(new ByteArrayInputStream(requestData), requestData.length, contentType, -1);\n    }\n\n    /**\n     * Creates a new instance with the given request data and content type.\n     */\n    public JavaxMockHttpServletRequest(final InputStream requestInputStream, final long requestLength, final String contentType, final int readLimit) {\n        this.requestInputStream = requestInputStream;\n        this.requestLength = requestLength;\n        this.contentType = contentType;\n        this.headers.put(AbstractFileUpload.CONTENT_TYPE, contentType);\n        this.readLimit = readLimit;\n    }\n\n    /**\n     * @see ServletRequest#getAttribute(String)\n     */\n    @Override\n    public Object getAttribute(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getAttributeNames()\n     */\n    @Override\n    public Enumeration<String> getAttributeNames() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getAuthType()\n     */\n    @Override\n    public String getAuthType() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getCharacterEncoding()\n     */\n    @Override\n    public String getCharacterEncoding() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getContentLength()\n     */\n    @Override\n    public int getContentLength() {\n        return requestInputStream != null ? Math.toIntExact(requestLength) : -1;\n    }\n\n    /**\n     * @see ServletRequest#getContentType()\n     */\n    @Override\n    public String getContentType() {\n        return contentType;\n    }\n\n    /**\n     * @see HttpServletRequest#getContextPath()\n     */\n    @Override\n    public String getContextPath() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getCookies()\n     */\n    @Override\n    public Cookie[] getCookies() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getDateHeader(String)\n     */\n    @Override\n    public long getDateHeader(final String arg0) {\n        return 0;\n    }\n\n    /**\n     * @see HttpServletRequest#getHeader(String)\n     */\n    @Override\n    public String getHeader(final String headerName) {\n        return headers.get(headerName);\n    }\n\n    /**\n     * @see HttpServletRequest#getHeaderNames()\n     */\n    @Override\n    public Enumeration<String> getHeaderNames() {\n        // todo - implement\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getHeaders(String)\n     */\n    @Override\n    public Enumeration<String> getHeaders(final String arg0) {\n        // todo - implement\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getInputStream()\n     */\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n        return new MyServletInputStream(requestInputStream, readLimit);\n    }\n\n    /**\n     * @see HttpServletRequest#getIntHeader(String)\n     */\n    @Override\n    public int getIntHeader(final String arg0) {\n        return 0;\n    }\n\n    /**\n     * @see ServletRequest#getLocalAddr()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public String getLocalAddr() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocale()\n     */\n    @Override\n    public Locale getLocale() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocales()\n     */\n    @Override\n    public Enumeration<Locale> getLocales() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocalName()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public String getLocalName() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getLocalPort()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public int getLocalPort() {\n        return 0;\n    }\n\n    /**\n     * @see HttpServletRequest#getMethod()\n     */\n    @Override\n    public String getMethod() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameter(String)\n     */\n    @Override\n    public String getParameter(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameterMap()\n     */\n    @Override\n    public Map<String, String[]> getParameterMap() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameterNames()\n     */\n    @Override\n    public Enumeration<String> getParameterNames() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getParameterValues(String)\n     */\n    @Override\n    public String[] getParameterValues(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getPathInfo()\n     */\n    @Override\n    public String getPathInfo() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getPathTranslated()\n     */\n    @Override\n    public String getPathTranslated() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getProtocol()\n     */\n    @Override\n    public String getProtocol() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getQueryString()\n     */\n    @Override\n    public String getQueryString() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getReader()\n     */\n    @Override\n    public BufferedReader getReader() throws IOException {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRealPath(String)\n     * @deprecated\n     */\n    @Override\n    @Deprecated\n    public String getRealPath(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRemoteAddr()\n     */\n    @Override\n    public String getRemoteAddr() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRemoteHost()\n     */\n    @Override\n    public String getRemoteHost() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRemotePort()\n     */\n    @Override\n    @SuppressWarnings(\"javadoc\") // This is a Servlet 2.4 method\n    public int getRemotePort() {\n        return 0;\n    }\n\n    /**\n     * @see HttpServletRequest#getRemoteUser()\n     */\n    @Override\n    public String getRemoteUser() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getRequestDispatcher(String)\n     */\n    @Override\n    public RequestDispatcher getRequestDispatcher(final String arg0) {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getRequestedSessionId()\n     */\n    @Override\n    public String getRequestedSessionId() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getRequestURI()\n     */\n    @Override\n    public String getRequestURI() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getRequestURL()\n     */\n    @Override\n    public StringBuffer getRequestURL() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getScheme()\n     */\n    @Override\n    public String getScheme() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getServerName()\n     */\n    @Override\n    public String getServerName() {\n        return null;\n    }\n\n    /**\n     * @see ServletRequest#getServerPort()\n     */\n    @Override\n    public int getServerPort() {\n        return 0;\n    }\n\n    /**\n     * @see HttpServletRequest#getServletPath()\n     */\n    @Override\n    public String getServletPath() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getSession()\n     */\n    @Override\n    public HttpSession getSession() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getSession(boolean)\n     */\n    @Override\n    public HttpSession getSession(final boolean arg0) {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#getUserPrincipal()\n     */\n    @Override\n    public Principal getUserPrincipal() {\n        return null;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdFromCookie()\n     */\n    @Override\n    public boolean isRequestedSessionIdFromCookie() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdFromUrl()\n     * @deprecated\n     */\n    @Override\n    @Deprecated\n    public boolean isRequestedSessionIdFromUrl() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdFromURL()\n     */\n    @Override\n    public boolean isRequestedSessionIdFromURL() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isRequestedSessionIdValid()\n     */\n    @Override\n    public boolean isRequestedSessionIdValid() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isSecure()\n     */\n    @Override\n    public boolean isSecure() {\n        return false;\n    }\n\n    /**\n     * @see HttpServletRequest#isUserInRole(String)\n     */\n    @Override\n    public boolean isUserInRole(final String arg0) {\n        return false;\n    }\n\n    /**\n     * @see ServletRequest#removeAttribute(String)\n     */\n    @Override\n    public void removeAttribute(final String arg0) {\n    }\n\n    /**\n     * @see ServletRequest#setAttribute(String, Object)\n     */\n    @Override\n    public void setAttribute(final String arg0, final Object arg1) {\n    }\n\n    /**\n     * @see ServletRequest#setCharacterEncoding(String)\n     */\n    @Override\n    public void setCharacterEncoding(final String arg0) throws UnsupportedEncodingException {\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxSizesDiskTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 38
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.javax;\n\nimport java.io.InputStream;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractSizesTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\n\n/**\n * Unit test for items with varying sizes.\n */\npublic class JavaxSizesDiskTest extends AbstractSizesTest<JavaxServletDiskFileUpload, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected JavaxServletDiskFileUpload newFileUpload() {\n        return new JavaxServletDiskFileUpload();\n    }\n\n    @Override\n    protected JavaxMockHttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType,\n            final int readLimit) {\n        return new JavaxMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxProgressListenerDiskTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 39
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.javax;\n\nimport java.io.InputStream;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractProgressListenerTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\nimport org.apache.commons.fileupload2.core.ProgressListener;\n\n/**\n * Tests the {@link ProgressListener}.\n */\npublic class JavaxProgressListenerDiskTest\n        extends AbstractProgressListenerTest<JavaxServletDiskFileUpload, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected JavaxServletDiskFileUpload newFileUpload() {\n        return new JavaxServletDiskFileUpload();\n    }\n\n    @Override\n    protected HttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType, final int readLimit) {\n        return new JavaxMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxHttpServletRequestFactory.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 40
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.javax;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUpload;\n\nfinal class JavaxHttpServletRequestFactory {\n\n    public static HttpServletRequest createHttpServletRequestWithNullContentType() {\n        final var requestData = \"foobar\".getBytes();\n        return new JavaxMockHttpServletRequest(requestData, null);\n    }\n\n    static public HttpServletRequest createInvalidHttpServletRequest() {\n        final var requestData = \"foobar\".getBytes();\n        return new JavaxMockHttpServletRequest(requestData, AbstractFileUpload.MULTIPART_FORM_DATA);\n    }\n\n    public static HttpServletRequest createValidHttpServletRequest(final String[] strFileNames) {\n        // TODO Provide a real implementation.\n\n        final var sbRequestData = new StringBuilder();\n\n        for (final String strFileName : strFileNames) {\n            sbRequestData.append(strFileName);\n        }\n\n        final var requestData = sbRequestData.toString().getBytes();\n\n        return new JavaxMockHttpServletRequest(requestData, AbstractFileUpload.MULTIPART_FORM_DATA);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxServletFileUploadTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 41
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.fileupload2.javax;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUploadTest;\nimport org.apache.commons.fileupload2.core.Constants;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\nimport org.apache.commons.fileupload2.core.FileUploadException;\nimport org.junit.jupiter.api.Test;\n\n/**\n * Tests {@link JavaxServletFileUpload}.\n *\n * @see AbstractFileUploadTest\n */\npublic class JavaxServletFileUploadTest\n        extends AbstractFileUploadTest<JavaxServletFileUpload<DiskFileItem, DiskFileItemFactory>, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    public JavaxServletFileUploadTest() {\n        super(new JavaxServletFileUpload<>(DiskFileItemFactory.builder().get()));\n    }\n\n    @Test\n    public void parseImpliedUtf8() throws Exception {\n        // utf8 encoded form-data without explicit content-type encoding\n        // @formatter:off\n        final var text = \"-----1234\\r\\n\" +\n                \"Content-Disposition: form-data; name=\\\"utf8Html\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"ThÃ­s Ã­s the coÃ±teÃ±t of the fÃ­le\\n\" +\n                \"\\r\\n\" +\n                \"-----1234--\\r\\n\";\n        // @formatter:on\n\n        final var bytes = text.getBytes(StandardCharsets.UTF_8);\n        final HttpServletRequest request = new JavaxMockHttpServletRequest(bytes, Constants.CONTENT_TYPE);\n        // @formatter:off\n        final var fileItemFactory = DiskFileItemFactory.builder()\n                .setCharset(StandardCharsets.UTF_8)\n                .get();\n        // @formatter:on\n        final var upload = new JavaxServletFileUpload<>(fileItemFactory);\n        final var fileItems = upload.parseRequest(request);\n        final var fileItem = fileItems.get(0);\n        assertTrue(fileItem.getString().contains(\"coÃ±teÃ±t\"), fileItem.getString());\n    }\n\n    /*\n     * Test case for <a href=\"https://issues.apache.org/jira/browse/FILEUPLOAD-210\">\n     */\n    @Test\n    public void parseParameterMap() throws Exception {\n        // @formatter:off\n        final var text = \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"foo.tab\\\"\\r\\n\" +\n                      \"Content-Type: text/whatever\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"This is the content of the file\\n\" +\n                      \"\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"field\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"fieldValue\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"value1\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"value2\\r\\n\" +\n                      \"-----1234--\\r\\n\";\n        // @formatter:on\n        final var bytes = text.getBytes(StandardCharsets.US_ASCII);\n        final HttpServletRequest request = new JavaxMockHttpServletRequest(bytes, Constants.CONTENT_TYPE);\n\n        final var upload = new JavaxServletFileUpload<>(DiskFileItemFactory.builder().get());\n        final var mappedParameters = upload.parseParameterMap(request);\n        assertTrue(mappedParameters.containsKey(\"file\"));\n        assertEquals(1, mappedParameters.get(\"file\").size());\n\n        assertTrue(mappedParameters.containsKey(\"field\"));\n        assertEquals(1, mappedParameters.get(\"field\").size());\n\n        assertTrue(mappedParameters.containsKey(\"multi\"));\n        assertEquals(2, mappedParameters.get(\"multi\").size());\n    }\n\n    @Override\n    public List<DiskFileItem> parseUpload(final JavaxServletFileUpload<DiskFileItem, DiskFileItemFactory> upload, final byte[] bytes, final String contentType)\n            throws FileUploadException {\n        final HttpServletRequest request = new JavaxMockHttpServletRequest(bytes, contentType);\n        return upload.parseRequest(new JavaxServletRequestContext(request));\n    }\n\n    /**\n     * Runs a test with varying file sizes.\n     */\n    @Override\n    @Test\n    public void testFileUpload() throws IOException, FileUploadException {\n        final var baos = new ByteArrayOutputStream();\n        var add = 16;\n        var num = 0;\n        for (var i = 0; i < 16384; i += add) {\n            if (++add == 32) {\n                add = 16;\n            }\n            final var header = \"-----1234\\r\\n\" + \"Content-Disposition: form-data; name=\\\"field\" + num++ + \"\\\"\\r\\n\" + \"\\r\\n\";\n            baos.write(header.getBytes(StandardCharsets.US_ASCII));\n            for (var j = 0; j < i; j++) {\n                baos.write((byte) j);\n            }\n            baos.write(\"\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n        }\n        baos.write(\"-----1234--\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n\n        final var fileItems = parseUpload(new JavaxServletFileUpload<>(DiskFileItemFactory.builder().get()), baos.toByteArray());\n        final var fileIter = fileItems.iterator();\n        add = 16;\n        num = 0;\n        for (var i = 0; i < 16384; i += add) {\n            if (++add == 32) {\n                add = 16;\n            }\n            final var item = fileIter.next();\n            assertEquals(\"field\" + num++, item.getFieldName());\n            final var bytes = item.get();\n            assertEquals(i, bytes.length);\n            for (var j = 0; j < i; j++) {\n                assertEquals((byte) j, bytes[j]);\n            }\n        }\n        assertTrue(!fileIter.hasNext());\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxServletFileUploadDiskTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 42
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.fileupload2.javax;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUploadTest;\nimport org.apache.commons.fileupload2.core.Constants;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\nimport org.apache.commons.fileupload2.core.FileUploadException;\nimport org.junit.jupiter.api.Test;\n\n/**\n * Tests {@link JavaxServletFileUpload}.\n *\n * @see AbstractFileUploadTest\n */\npublic class JavaxServletFileUploadDiskTest extends AbstractFileUploadTest<JavaxServletDiskFileUpload, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    public JavaxServletFileUploadDiskTest() {\n        super(new JavaxServletDiskFileUpload());\n    }\n\n    @Test\n    public void parseImpliedUtf8() throws Exception {\n        // utf8 encoded form-data without explicit content-type encoding\n        // @formatter:off\n        final var text = \"-----1234\\r\\n\" +\n                \"Content-Disposition: form-data; name=\\\"utf8Html\\\"\\r\\n\" +\n                \"\\r\\n\" +\n                \"ThÃ­s Ã­s the coÃ±teÃ±t of the fÃ­le\\n\" +\n                \"\\r\\n\" +\n                \"-----1234--\\r\\n\";\n        // @formatter:on\n\n        final var bytes = text.getBytes(StandardCharsets.UTF_8);\n        final HttpServletRequest request = new JavaxMockHttpServletRequest(bytes, Constants.CONTENT_TYPE);\n        // @formatter:off\n        final var fileItemFactory = DiskFileItemFactory.builder()\n                .setCharset(StandardCharsets.UTF_8)\n                .get();\n        // @formatter:on\n        final var upload = new JavaxServletFileUpload<>(fileItemFactory);\n        final var fileItems = upload.parseRequest(request);\n        final var fileItem = fileItems.get(0);\n        assertTrue(fileItem.getString().contains(\"coÃ±teÃ±t\"), fileItem.getString());\n    }\n\n    /*\n     * Test case for <a href=\"https://issues.apache.org/jira/browse/FILEUPLOAD-210\">\n     */\n    @Test\n    public void parseParameterMap() throws Exception {\n        // @formatter:off\n        final var text = \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"foo.tab\\\"\\r\\n\" +\n                      \"Content-Type: text/whatever\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"This is the content of the file\\n\" +\n                      \"\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"field\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"fieldValue\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"value1\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"value2\\r\\n\" +\n                      \"-----1234--\\r\\n\";\n        // @formatter:on\n        final var bytes = text.getBytes(StandardCharsets.US_ASCII);\n        final HttpServletRequest request = new JavaxMockHttpServletRequest(bytes, Constants.CONTENT_TYPE);\n\n        final var upload = new JavaxServletFileUpload<>(DiskFileItemFactory.builder().get());\n        final var mappedParameters = upload.parseParameterMap(request);\n        assertTrue(mappedParameters.containsKey(\"file\"));\n        assertEquals(1, mappedParameters.get(\"file\").size());\n\n        assertTrue(mappedParameters.containsKey(\"field\"));\n        assertEquals(1, mappedParameters.get(\"field\").size());\n\n        assertTrue(mappedParameters.containsKey(\"multi\"));\n        assertEquals(2, mappedParameters.get(\"multi\").size());\n    }\n\n    @Override\n    public List<DiskFileItem> parseUpload(final JavaxServletDiskFileUpload upload, final byte[] bytes, final String contentType) throws FileUploadException {\n        final HttpServletRequest request = new JavaxMockHttpServletRequest(bytes, contentType);\n        return upload.parseRequest(new JavaxServletRequestContext(request));\n    }\n\n    /**\n     * Runs a test with varying file sizes.\n     */\n    @Override\n    @Test\n    public void testFileUpload() throws IOException, FileUploadException {\n        final var baos = new ByteArrayOutputStream();\n        var add = 16;\n        var num = 0;\n        for (var i = 0; i < 16384; i += add) {\n            if (++add == 32) {\n                add = 16;\n            }\n            final var header = \"-----1234\\r\\n\" + \"Content-Disposition: form-data; name=\\\"field\" + num++ + \"\\\"\\r\\n\" + \"\\r\\n\";\n            baos.write(header.getBytes(StandardCharsets.US_ASCII));\n            for (var j = 0; j < i; j++) {\n                baos.write((byte) j);\n            }\n            baos.write(\"\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n        }\n        baos.write(\"-----1234--\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n\n        final var fileItems = parseUpload(new JavaxServletDiskFileUpload(), baos.toByteArray());\n        final var fileIter = fileItems.iterator();\n        add = 16;\n        num = 0;\n        for (var i = 0; i < 16384; i += add) {\n            if (++add == 32) {\n                add = 16;\n            }\n            final var item = fileIter.next();\n            assertEquals(\"field\" + num++, item.getFieldName());\n            final var bytes = item.get();\n            assertEquals(i, bytes.length);\n            for (var j = 0; j < i; j++) {\n                assertEquals((byte) j, bytes[j]);\n            }\n        }\n        assertTrue(!fileIter.hasNext());\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxSizesTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 43
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.javax;\n\nimport java.io.InputStream;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractSizesTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\n\n/**\n * Unit test for items with varying sizes.\n */\npublic class JavaxSizesTest\n        extends AbstractSizesTest<JavaxServletFileUpload<DiskFileItem, DiskFileItemFactory>, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected JavaxServletFileUpload<DiskFileItem, DiskFileItemFactory> newFileUpload() {\n        return new JavaxServletFileUpload<>(DiskFileItemFactory.builder().get());\n    }\n\n    @Override\n    protected JavaxMockHttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType,\n            final int readLimit) {\n        return new JavaxMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxStreamingDiskTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 44
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.javax;\n\nimport java.io.InputStream;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractStreamingTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\n\n/**\n * Unit test for items with varying sizes.\n */\npublic class JavaxStreamingDiskTest\n        extends AbstractStreamingTest<JavaxServletDiskFileUpload, HttpServletRequest, JavaxServletRequestContext, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected DiskFileItemFactory newDiskFileItemFactory() {\n        return DiskFileItemFactory.builder().get();\n    }\n\n    @Override\n    protected JavaxServletDiskFileUpload newFileUpload() {\n        return new JavaxServletDiskFileUpload();\n    }\n\n    @Override\n    protected HttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType, final int readLimit) {\n        return new JavaxMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n    @Override\n    protected JavaxServletRequestContext newServletRequestContext(final HttpServletRequest request) {\n        return new JavaxServletRequestContext(request);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxStreamingTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 45
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.javax;\n\nimport java.io.InputStream;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractStreamingTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\n\n/**\n * Unit test for items with varying sizes.\n */\npublic class JavaxStreamingTest extends\n        AbstractStreamingTest<JavaxServletFileUpload<DiskFileItem, DiskFileItemFactory>, HttpServletRequest, JavaxServletRequestContext, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected DiskFileItemFactory newDiskFileItemFactory() {\n        return DiskFileItemFactory.builder().get();\n    }\n\n    @Override\n    protected JavaxServletFileUpload<DiskFileItem, DiskFileItemFactory> newFileUpload() {\n        return new JavaxServletFileUpload<>();\n    }\n\n    @Override\n    protected HttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType, final int readLimit) {\n        return new JavaxMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n    @Override\n    protected JavaxServletRequestContext newServletRequestContext(final HttpServletRequest request) {\n        return new JavaxServletRequestContext(request);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-javax/src/test/java/org/apache/commons/fileupload2/javax/JavaxProgressListenerTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 46
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.javax;\n\nimport java.io.InputStream;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractProgressListenerTest;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\nimport org.apache.commons.fileupload2.core.ProgressListener;\n\n/**\n * Tests the {@link ProgressListener}.\n */\npublic class JavaxProgressListenerTest\n        extends AbstractProgressListenerTest<JavaxServletFileUpload<DiskFileItem, DiskFileItemFactory>, HttpServletRequest, DiskFileItem, DiskFileItemFactory> {\n\n    @Override\n    protected JavaxServletFileUpload<DiskFileItem, DiskFileItemFactory> newFileUpload() {\n        return new JavaxServletFileUpload<>();\n    }\n\n    @Override\n    protected HttpServletRequest newMockHttpServletRequest(final InputStream request, final long requestLength, final String contentType, final int readLimit) {\n        return new JavaxMockHttpServletRequest(request, requestLength, contentType, readLimit);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-portlet/src/main/java/org/apache/commons/fileupload2/portlet/JavaxPortletRequestContext.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 47
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.portlet;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport javax.portlet.ActionRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractRequestContext;\n\n/**\n * Provides access to the request information needed for a request made to a portlet.\n */\npublic class JavaxPortletRequestContext extends AbstractRequestContext<ActionRequest> {\n\n    /**\n     * Constructs a context for this request.\n     *\n     * @param request The request to which this context applies.\n     */\n    public JavaxPortletRequestContext(final ActionRequest request) {\n        super(request::getProperty, request::getContentLength, request);\n    }\n\n    /**\n     * Gets the character encoding for the request.\n     *\n     * @return The character encoding for the request.\n     */\n    @Override\n    public String getCharacterEncoding() {\n        return getRequest().getCharacterEncoding();\n    }\n\n    /**\n     * Gets the content type of the request.\n     *\n     * @return The content type of the request.\n     */\n    @Override\n    public String getContentType() {\n        return getRequest().getContentType();\n    }\n\n    /**\n     * Gets the input stream for the request.\n     *\n     * @return The input stream for the request.\n     * @throws IOException if a problem occurs.\n     */\n    @Override\n    public InputStream getInputStream() throws IOException {\n        return getRequest().getPortletInputStream();\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-portlet/src/main/java/org/apache/commons/fileupload2/portlet/package-info.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 48
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * <p>\n * An implementation of {@link org.apache.commons.fileupload2.core.AbstractFileUpload} for use in portlets conforming to JSR 168. This implementation requires\n * only access to the portlet's current {@code ActionRequest} instance, and a suitable {@link org.apache.commons.fileupload2.core.FileItemFactory}\n * implementation, such as {@link org.apache.commons.fileupload2.core.DiskFileItemFactory}.\n * </p>\n * <p>\n * The following code fragment demonstrates typical usage.\n * </p>\n *\n * <pre>{@code\n * DiskFileItemFactory factory = DiskFileItemFactory().builder().get();\n * // Configure the factory here, if desired.\n * PortletFileUpload upload = new PortletFileUpload(factory);\n * // Configure the uploader here, if desired.\n * List fileItems = upload.parseRequest(request);\n * }</pre>\n * <p>\n * Please see the FileUpload <a href=\"https://commons.apache.org/fileupload/using.html\" target=\"_top\">User Guide</a> for further details and examples of how to\n * use this package.\n * </p>\n */\npackage org.apache.commons.fileupload2.portlet;\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-portlet/src/main/java/org/apache/commons/fileupload2/portlet/JavaxPortletFileUpload.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 49
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.portlet;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.portlet.ActionRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUpload;\nimport org.apache.commons.fileupload2.core.FileItem;\nimport org.apache.commons.fileupload2.core.FileItemFactory;\nimport org.apache.commons.fileupload2.core.FileItemInputIterator;\nimport org.apache.commons.fileupload2.core.FileUploadException;\nimport org.apache.commons.fileupload2.javax.JavaxServletFileUpload;\n\n/**\n * High level API for processing file uploads.\n * <p>\n * This class handles multiple files per single HTML widget, sent using {@code multipart/mixed} encoding type, as specified by\n * <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>. Use {@link JavaxServletFileUpload#parseRequest(javax.servlet.http.HttpServletRequest)} to acquire\n * a list of {@link FileItem}s associated with a given HTML widget.\n * </p>\n * <p>\n * How the data for individual parts is stored is determined by the factory used to create them; a given part may be in memory, on disk, or somewhere else.\n * </p>\n *\n * @param <I> The FileItem type.\n * @param <F> the FileItemFactory type.\n */\npublic class JavaxPortletFileUpload<I extends FileItem<I>, F extends FileItemFactory<I>> extends AbstractFileUpload<ActionRequest, I, F> {\n\n    /**\n     * Tests whether the request contains multipart content.\n     *\n     * @param request The portlet request to be evaluated. Must be non-null.\n     * @return {@code true} if the request is multipart; {@code false} otherwise.\n     */\n    public static final boolean isMultipartContent(final ActionRequest request) {\n        return AbstractFileUpload.isMultipartContent(new JavaxPortletRequestContext(request));\n    }\n\n    /**\n     * Constructs an uninitialized instance of this class. A factory must be configured, using {@code setFileItemFactory()}, before attempting to parse\n     * requests.\n     *\n     * @see AbstractFileUpload#AbstractFileUpload()\n     */\n    public JavaxPortletFileUpload() {\n    }\n\n    /**\n     * Constructs an instance of this class which uses the supplied factory to create {@code FileItem} instances.\n     *\n     * @see AbstractFileUpload#AbstractFileUpload()\n     * @param fileItemFactory The factory to use for creating file items.\n     */\n    public JavaxPortletFileUpload(final F fileItemFactory) {\n        setFileItemFactory(fileItemFactory);\n    }\n\n    /**\n     * Gets an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} file item iterator.\n     *\n     * @param request The portlet request to be parsed.\n     * @return An iterator to instances of {@code FileItemInput} parsed from the request, in the order that they were transmitted.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     * @throws IOException         An I/O error occurred. This may be a network error while communicating with the client or a problem while storing the\n     *                             uploaded content.\n     */\n    @Override\n    public FileItemInputIterator getItemIterator(final ActionRequest request) throws FileUploadException, IOException {\n        return super.getItemIterator(new JavaxPortletRequestContext(request));\n    }\n\n    /**\n     * Parses an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} stream.\n     *\n     * @param request The portlet request to be parsed.\n     * @return A map of {@code FileItem} instances parsed from the request.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     */\n    @Override\n    public Map<String, List<I>> parseParameterMap(final ActionRequest request) throws FileUploadException {\n        return parseParameterMap(new JavaxPortletRequestContext(request));\n    }\n\n    /**\n     * Parses an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} stream.\n     *\n     * @param request The portlet request to be parsed.\n     * @return A list of {@code FileItem} instances parsed from the request, in the order that they were transmitted.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     */\n    @Override\n    public List<I> parseRequest(final ActionRequest request) throws FileUploadException {\n        return parseRequest(new JavaxPortletRequestContext(request));\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-portlet/src/test/java/org/apache/commons/fileupload2/portlet/JavaxPortletFileUploadTest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 50
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.portlet;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\n\nimport javax.portlet.ActionRequest;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUploadTest;\nimport org.apache.commons.fileupload2.core.Constants;\nimport org.apache.commons.fileupload2.core.DiskFileItem;\nimport org.apache.commons.fileupload2.core.DiskFileItemFactory;\nimport org.apache.commons.fileupload2.core.FileUploadException;\nimport org.junit.jupiter.api.Test;\n\n/**\n * Tests {@link JavaxPortletFileUpload}.\n *\n * @see AbstractFileUploadTest\n */\npublic class JavaxPortletFileUploadTest\n        extends AbstractFileUploadTest<JavaxPortletFileUpload<DiskFileItem, DiskFileItemFactory>, ActionRequest, DiskFileItem, DiskFileItemFactory> {\n\n    public JavaxPortletFileUploadTest() {\n        super(new JavaxPortletFileUpload<>(DiskFileItemFactory.builder().get()));\n    }\n\n    @Test\n    public void parseParameterMap() throws Exception {\n        // @formatter:off\n        final var text = \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"foo.tab\\\"\\r\\n\" +\n                      \"Content-Type: text/whatever\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"This is the content of the file\\n\" +\n                      \"\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"field\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"fieldValue\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"value1\\r\\n\" +\n                      \"-----1234\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"multi\\\"\\r\\n\" +\n                      \"\\r\\n\" +\n                      \"value2\\r\\n\" +\n                      \"-----1234--\\r\\n\";\n        // @formatter:on\n        final var bytes = text.getBytes(StandardCharsets.US_ASCII);\n        final ActionRequest request = new JavaxPortletMockActionRequest(bytes, Constants.CONTENT_TYPE);\n\n        final var mappedParameters = upload.parseParameterMap(request);\n        assertTrue(mappedParameters.containsKey(\"file\"));\n        assertEquals(1, mappedParameters.get(\"file\").size());\n\n        assertTrue(mappedParameters.containsKey(\"field\"));\n        assertEquals(1, mappedParameters.get(\"field\").size());\n\n        assertTrue(mappedParameters.containsKey(\"multi\"));\n        assertEquals(2, mappedParameters.get(\"multi\").size());\n    }\n\n    @Override\n    public List<DiskFileItem> parseUpload(final JavaxPortletFileUpload<DiskFileItem, DiskFileItemFactory> upload, final byte[] bytes, final String contentType)\n            throws FileUploadException {\n        final ActionRequest request = new JavaxPortletMockActionRequest(bytes, contentType);\n        return upload.parseRequest(new JavaxPortletRequestContext(request));\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-portlet/src/test/java/org/apache/commons/fileupload2/portlet/JavaxPortletMockActionRequest.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 51
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.portlet;\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.security.Principal;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport javax.portlet.ActionRequest;\nimport javax.portlet.PortalContext;\nimport javax.portlet.PortletMode;\nimport javax.portlet.PortletPreferences;\nimport javax.portlet.PortletSession;\nimport javax.portlet.WindowState;\n\nimport org.apache.commons.fileupload2.core.AbstractFileUpload;\n\n/**\n * Mock class for tests. Implements an {@link ActionRequest}.\n *\n * @see JavaxPortletFileUploadTest\n */\n@SuppressWarnings(\"rawtypes\") // because of the portlet ActionRequest API does not use generics\npublic class JavaxPortletMockActionRequest implements ActionRequest {\n\n    private final Hashtable<String, Object> attributes = new Hashtable<>();\n\n    private final Map<String, String> parameters = new HashMap<>();\n\n    private String characterEncoding;\n    private final int length;\n    private final String contentType;\n    private final InputStream requestData;\n\n    public JavaxPortletMockActionRequest(final byte[] requestData, final String contentType) {\n        this(new ByteArrayInputStream(requestData), requestData.length, contentType);\n    }\n\n    public JavaxPortletMockActionRequest(final ByteArrayInputStream requestData, final int length, final String contentType) {\n        this.requestData = requestData;\n        this.length = length;\n        this.contentType = contentType;\n        this.attributes.put(AbstractFileUpload.CONTENT_TYPE, contentType);\n    }\n\n    @Override\n    public Object getAttribute(final String key) {\n        return attributes.get(key);\n    }\n\n    @Override\n    public Enumeration getAttributeNames() {\n        return attributes.keys();\n    }\n\n    @Override\n    public String getAuthType() {\n        return null;\n    }\n\n    @Override\n    public String getCharacterEncoding() {\n        return characterEncoding;\n    }\n\n    @Override\n    public int getContentLength() {\n        return length;\n    }\n\n    @Override\n    public String getContentType() {\n        return contentType;\n    }\n\n    @Override\n    public String getContextPath() {\n        return null;\n    }\n\n    @Override\n    public Locale getLocale() {\n        return Locale.getDefault();\n    }\n\n    @Override\n    public Enumeration getLocales() {\n        return Collections.enumeration(Arrays.asList(Locale.getAvailableLocales()));\n    }\n\n    @Override\n    public String getParameter(final String key) {\n        return parameters.get(key);\n    }\n\n    @Override\n    public Map getParameterMap() {\n        return Collections.unmodifiableMap(parameters);\n    }\n\n    @Override\n    public Enumeration getParameterNames() {\n        return Collections.enumeration(parameters.keySet());\n    }\n\n    @Override\n    public String[] getParameterValues(final String arg0) {\n        return null;\n    }\n\n    @Override\n    public PortalContext getPortalContext() {\n        return null;\n    }\n\n    @Override\n    public InputStream getPortletInputStream() throws IOException {\n        return requestData;\n    }\n\n    @Override\n    public PortletMode getPortletMode() {\n        return null;\n    }\n\n    @Override\n    public PortletSession getPortletSession() {\n        return null;\n    }\n\n    @Override\n    public PortletSession getPortletSession(final boolean arg0) {\n        return null;\n    }\n\n    @Override\n    public PortletPreferences getPreferences() {\n        return null;\n    }\n\n    @Override\n    public Enumeration getProperties(final String arg0) {\n        return null;\n    }\n\n    @Override\n    public String getProperty(final String arg0) {\n        return null;\n    }\n\n    @Override\n    public Enumeration getPropertyNames() {\n        return null;\n    }\n\n    @Override\n    public BufferedReader getReader() throws UnsupportedEncodingException, IOException {\n        return null;\n    }\n\n    @Override\n    public String getRemoteUser() {\n        return null;\n    }\n\n    @Override\n    public String getRequestedSessionId() {\n        return null;\n    }\n\n    @Override\n    public String getResponseContentType() {\n        return null;\n    }\n\n    @Override\n    public Enumeration getResponseContentTypes() {\n        return null;\n    }\n\n    @Override\n    public String getScheme() {\n        return null;\n    }\n\n    @Override\n    public String getServerName() {\n        return null;\n    }\n\n    @Override\n    public int getServerPort() {\n        return 0;\n    }\n\n    @Override\n    public Principal getUserPrincipal() {\n        return null;\n    }\n\n    @Override\n    public WindowState getWindowState() {\n        return null;\n    }\n\n    @Override\n    public boolean isPortletModeAllowed(final PortletMode arg0) {\n        return false;\n    }\n\n    @Override\n    public boolean isRequestedSessionIdValid() {\n        return false;\n    }\n\n    @Override\n    public boolean isSecure() {\n        return false;\n    }\n\n    @Override\n    public boolean isUserInRole(final String arg0) {\n        return false;\n    }\n\n    @Override\n    public boolean isWindowStateAllowed(final WindowState arg0) {\n        return false;\n    }\n\n    @Override\n    public void removeAttribute(final String key) {\n        attributes.remove(key);\n    }\n\n    @Override\n    public void setAttribute(final String key, final Object value) {\n        attributes.put(key, value);\n    }\n\n    @Override\n    public void setCharacterEncoding(final String characterEncoding) throws UnsupportedEncodingException {\n        this.characterEncoding = characterEncoding;\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/RequestContext.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 52
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.nio.charset.UnsupportedCharsetException;\n\nimport org.apache.commons.io.Charsets;\n\n/**\n * Abstracts access to the request information needed for file uploads.\n * <p>\n * This interface should be implemented for each type of request that may be handled by FileUpload, such as servlets and portlets.\n * </p>\n */\npublic interface RequestContext {\n\n    /**\n     * Gets the character encoding for the request.\n     *\n     * @return The character encoding for the request.\n     */\n    String getCharacterEncoding();\n\n    /**\n     * Gets the character encoding for the request or null if unspecified.\n     *\n     * @return The character encoding for the request or null.\n     * @throws UnsupportedCharsetException If the named Charset is unavailable.\n     */\n    default Charset getCharset() throws UnsupportedCharsetException {\n        return Charsets.toCharset(getCharacterEncoding(), null);\n    }\n\n    /**\n     * Gets the content length of the request.\n     *\n     * @return The content length of the request.\n     */\n    long getContentLength();\n\n    /**\n     * Gets the content type of the request.\n     *\n     * @return The content type of the request.\n     */\n    String getContentType();\n\n    /**\n     * Gets the input stream for the request.\n     *\n     * @return The input stream for the request.\n     * @throws IOException if a problem occurs.\n     */\n    InputStream getInputStream() throws IOException;\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadException.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 53
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.IOException;\n\n/**\n * Signals errors encountered while processing the request.\n */\npublic class FileUploadException extends IOException {\n\n    /**\n     * Serial version UID, being used, if the exception is serialized.\n     */\n    private static final long serialVersionUID = 2;\n\n    /**\n     * Constructs an instance with a given detail message.\n     *\n     * @param message The detail message (which is saved for later retrieval by the {@link #getMessage()} method)\n     */\n    public FileUploadException(final String message) {\n        super(message);\n    }\n\n    /**\n     * Constructs an instance with the given detail message and cause.\n     *\n     * @param message The detail message (which is saved for later retrieval by the {@link #getMessage()} method)\n     * @param cause   The cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the cause\n     *                is nonexistent or unknown.)\n     */\n    public FileUploadException(final String message, final Throwable cause) {\n        super(message, cause);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/MimeUtils.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 54
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.StandardCharsets;\nimport java.text.ParseException;\nimport java.util.Base64;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\n/**\n * Utility class to decode MIME texts.\n */\nfinal class MimeUtils {\n\n    /**\n     * The marker to indicate text is encoded with BASE64 algorithm.\n     */\n    private static final String BASE64_ENCODING_MARKER = \"B\";\n\n    /**\n     * The marker to indicate text is encoded with QuotedPrintable algorithm.\n     */\n    private static final String QUOTEDPRINTABLE_ENCODING_MARKER = \"Q\";\n\n    /**\n     * If the text contains any encoded tokens, those tokens will be marked with \"=?\".\n     */\n    private static final String ENCODED_TOKEN_MARKER = \"=?\";\n\n    /**\n     * If the text contains any encoded tokens, those tokens will terminate with \"=?\".\n     */\n    private static final String ENCODED_TOKEN_FINISHER = \"?=\";\n\n    /**\n     * The linear whitespace chars sequence.\n     */\n    private static final String LINEAR_WHITESPACE = \" \\t\\r\\n\";\n\n    /**\n     * Mappings between MIME and Java charset.\n     */\n    private static final Map<String, String> MIME2JAVA = new HashMap<>();\n\n    static {\n        MIME2JAVA.put(\"iso-2022-cn\", \"ISO2022CN\");\n        MIME2JAVA.put(\"iso-2022-kr\", \"ISO2022KR\");\n        MIME2JAVA.put(\"utf-8\", \"UTF8\");\n        MIME2JAVA.put(\"utf8\", \"UTF8\");\n        MIME2JAVA.put(\"ja_jp.iso2022-7\", \"ISO2022JP\");\n        MIME2JAVA.put(\"ja_jp.eucjp\", \"EUCJIS\");\n        MIME2JAVA.put(\"euc-kr\", \"KSC5601\");\n        MIME2JAVA.put(\"euckr\", \"KSC5601\");\n        MIME2JAVA.put(\"us-ascii\", \"ISO-8859-1\");\n        MIME2JAVA.put(\"x-us-ascii\", \"ISO-8859-1\");\n    }\n\n    /**\n     * Decodes a string of text obtained from a mail header into its proper form. The text generally will consist of a string of tokens, some of which may be\n     * encoded using base64 encoding.\n     *\n     * @param text The text to decode.\n     *\n     * @return The decoded text string.\n     * @throws UnsupportedEncodingException if the detected encoding in the input text is not supported.\n     */\n    static String decodeText(final String text) throws UnsupportedEncodingException {\n        // if the text contains any encoded tokens, those tokens will be marked with \"=?\". If the\n        // source string doesn't contain that sequent, no decoding is required.\n        if (!text.contains(ENCODED_TOKEN_MARKER)) {\n            return text;\n        }\n\n        var offset = 0;\n        final var endOffset = text.length();\n\n        var startWhiteSpace = -1;\n        var endWhiteSpace = -1;\n\n        final var decodedText = new StringBuilder(text.length());\n\n        var previousTokenEncoded = false;\n\n        while (offset < endOffset) {\n            var ch = text.charAt(offset);\n\n            // is this a whitespace character?\n            if (LINEAR_WHITESPACE.indexOf(ch) != -1) { // whitespace found\n                startWhiteSpace = offset;\n                while (offset < endOffset) {\n                    // step over the white space characters.\n                    ch = text.charAt(offset);\n                    if (LINEAR_WHITESPACE.indexOf(ch) == -1) {\n                        // record the location of the first non lwsp and drop down to process the\n                        // token characters.\n                        endWhiteSpace = offset;\n                        break;\n                    }\n                    offset++;\n                }\n            } else {\n                // we have a word token. We need to scan over the word and then try to parse it.\n                final var wordStart = offset;\n\n                while (offset < endOffset) {\n                    // step over the non white space characters.\n                    ch = text.charAt(offset);\n                    if (LINEAR_WHITESPACE.indexOf(ch) != -1) {\n                        break;\n                    }\n                    offset++;\n\n                    // NB: Trailing whitespace on these header strings will just be discarded.\n                }\n                // pull out the word token.\n                final var word = text.substring(wordStart, offset);\n                // is the token encoded? decode the word\n                if (word.startsWith(ENCODED_TOKEN_MARKER)) {\n                    try {\n                        // if this gives a parsing failure, treat it like a non-encoded word.\n                        final var decodedWord = decodeWord(word);\n\n                        // are any whitespace characters significant? Append 'em if we've got 'em.\n                        if (!previousTokenEncoded && startWhiteSpace != -1) {\n                            decodedText.append(text, startWhiteSpace, endWhiteSpace);\n                            startWhiteSpace = -1;\n                        }\n                        // this is definitely a decoded token.\n                        previousTokenEncoded = true;\n                        // and add this to the text.\n                        decodedText.append(decodedWord);\n                        // we continue parsing from here...we allow parsing errors to fall through\n                        // and get handled as normal text.\n                        continue;\n\n                    } catch (final ParseException ignored) {\n                        // just ignore it, skip to next word\n                    }\n                }\n                // this is a normal token, so it doesn't matter what the previous token was. Add the white space\n                // if we have it.\n                if (startWhiteSpace != -1) {\n                    decodedText.append(text, startWhiteSpace, endWhiteSpace);\n                    startWhiteSpace = -1;\n                }\n                // this is not a decoded token.\n                previousTokenEncoded = false;\n                decodedText.append(word);\n            }\n        }\n\n        return decodedText.toString();\n    }\n\n    /**\n     * Decodes a string using the RFC 2047 rules for an \"encoded-word\" type. This encoding has the syntax:\n     *\n     * encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n     *\n     * @param word The possibly encoded word value.\n     *\n     * @return The decoded word.\n     * @throws ParseException               in case of a parse error of the RFC 2047.\n     * @throws UnsupportedEncodingException Thrown when Invalid RFC 2047 encoding was found.\n     */\n    private static String decodeWord(final String word) throws ParseException, UnsupportedEncodingException {\n        // encoded words start with the characters \"=?\". If this not an encoded word, we throw a\n        // ParseException for the caller.\n\n        final var etmPos = word.indexOf(ENCODED_TOKEN_MARKER);\n        if (etmPos != 0) {\n            throw new ParseException(\"Invalid RFC 2047 encoded-word: \" + word, etmPos);\n        }\n\n        final var charsetPos = word.indexOf('?', 2);\n        if (charsetPos == -1) {\n            throw new ParseException(\"Missing charset in RFC 2047 encoded-word: \" + word, charsetPos);\n        }\n\n        // pull out the character set information (this is the MIME name at this point).\n        final var charset = word.substring(2, charsetPos).toLowerCase(Locale.ENGLISH);\n\n        // now pull out the encoding token the same way.\n        final var encodingPos = word.indexOf('?', charsetPos + 1);\n        if (encodingPos == -1) {\n            throw new ParseException(\"Missing encoding in RFC 2047 encoded-word: \" + word, encodingPos);\n        }\n\n        final var encoding = word.substring(charsetPos + 1, encodingPos);\n\n        // and finally the encoded text.\n        final var encodedTextPos = word.indexOf(ENCODED_TOKEN_FINISHER, encodingPos + 1);\n        if (encodedTextPos == -1) {\n            throw new ParseException(\"Missing encoded text in RFC 2047 encoded-word: \" + word, encodedTextPos);\n        }\n\n        final var encodedText = word.substring(encodingPos + 1, encodedTextPos);\n\n        // seems a bit silly to encode a null string, but easy to deal with.\n        if (encodedText.isEmpty()) {\n            return \"\";\n        }\n\n        try {\n            // the decoder writes directly to an output stream.\n            final var out = new ByteArrayOutputStream(encodedText.length());\n\n            final var encodedData = encodedText.getBytes(StandardCharsets.US_ASCII);\n\n            // Base64 encoded?\n            if (encoding.equals(BASE64_ENCODING_MARKER)) {\n                out.write(Base64.getMimeDecoder().decode(encodedData));\n            } else if (encoding.equals(QUOTEDPRINTABLE_ENCODING_MARKER)) { // maybe quoted printable.\n                QuotedPrintableDecoder.decode(encodedData, out);\n            } else {\n                throw new UnsupportedEncodingException(\"Unknown RFC 2047 encoding: \" + encoding);\n            }\n            // get the decoded byte data and convert into a string.\n            final var decodedData = out.toByteArray();\n            return new String(decodedData, javaCharset(charset));\n        } catch (final IOException e) {\n            throw new UnsupportedEncodingException(\"Invalid RFC 2047 encoding\");\n        }\n    }\n\n    /**\n     * Translate a MIME standard character set name into the Java equivalent.\n     *\n     * @param charset The MIME standard name.\n     *\n     * @return The Java equivalent for this name.\n     */\n    private static String javaCharset(final String charset) {\n        // nothing in, nothing out.\n        if (charset == null) {\n            return null;\n        }\n        final var mappedCharset = MIME2JAVA.get(charset.toLowerCase(Locale.ENGLISH));\n        // if there is no mapping, then the original name is used. Many of the MIME character set\n        // names map directly back into Java. The reverse isn't necessarily true.\n        return mappedCharset == null ? charset : mappedCharset;\n    }\n\n    /**\n     * Hidden constructor, this class must not be instantiated.\n     */\n    private MimeUtils() {\n        // do nothing\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItemFactory.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 55
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.nio.charset.Charset;\nimport java.nio.file.Path;\n\nimport org.apache.commons.io.FileCleaningTracker;\nimport org.apache.commons.io.build.AbstractOrigin;\nimport org.apache.commons.io.build.AbstractStreamBuilder;\nimport org.apache.commons.io.file.PathUtils;\n\n/**\n * The default {@link FileItemFactory} implementation.\n * <p>\n * This implementation creates {@link FileItem} instances which keep their content either in memory, for smaller items, or in a temporary file on disk, for\n * larger items. The size threshold, above which content will be stored on disk, is configurable, as is the directory in which temporary files will be created.\n * </p>\n * <p>\n * If not otherwise configured, the default configuration values are as follows:\n * </p>\n * <ul>\n * <li>Size threshold is 10 KB.</li>\n * <li>Repository is the system default temporary directory, as returned by {@code System.getProperty(\"java.io.tmpdir\")}.</li>\n * </ul>\n * <p>\n * <b>NOTE</b>: Files are created in the system default temporary directory with predictable names. This means that a local attacker with write access to that\n * directory can perform a TOUTOC attack to replace any uploaded file with a file of the attackers choice. The implications of this will depend on how the\n * uploaded file is used but could be significant. When using this implementation in an environment with local, untrusted users, {@link Builder#setPath(Path)}\n * MUST be used to configure a repository location that is not publicly writable. In a Servlet container the location identified by the ServletContext attribute\n * {@code javax.servlet.context.tempdir} may be used.\n * </p>\n * <p>\n * Temporary files, which are created for file items, should be deleted later on. The best way to do this is using a {@link FileCleaningTracker}, which you can\n * set on the {@link DiskFileItemFactory}. However, if you do use such a tracker, then you must consider the following: Temporary files are automatically\n * deleted as soon as they are no longer needed. (More precisely, when the corresponding instance of {@link java.io.File} is garbage collected.) This is done by\n * the so-called reaper thread, which is started and stopped automatically by the {@link FileCleaningTracker} when there are files to be tracked. It might make\n * sense to terminate that thread, for example, if your web application ends. See the section on \"Resource cleanup\" in the users guide of Commons FileUpload.\n * </p>\n *\n * @see Builder\n * @see Builder#get()\n */\npublic final class DiskFileItemFactory implements FileItemFactory<DiskFileItem> {\n\n    /**\n     * Builds a new {@link DiskFileItemFactory} instance.\n     * <p>\n     * For example:\n     * </p>\n     * <pre>{@code\n     * DiskFileItemFactory factory = DiskFileItemFactory.builder().setPath(path).setBufferSize(DEFAULT_THRESHOLD).get();\n     * }\n     * </pre>\n     */\n    public static class Builder extends AbstractStreamBuilder<DiskFileItemFactory, Builder> {\n\n        /**\n         * The instance of {@link FileCleaningTracker}, which is responsible for deleting temporary files.\n         * <p>\n         * May be null, if tracking files is not required.\n         * </p>\n         */\n        private FileCleaningTracker fileCleaningTracker;\n\n        public Builder() {\n            setBufferSize(DEFAULT_THRESHOLD);\n            setPath(PathUtils.getTempDirectory());\n            setCharset(DiskFileItem.DEFAULT_CHARSET);\n            setCharsetDefault(DiskFileItem.DEFAULT_CHARSET);\n        }\n\n        /**\n         * Constructs a new instance.\n         * <p>\n         * This builder use the aspects Path and buffer size.\n         * </p>\n         * <p>\n         * You must provide an origin that can be converted to a Reader by this builder, otherwise, this call will throw an\n         * {@link UnsupportedOperationException}.\n         * </p>\n         *\n         * @return a new instance.\n         * @throws UnsupportedOperationException if the origin cannot provide a Path.\n         * @see AbstractOrigin#getReader(Charset)\n         */\n        @Override\n        public DiskFileItemFactory get() {\n            return new DiskFileItemFactory(getPath(), getBufferSize(), getCharset(), fileCleaningTracker);\n        }\n\n        /**\n         * Sets the tracker, which is responsible for deleting temporary files.\n         *\n         * @param fileCleaningTracker Callback to track files created, or null (default) to disable tracking.\n         * @return this\n         */\n        public Builder setFileCleaningTracker(final FileCleaningTracker fileCleaningTracker) {\n            this.fileCleaningTracker = fileCleaningTracker;\n            return this;\n        }\n\n    }\n\n    /**\n     * The default threshold in bytes above which uploads will be stored on disk.\n     */\n    public static final int DEFAULT_THRESHOLD = 10_240;\n\n    /**\n     * Constructs a new {@link Builder}.\n     *\n     * @return a new {@link Builder}.\n     */\n    public static Builder builder() {\n        return new Builder();\n    }\n\n    /**\n     * The directory in which uploaded files will be stored, if stored on disk.\n     */\n    private final Path repository;\n\n    /**\n     * The threshold above which uploads will be stored on disk.\n     */\n    private final int threshold;\n\n    /**\n     * The instance of {@link FileCleaningTracker}, which is responsible for deleting temporary files.\n     * <p>\n     * May be null, if tracking files is not required.\n     * </p>\n     */\n    private final FileCleaningTracker fileCleaningTracker;\n\n    /**\n     * Default content Charset to be used when no explicit Charset parameter is provided by the sender.\n     */\n    private final Charset charsetDefault;\n\n    /**\n     * Constructs a preconfigured instance of this class.\n     *\n     * @param repository          The data repository, which is the directory in which files will be created, should the item size exceed the threshold.\n     * @param threshold           The threshold, in bytes, below which items will be retained in memory and above which they will be stored as a file.\n     * @param charsetDefault      Sets the default charset for use when no explicit charset parameter is provided by the sender.\n     * @param fileCleaningTracker Callback to track files created, or null (default) to disable tracking.\n     */\n    private DiskFileItemFactory(final Path repository, final int threshold, final Charset charsetDefault, final FileCleaningTracker fileCleaningTracker) {\n        this.threshold = threshold;\n        this.repository = repository;\n        this.charsetDefault = charsetDefault;\n        this.fileCleaningTracker = fileCleaningTracker;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public DiskFileItem.Builder fileItemBuilder() {\n        // @formatter:off\n        return DiskFileItem.builder()\n                .setBufferSize(threshold)\n                .setCharset(charsetDefault)\n                .setFileCleaningTracker(fileCleaningTracker)\n                .setPath(repository);\n        // @formatter:on\n    }\n\n    /**\n     * Gets the default charset for use when no explicit charset parameter is provided by the sender.\n     *\n     * @return the default charset\n     */\n    public Charset getCharsetDefault() {\n        return charsetDefault;\n    }\n\n    /**\n     * Gets the tracker, which is responsible for deleting temporary files.\n     *\n     * @return An instance of {@link FileCleaningTracker}, or null (default), if temporary files aren't tracked.\n     */\n    public FileCleaningTracker getFileCleaningTracker() {\n        return fileCleaningTracker;\n    }\n\n    /**\n     * Gets the directory used to temporarily store files that are larger than the configured size threshold.\n     *\n     * @return The directory in which temporary files will be located.\n     */\n    public Path getRepository() {\n        return repository;\n    }\n\n    /**\n     * Gets the size threshold beyond which files are written directly to disk. The default value is {@value #DEFAULT_THRESHOLD} bytes.\n     *\n     * @return The size threshold in bytes.\n     */\n    public int getThreshold() {\n        return threshold;\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/AbstractRequestContext.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 56
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.fileupload2.core;\n\nimport java.util.function.Function;\nimport java.util.function.LongSupplier;\n\npublic abstract class AbstractRequestContext<T> implements RequestContext {\n\n    /**\n     * Supplies the content length default.\n     */\n    private final LongSupplier contentLengthDefault;\n\n    /**\n     * Supplies the content length string.\n     */\n    private final Function<String, String> contentLengthString;\n\n    /**\n     * The request.\n     */\n    private final T request;\n\n    /**\n     * Constructs a new instance.\n     *\n     * @param contentLengthString  How to get the content length string.\n     * @param contentLengthDefault How to get the content length default.\n     * @param request              TODO\n     */\n    protected AbstractRequestContext(final Function<String, String> contentLengthString, final LongSupplier contentLengthDefault, final T request) {\n        this.contentLengthString = contentLengthString;\n        this.contentLengthDefault = contentLengthDefault;\n        this.request = request;\n    }\n\n    /**\n     * Gets the content length of the request.\n     *\n     * @return The content length of the request.\n     */\n    @Override\n    public long getContentLength() {\n        try {\n            return Long.parseLong(contentLengthString.apply(AbstractFileUpload.CONTENT_LENGTH));\n        } catch (final NumberFormatException e) {\n            return contentLengthDefault.getAsLong();\n        }\n    }\n\n    public T getRequest() {\n        return request;\n    }\n\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object.\n     */\n    @Override\n    public String toString() {\n        return String.format(\"%s [ContentLength=%s, ContentType=%s]\", getClass().getSimpleName(), getContentLength(), getContentType());\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadFileCountLimitException.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 57
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\n/**\n * Signals that a request contains more files than the specified limit.\n */\npublic class FileUploadFileCountLimitException extends FileUploadSizeException {\n\n    private static final long serialVersionUID = 2;\n\n    /**\n     * Constructs an instance.\n     *\n     * @param message The detail message (which is saved for later retrieval by the {@link #getMessage()} method)\n     * @param limit   The limit that was exceeded.\n     * @param actual  The actual value.\n     */\n    public FileUploadFileCountLimitException(final String message, final long limit, final long actual) {\n        super(message, limit, actual);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItem.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 58
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.UncheckedIOException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.CopyOption;\nimport java.nio.file.Files;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.UUID;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.apache.commons.fileupload2.core.FileItemFactory.AbstractFileItemBuilder;\nimport org.apache.commons.io.Charsets;\nimport org.apache.commons.io.build.AbstractOrigin;\nimport org.apache.commons.io.file.PathUtils;\nimport org.apache.commons.io.function.Uncheck;\nimport org.apache.commons.io.output.DeferredFileOutputStream;\n\n/**\n * The default implementation of the {@link FileItem FileItem} interface.\n * <p>\n * After retrieving an instance of this class from a {@link DiskFileItemFactory} instance (see\n * {@code org.apache.commons.fileupload2.core.servlet.ServletFileUpload\n * #parseRequest(javax.servlet.http.HttpServletRequest)}), you may either request all contents of file at once using {@link #get()} or request an\n * {@link java.io.InputStream InputStream} with {@link #getInputStream()} and process the file without attempting to load it into memory, which may come handy\n * with large files.\n * </p>\n * <p>\n * Temporary files, which are created for file items, should be deleted later on. The best way to do this is using a\n * {@link org.apache.commons.io.FileCleaningTracker}, which you can set on the {@link DiskFileItemFactory}. However, if you do use such a tracker, then you must\n * consider the following: Temporary files are automatically deleted as soon as they are no longer needed. (More precisely, when the corresponding instance of\n * {@link java.io.File} is garbage collected.) This is done by the so-called reaper thread, which is started and stopped automatically by the\n * {@link org.apache.commons.io.FileCleaningTracker} when there are files to be tracked. It might make sense to terminate that thread, for example, if your web\n * application ends. See the section on \"Resource cleanup\" in the users guide of Commons FileUpload.\n * </p>\n */\npublic final class DiskFileItem implements FileItem<DiskFileItem> {\n\n    /**\n     * Builds a new {@link DiskFileItem} instance.\n     * <p>\n     * For example:\n     * </p>\n     *\n     * <pre>{@code\n     * final FileItem fileItem = fileItemFactory.fileItemBuilder()\n     *   .setFieldName(\"FieldName\")\n     *   .setContentType(\"ContentType\")\n     *   .setFormField(true)\n     *   .setFileName(\"FileName\")\n     *   .setFileItemHeaders(...)\n     *   .get();\n     * }\n     * </pre>\n     */\n    public static class Builder extends AbstractFileItemBuilder<DiskFileItem, Builder> {\n\n        public Builder() {\n            setBufferSize(DiskFileItemFactory.DEFAULT_THRESHOLD);\n            setPath(PathUtils.getTempDirectory());\n            setCharset(DEFAULT_CHARSET);\n            setCharsetDefault(DEFAULT_CHARSET);\n        }\n\n        /**\n         * Constructs a new instance.\n         * <p>\n         * You must provide an origin that can be converted to a Reader by this builder, otherwise, this call will throw an\n         * {@link UnsupportedOperationException}.\n         * </p>\n         *\n         * @return a new instance.\n         * @throws UnsupportedOperationException if the origin cannot provide a Path.\n         * @see AbstractOrigin#getReader(Charset)\n         */\n        @Override\n        public DiskFileItem get() {\n            final var diskFileItem = new DiskFileItem(getFieldName(), getContentType(), isFormField(), getFileName(), getBufferSize(), getPath(),\n                    getFileItemHeaders(), getCharset());\n            final var tracker = getFileCleaningTracker();\n            if (tracker != null) {\n                tracker.track(diskFileItem.getTempFile().toFile(), diskFileItem);\n            }\n            return diskFileItem;\n        }\n\n    }\n\n    /**\n     * Default content charset to be used when no explicit charset parameter is provided by the sender. Media subtypes of the \"text\" type are defined to have a\n     * default charset value of \"ISO-8859-1\" when received via HTTP.\n     */\n    public static final Charset DEFAULT_CHARSET = StandardCharsets.ISO_8859_1;\n\n    /**\n     * UID used in unique file name generation.\n     */\n    private static final String UID = UUID.randomUUID().toString().replace('-', '_');\n\n    /**\n     * Counter used in unique identifier generation.\n     */\n    private static final AtomicInteger COUNTER = new AtomicInteger(0);\n\n    /**\n     * Constructs a new {@link Builder}.\n     *\n     * @return a new {@link Builder}.\n     */\n    public static Builder builder() {\n        return new Builder();\n    }\n\n    /**\n     * Tests if the file name is valid. For example, if it contains a NUL characters, it's invalid. If the file name is valid, it will be returned without any\n     * modifications. Otherwise, throw an {@link InvalidPathException}.\n     *\n     * @param fileName The file name to check\n     * @return Unmodified file name, if valid.\n     * @throws InvalidPathException The file name is invalid.\n     */\n    public static String checkFileName(final String fileName) {\n        if (fileName != null) {\n            // Specific NUL check to build a better exception message.\n            final var indexOf0 = fileName.indexOf(0);\n            if (indexOf0 != -1) {\n                final var sb = new StringBuilder();\n                for (var i = 0; i < fileName.length(); i++) {\n                    final var c = fileName.charAt(i);\n                    switch (c) {\n                    case 0:\n                        sb.append(\"\\\\0\");\n                        break;\n                    default:\n                        sb.append(c);\n                        break;\n                    }\n                }\n                throw new InvalidPathException(fileName, sb.toString(), indexOf0);\n            }\n            // Throws InvalidPathException on invalid file names\n            Paths.get(fileName);\n        }\n        return fileName;\n    }\n\n    /**\n     * Gets an identifier that is unique within the class loader used to load this class, but does not have random-like appearance.\n     *\n     * @return A String with the non-random looking instance identifier.\n     */\n    private static String getUniqueId() {\n        final var limit = 100_000_000;\n        final var current = COUNTER.getAndIncrement();\n        var id = Integer.toString(current);\n\n        // If you manage to get more than 100 million of ids, you'll\n        // start getting ids longer than 8 characters.\n        if (current < limit) {\n            id = (\"00000000\" + id).substring(id.length());\n        }\n        return id;\n    }\n\n    /**\n     * The name of the form field as provided by the browser.\n     */\n    private String fieldName;\n\n    /**\n     * The content type passed by the browser, or {@code null} if not defined.\n     */\n    private final String contentType;\n\n    /**\n     * Whether or not this item is a simple form field.\n     */\n    private boolean isFormField;\n\n    /**\n     * The original file name in the user's file system.\n     */\n    private final String fileName;\n\n    /**\n     * The size of the item, in bytes. This is used to cache the size when a file item is moved from its original location.\n     */\n    private long size = -1;\n\n    /**\n     * The threshold above which uploads will be stored on disk.\n     */\n    private final int threshold;\n\n    /**\n     * The directory in which uploaded files will be stored, if stored on disk.\n     */\n    private final Path repository;\n\n    /**\n     * Cached contents of the file.\n     */\n    private byte[] cachedContent;\n\n    /**\n     * Output stream for this item.\n     */\n    private DeferredFileOutputStream dfos;\n\n    /**\n     * The temporary file to use.\n     */\n    private final Path tempFile;\n\n    /**\n     * The file items headers.\n     */\n    private FileItemHeaders fileItemHeaders;\n\n    /**\n     * Default content Charset to be used when no explicit Charset parameter is provided by the sender.\n     */\n    private Charset charsetDefault = DEFAULT_CHARSET;\n\n    /**\n     * Constructs a new {@code DiskFileItem} instance.\n     *\n     * @param fieldName       The name of the form field.\n     * @param contentType     The content type passed by the browser or {@code null} if not specified.\n     * @param isFormField     Whether or not this item is a plain form field, as opposed to a file upload.\n     * @param fileName        The original file name in the user's file system, or {@code null} if not specified.\n     * @param threshold       The threshold, in bytes, below which items will be retained in memory and above which they will be stored as a file.\n     * @param repository      The data repository, which is the directory in which files will be created, should the item size exceed the threshold.\n     * @param fileItemHeaders The file item headers.\n     * @param defaultCharset  The default Charset.\n     */\n    private DiskFileItem(final String fieldName, final String contentType, final boolean isFormField, final String fileName, final int threshold,\n            final Path repository, final FileItemHeaders fileItemHeaders, final Charset defaultCharset) {\n        this.fieldName = fieldName;\n        this.contentType = contentType;\n        this.charsetDefault = defaultCharset;\n        this.isFormField = isFormField;\n        this.fileName = fileName;\n        this.fileItemHeaders = fileItemHeaders;\n        this.threshold = threshold;\n        this.repository = repository != null ? repository : PathUtils.getTempDirectory();\n        this.tempFile = this.repository.resolve(String.format(\"upload_%s_%s.tmp\", UID, getUniqueId()));\n    }\n\n    /**\n     * Deletes the underlying storage for a file item, including deleting any associated temporary disk file. This method can be used to ensure that this is\n     * done at an earlier time, thus preserving system resources.\n     *\n     * @throws IOException if an error occurs.\n     */\n    @Override\n    public DiskFileItem delete() throws IOException {\n        cachedContent = null;\n        final var outputFile = getPath();\n        if (outputFile != null && !isInMemory() && Files.exists(outputFile)) {\n            Files.delete(outputFile);\n        }\n        return this;\n    }\n\n    /**\n     * Gets the contents of the file as an array of bytes. If the contents of the file were not yet cached in memory, they will be loaded from the disk storage\n     * and cached.\n     *\n     * @return The contents of the file as an array of bytes or {@code null} if the data cannot be read.\n     * @throws UncheckedIOException if an I/O error occurs.\n     * @throws OutOfMemoryError     See {@link Files#readAllBytes(Path)}: If an array of the required size cannot be allocated, for example the file is larger\n     *                              that {@code 2GB}\n     */\n    @Override\n    public byte[] get() throws UncheckedIOException {\n        if (isInMemory()) {\n            if (cachedContent == null && dfos != null) {\n                cachedContent = dfos.getData();\n            }\n            return cachedContent != null ? cachedContent.clone() : new byte[0];\n        }\n        return Uncheck.get(() -> Files.readAllBytes(dfos.getFile().toPath()));\n    }\n\n    /**\n     * Gets the content charset passed by the agent or {@code null} if not defined.\n     *\n     * @return The content charset passed by the agent or {@code null} if not defined.\n     */\n    public Charset getCharset() {\n        final var parser = new ParameterParser();\n        parser.setLowerCaseNames(true);\n        // Parameter parser can handle null input\n        final var params = parser.parse(getContentType(), ';');\n        return Charsets.toCharset(params.get(\"charset\"), charsetDefault);\n    }\n\n    /**\n     * Gets the default charset for use when no explicit charset parameter is provided by the sender.\n     *\n     * @return the default charset\n     */\n    public Charset getCharsetDefault() {\n        return charsetDefault;\n    }\n\n    /**\n     * Gets the content type passed by the agent or {@code null} if not defined.\n     *\n     * @return The content type passed by the agent or {@code null} if not defined.\n     */\n    @Override\n    public String getContentType() {\n        return contentType;\n    }\n\n    /**\n     * Gets the name of the field in the multipart form corresponding to this file item.\n     *\n     * @return The name of the form field.\n     * @see #setFieldName(String)\n     */\n    @Override\n    public String getFieldName() {\n        return fieldName;\n    }\n\n    /**\n     * Gets the file item headers.\n     *\n     * @return The file items headers.\n     */\n    @Override\n    public FileItemHeaders getHeaders() {\n        return fileItemHeaders;\n    }\n\n    /**\n     * Gets an {@link java.io.InputStream InputStream} that can be used to retrieve the contents of the file.\n     *\n     * @return An {@link java.io.InputStream InputStream} that can be used to retrieve the contents of the file.\n     * @throws IOException if an error occurs.\n     */\n    @Override\n    public InputStream getInputStream() throws IOException {\n        if (!isInMemory()) {\n            return Files.newInputStream(dfos.getFile().toPath());\n        }\n\n        if (cachedContent == null) {\n            cachedContent = dfos.getData();\n        }\n        return new ByteArrayInputStream(cachedContent);\n    }\n\n    /**\n     * Gets the original file name in the client's file system.\n     *\n     * @return The original file name in the client's file system.\n     * @throws InvalidPathException The file name contains a NUL character, which might be an indicator of a security attack. If you intend to use the file name\n     *                              anyways, catch the exception and use {@link InvalidPathException#getInput()}.\n     */\n    @Override\n    public String getName() {\n        return DiskFileItem.checkFileName(fileName);\n    }\n\n    /**\n     * Gets an {@link java.io.OutputStream OutputStream} that can be used for storing the contents of the file.\n     *\n     * @return An {@link java.io.OutputStream OutputStream} that can be used for storing the contents of the file.\n     */\n    @Override\n    public OutputStream getOutputStream() {\n        if (dfos == null) {\n            dfos = DeferredFileOutputStream.builder().setThreshold(threshold).setOutputFile(getTempFile().toFile()).get();\n        }\n        return dfos;\n    }\n\n    /**\n     * Gets the {@link Path} for the {@code FileItem}'s data's temporary location on the disk. Note that for {@code FileItem}s that have their data stored in\n     * memory, this method will return {@code null}. When handling large files, you can use {@link Files#move(Path,Path,CopyOption...)} to move the file to new\n     * location without copying the data, if the source and destination locations reside within the same logical volume.\n     *\n     * @return The data file, or {@code null} if the data is stored in memory.\n     */\n    public Path getPath() {\n        if (dfos == null) {\n            return null;\n        }\n        if (isInMemory()) {\n            return null;\n        }\n        return dfos.getFile().toPath();\n    }\n\n    /**\n     * Gets the size of the file.\n     *\n     * @return The size of the file, in bytes.\n     */\n    @Override\n    public long getSize() {\n        if (size >= 0) {\n            return size;\n        }\n        if (cachedContent != null) {\n            return cachedContent.length;\n        }\n        return dfos.getByteCount();\n    }\n\n    /**\n     * Gets the contents of the file as a String, using the default character encoding. This method uses {@link #get()} to retrieve the contents of the file.\n     * <p>\n     * <b>TODO</b> Consider making this method throw UnsupportedEncodingException.\n     * </p>\n     *\n     * @return The contents of the file, as a string.\n     */\n    @Override\n    public String getString() {\n        return new String(get(), getCharset());\n    }\n\n    /**\n     * Gets the contents of the file as a String, using the specified encoding. This method uses {@link #get()} to retrieve the contents of the file.\n     *\n     * @param charset The charset to use.\n     * @return The contents of the file, as a string.\n     */\n    @Override\n    public String getString(final Charset charset) throws IOException {\n        return new String(get(), Charsets.toCharset(charset, charsetDefault));\n    }\n\n    /**\n     * Creates and returns a {@link java.io.File File} representing a uniquely named temporary file in the configured repository path. The lifetime of the file\n     * is tied to the lifetime of the {@code FileItem} instance; the file will be deleted when the instance is garbage collected.\n     * <p>\n     * <b>Note: Subclasses that override this method must ensure that they return the same File each time.</b>\n     * </p>\n     *\n     * @return The {@link java.io.File File} to be used for temporary storage.\n     */\n    protected Path getTempFile() {\n        return tempFile;\n    }\n\n    /**\n     * Tests whether or not a {@code FileItem} instance represents a simple form field.\n     *\n     * @return {@code true} if the instance represents a simple form field; {@code false} if it represents an uploaded file.\n     * @see #setFormField(boolean)\n     */\n    @Override\n    public boolean isFormField() {\n        return isFormField;\n    }\n\n    /**\n     * Provides a hint as to whether or not the file contents will be read from memory.\n     *\n     * @return {@code true} if the file contents will be read from memory; {@code false} otherwise.\n     */\n    @Override\n    public boolean isInMemory() {\n        if (cachedContent != null) {\n            return true;\n        }\n        return dfos.isInMemory();\n    }\n\n    /**\n     * Sets the default charset for use when no explicit charset parameter is provided by the sender.\n     *\n     * @param charset the default charset\n     * @return this\n     */\n    public DiskFileItem setCharsetDefault(final Charset charset) {\n        charsetDefault = charset;\n        return this;\n    }\n\n    /**\n     * Sets the field name used to reference this file item.\n     *\n     * @param fieldName The name of the form field.\n     * @see #getFieldName()\n     */\n    @Override\n    public DiskFileItem setFieldName(final String fieldName) {\n        this.fieldName = fieldName;\n        return this;\n    }\n\n    /**\n     * Specifies whether or not a {@code FileItem} instance represents a simple form field.\n     *\n     * @param state {@code true} if the instance represents a simple form field; {@code false} if it represents an uploaded file.\n     * @see #isFormField()\n     */\n    @Override\n    public DiskFileItem setFormField(final boolean state) {\n        isFormField = state;\n        return this;\n    }\n\n    /**\n     * Sets the file item headers.\n     *\n     * @param headers The file items headers.\n     */\n    @Override\n    public DiskFileItem setHeaders(final FileItemHeaders headers) {\n        this.fileItemHeaders = headers;\n        return this;\n    }\n\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object.\n     */\n    @Override\n    public String toString() {\n        return String.format(\"name=%s, StoreLocation=%s, size=%s bytes, isFormField=%s, FieldName=%s\", getName(), getPath(), getSize(), isFormField(),\n                getFieldName());\n    }\n\n    /**\n     * Writes an uploaded item to disk.\n     * <p>\n     * The client code is not concerned with whether or not the item is stored in memory, or on disk in a temporary location. They just want to write the\n     * uploaded item to a file.\n     * </p>\n     * <p>\n     * This implementation first attempts to rename the uploaded item to the specified destination file, if the item was originally written to disk. Otherwise,\n     * the data will be copied to the specified file.\n     * </p>\n     * <p>\n     * This method is only guaranteed to work <em>once</em>, the first time it is invoked for a particular item. This is because, in the event that the method\n     * renames a temporary file, that file will no longer be available to copy or rename again at a later time.\n     * </p>\n     *\n     * @param file The {@code File} into which the uploaded item should be stored.\n     * @throws IOException if an error occurs.\n     */\n    @Override\n    public DiskFileItem write(final Path file) throws IOException {\n        if (isInMemory()) {\n            try (var fout = Files.newOutputStream(file)) {\n                fout.write(get());\n            } catch (final IOException e) {\n                throw new IOException(\"Unexpected output data\", e);\n            }\n        } else {\n            final var outputFile = getPath();\n            if (outputFile == null) {\n                /*\n                 * For whatever reason we cannot write the file to disk.\n                 */\n                throw new FileUploadException(\"Cannot write uploaded file to disk.\");\n            }\n            // Save the length of the file\n            size = Files.size(outputFile);\n            //\n            // The uploaded file is being stored on disk in a temporary location so move it to the desired file.\n            //\n            Files.move(outputFile, file, StandardCopyOption.REPLACE_EXISTING);\n        }\n        return this;\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/ParameterParser.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 59
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\n/**\n * A simple parser intended to parse sequences of name/value pairs.\n * <p>\n * Parameter values are expected to be enclosed in quotes if they contain unsafe characters, such as '=' characters or separators. Parameter values are optional\n * and can be omitted.\n * </p>\n * <p>\n * {@code param1 = value; param2 = \"anything goes; really\"; param3}\n * </p>\n */\npublic class ParameterParser {\n\n    /**\n     * String to be parsed.\n     */\n    private char[] chars = null;\n\n    /**\n     * Current position in the string.\n     */\n    private int pos = 0;\n\n    /**\n     * Maximum position in the string.\n     */\n    private int len = 0;\n\n    /**\n     * Start of a token.\n     */\n    private int i1 = 0;\n\n    /**\n     * End of a token.\n     */\n    private int i2 = 0;\n\n    /**\n     * Whether names stored in the map should be converted to lower case.\n     */\n    private boolean lowerCaseNames = false;\n\n    /**\n     * Default ParameterParser constructor.\n     */\n    public ParameterParser() {\n    }\n\n    /**\n     * A helper method to process the parsed token. This method removes leading and trailing blanks as well as enclosing quotation marks, when necessary.\n     *\n     * @param quoted {@code true} if quotation marks are expected, {@code false} otherwise.\n     * @return the token\n     */\n    private String getToken(final boolean quoted) {\n        // Trim leading white spaces\n        while (i1 < i2 && Character.isWhitespace(chars[i1])) {\n            i1++;\n        }\n        // Trim trailing white spaces\n        while (i2 > i1 && Character.isWhitespace(chars[i2 - 1])) {\n            i2--;\n        }\n        // Strip away quotation marks if necessary\n        if (quoted && i2 - i1 >= 2 && chars[i1] == '\"' && chars[i2 - 1] == '\"') {\n            i1++;\n            i2--;\n        }\n        String result = null;\n        if (i2 > i1) {\n            result = new String(chars, i1, i2 - i1);\n        }\n        return result;\n    }\n\n    /**\n     * Tests if there any characters left to parse.\n     *\n     * @return {@code true} if there are unparsed characters, {@code false} otherwise.\n     */\n    private boolean hasChar() {\n        return this.pos < this.len;\n    }\n\n    /**\n     * Tests {@code true} if parameter names are to be converted to lower case when name/value pairs are parsed.\n     *\n     * @return {@code true} if parameter names are to be converted to lower case when name/value pairs are parsed. Otherwise returns {@code false}\n     */\n    public boolean isLowerCaseNames() {\n        return this.lowerCaseNames;\n    }\n\n    /**\n     * Tests if the given character is present in the array of characters.\n     *\n     * @param ch      the character to test for presence in the array of characters\n     * @param charray the array of characters to test against\n     * @return {@code true} if the character is present in the array of characters, {@code false} otherwise.\n     */\n    private boolean isOneOf(final char ch, final char[] charray) {\n        var result = false;\n        for (final char element : charray) {\n            if (ch == element) {\n                result = true;\n                break;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Parses a map of name/value pairs from the given array of characters. Names are expected to be unique.\n     *\n     * @param charArray the array of characters that contains a sequence of name/value pairs\n     * @param separator the name/value pairs separator\n     * @return a map of name/value pairs\n     */\n    public Map<String, String> parse(final char[] charArray, final char separator) {\n        if (charArray == null) {\n            return new HashMap<>();\n        }\n        return parse(charArray, 0, charArray.length, separator);\n    }\n\n    /**\n     * Parses a map of name/value pairs from the given array of characters. Names are expected to be unique.\n     *\n     * @param charArray the array of characters that contains a sequence of name/value pairs\n     * @param offset    - the initial offset.\n     * @param length    - the length.\n     * @param separator the name/value pairs separator\n     * @return a map of name/value pairs\n     */\n    public Map<String, String> parse(final char[] charArray, final int offset, final int length, final char separator) {\n\n        if (charArray == null) {\n            return new HashMap<>();\n        }\n        final var params = new HashMap<String, String>();\n        this.chars = charArray.clone();\n        this.pos = offset;\n        this.len = length;\n\n        String paramName;\n        String paramValue;\n        while (hasChar()) {\n            paramName = parseToken(new char[] { '=', separator });\n            paramValue = null;\n            if (hasChar() && charArray[pos] == '=') {\n                pos++; // skip '='\n                paramValue = parseQuotedToken(new char[] { separator });\n\n                if (paramValue != null) {\n                    try {\n                        paramValue = RFC2231Utils.hasEncodedValue(paramName) ? RFC2231Utils.decodeText(paramValue) : MimeUtils.decodeText(paramValue);\n                    } catch (final UnsupportedEncodingException ignored) {\n                        // let's keep the original value in this case\n                    }\n                }\n            }\n            if (hasChar() && charArray[pos] == separator) {\n                pos++; // skip separator\n            }\n            if (paramName != null && !paramName.isEmpty()) {\n                paramName = RFC2231Utils.stripDelimiter(paramName);\n                if (this.lowerCaseNames) {\n                    paramName = paramName.toLowerCase(Locale.ENGLISH);\n                }\n                params.put(paramName, paramValue);\n            }\n        }\n        return params;\n    }\n\n    /**\n     * Parses a map of name/value pairs from the given string. Names are expected to be unique.\n     *\n     * @param str       the string that contains a sequence of name/value pairs\n     * @param separator the name/value pairs separator\n     * @return a map of name/value pairs\n     */\n    public Map<String, String> parse(final String str, final char separator) {\n        if (str == null) {\n            return new HashMap<>();\n        }\n        return parse(str.toCharArray(), separator);\n    }\n\n    /**\n     * Parses a map of name/value pairs from the given string. Names are expected to be unique. Multiple separators may be specified and the earliest found in\n     * the input string is used.\n     *\n     * @param str        the string that contains a sequence of name/value pairs\n     * @param separators the name/value pairs separators\n     * @return a map of name/value pairs\n     */\n    public Map<String, String> parse(final String str, final char[] separators) {\n        if (separators == null || separators.length == 0) {\n            return new HashMap<>();\n        }\n        var separator = separators[0];\n        if (str != null) {\n            var idx = str.length();\n            for (final char separator2 : separators) {\n                final var tmp = str.indexOf(separator2);\n                if (tmp != -1 && tmp < idx) {\n                    idx = tmp;\n                    separator = separator2;\n                }\n            }\n        }\n        return parse(str, separator);\n    }\n\n    /**\n     * Parses out a token until any of the given terminators is encountered outside the quotation marks.\n     *\n     * @param terminators the array of terminating characters. Any of these characters when encountered outside the quotation marks signify the end of the token\n     * @return the token\n     */\n    private String parseQuotedToken(final char[] terminators) {\n        char ch;\n        i1 = pos;\n        i2 = pos;\n        var quoted = false;\n        var charEscaped = false;\n        while (hasChar()) {\n            ch = chars[pos];\n            if (!quoted && isOneOf(ch, terminators)) {\n                break;\n            }\n            if (!charEscaped && ch == '\"') {\n                quoted = !quoted;\n            }\n            charEscaped = !charEscaped && ch == '\\\\';\n            i2++;\n            pos++;\n\n        }\n        return getToken(true);\n    }\n\n    /**\n     * Parses out a token until any of the given terminators is encountered.\n     *\n     * @param terminators the array of terminating characters. Any of these characters when encountered signify the end of the token\n     * @return the token\n     */\n    private String parseToken(final char[] terminators) {\n        char ch;\n        i1 = pos;\n        i2 = pos;\n        while (hasChar()) {\n            ch = chars[pos];\n            if (isOneOf(ch, terminators)) {\n                break;\n            }\n            i2++;\n            pos++;\n        }\n        return getToken(false);\n    }\n\n    /**\n     * Sets the flag if parameter names are to be converted to lower case when name/value pairs are parsed.\n     *\n     * @param lowerCaseNames {@code true} if parameter names are to be converted to lower case when name/value pairs are parsed. {@code false} otherwise.\n     */\n    public void setLowerCaseNames(final boolean lowerCaseNames) {\n        this.lowerCaseNames = lowerCaseNames;\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadByteCountLimitException.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 60
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\n/**\n * Signals that a file size exceeds the configured maximum.\n */\npublic class FileUploadByteCountLimitException extends FileUploadSizeException {\n\n    /**\n     * The exceptions UID, for serializing an instance.\n     */\n    private static final long serialVersionUID = 2;\n\n    /**\n     * File name of the item, which caused the exception.\n     */\n    private final String fileName;\n\n    /**\n     * Field name of the item, which caused the exception.\n     */\n    private final String fieldName;\n\n    /**\n     * Constructs an instance with the specified detail message, and actual and permitted sizes.\n     *\n     * @param message   The detail message (which is saved for later retrieval by the {@link #getMessage()} method)\n     * @param actual    The actual request size.\n     * @param permitted The maximum permitted request size.\n     * @param fileName  File name of the item, which caused the exception.\n     * @param fieldName Field name of the item, which caused the exception.\n     */\n    public FileUploadByteCountLimitException(final String message, final long actual, final long permitted, final String fileName, final String fieldName) {\n        super(message, permitted, actual);\n        this.fileName = fileName;\n        this.fieldName = fieldName;\n    }\n\n    /**\n     * Gets the field name of the item, which caused the exception.\n     *\n     * @return Field name, if known, or null.\n     */\n    public String getFieldName() {\n        return fieldName;\n    }\n\n    /**\n     * Gets the file name of the item, which caused the exception.\n     *\n     * @return File name, if known, or null.\n     */\n    public String getFileName() {\n        return fileName;\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/QuotedPrintableDecoder.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 61
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n/**\n */\nfinal class QuotedPrintableDecoder {\n\n    /**\n     * The shift value required to create the upper nibble from the first of 2 byte values converted from ascii hex.\n     */\n    private static final int UPPER_NIBBLE_SHIFT = Byte.SIZE / 2;\n\n    /**\n     * Decodes the encoded byte data writing it to the given output stream.\n     *\n     * @param data The array of byte data to decode.\n     * @param out  The output stream used to return the decoded data.\n     *\n     * @return the number of bytes produced.\n     * @throws IOException if an IO error occurs\n     */\n    public static int decode(final byte[] data, final OutputStream out) throws IOException {\n        var off = 0;\n        final var length = data.length;\n        final var endOffset = off + length;\n        var bytesWritten = 0;\n\n        while (off < endOffset) {\n            final var ch = data[off++];\n\n            // space characters were translated to '_' on encode, so we need to translate them back.\n            if (ch == '_') {\n                out.write(' ');\n            } else if (ch == '=') {\n                // we found an encoded character. Reduce the 3 char sequence to one.\n                // but first, make sure we have two characters to work with.\n                if (off + 1 >= endOffset) {\n                    throw new IOException(\"Invalid quoted printable encoding; truncated escape sequence\");\n                }\n\n                final var b1 = data[off++];\n                final var b2 = data[off++];\n\n                // we've found an encoded carriage return. The next char needs to be a newline\n                if (b1 == '\\r') {\n                    if (b2 != '\\n') {\n                        throw new IOException(\"Invalid quoted printable encoding; CR must be followed by LF\");\n                    }\n                    // this was a soft linebreak inserted by the encoding. We just toss this away\n                    // on decode.\n                } else {\n                    // this is a hex pair we need to convert back to a single byte.\n                    final var c1 = hexToBinary(b1);\n                    final var c2 = hexToBinary(b2);\n                    out.write(c1 << UPPER_NIBBLE_SHIFT | c2);\n                    // 3 bytes in, one byte out\n                    bytesWritten++;\n                }\n            } else {\n                // simple character, just write it out.\n                out.write(ch);\n                bytesWritten++;\n            }\n        }\n\n        return bytesWritten;\n    }\n\n    /**\n     * Converts a hex digit to the binary value it represents.\n     *\n     * @param b the ascii hex byte to convert (0-0, A-F, a-f)\n     * @return the int value of the hex byte, 0-15\n     * @throws IOException if the byte is not a valid hex digit.\n     */\n    private static int hexToBinary(final byte b) throws IOException {\n        // CHECKSTYLE IGNORE MagicNumber FOR NEXT 1 LINE\n        final var i = Character.digit((char) b, 16);\n        if (i == -1) {\n            throw new IOException(\"Invalid quoted printable encoding: not a valid hex digit: \" + b);\n        }\n        return i;\n    }\n\n    /**\n     * Hidden constructor, this class must not be instantiated.\n     */\n    private QuotedPrintableDecoder() {\n        // do nothing\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemHeaders.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 62
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.util.Iterator;\n\n/**\n * This class provides support for accessing the headers for a file or form item that was received within a {@code multipart/form-data} POST request.\n */\npublic interface FileItemHeaders {\n\n    /**\n     * Adds a header.\n     *\n     * @param name  name\n     * @param value value.\n     */\n    void addHeader(String name, String value);\n\n    /**\n     * Gets the value of the specified part header as a {@code String}.\n     * <p>\n     * If the part did not include a header of the specified name, this method return {@code null}. If there are multiple headers with the same name, this\n     * method returns the first header in the item. The header name is case insensitive.\n     * </p>\n     *\n     * @param name a {@code String} specifying the header name\n     * @return a {@code String} containing the value of the requested header, or {@code null} if the item does not have a header of that name\n     */\n    String getHeader(String name);\n\n    /**\n     * Gets an {@code Iterator} of all the header names.\n     *\n     * @return an {@code Iterator} containing all of the names of headers provided with this file item. If the item does not have any headers return an empty\n     *         {@code Iterator}\n     */\n    Iterator<String> getHeaderNames();\n\n    /**\n     * Gets all the values of the specified item header as an {@code Iterator} of {@code String} objects.\n     * <p>\n     * If the item did not include any headers of the specified name, this method returns an empty {@code Iterator}. The header name is case insensitive.\n     * </p>\n     *\n     * @param name a {@code String} specifying the header name\n     * @return an {@code Iterator} containing the values of the requested header. If the item does not have any headers of that name, return an empty\n     *         {@code Iterator}\n     */\n    Iterator<String> getHeaders(String name);\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItem.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 63
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.UncheckedIOException;\nimport java.nio.charset.Charset;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.Path;\n\n/**\n * <p>\n * This class represents a file or form item that was received within a {@code multipart/form-data} POST request.\n * </p>\n * <p>\n * After retrieving an instance of this class from a {@link AbstractFileUpload FileUpload} instance (see\n * {@code org.apache.commons.fileupload2.core.servlet.ServletFileUpload #parseRequest(javax.servlet.http.HttpServletRequest)}), you may either request all\n * contents of the file at once using {@link #get()} or request an {@link InputStream} with {@link #getInputStream()} and process the file without attempting to\n * load it into memory, which may come handy with large files.\n * </p>\n * <p>\n * While this interface does not extend {@code javax.activation.DataSource} (to avoid a seldom used dependency), several of the defined methods are specifically\n * defined with the same signatures as methods in that interface. This allows an implementation of this interface to also implement\n * {@code javax.activation.DataSource} with minimal additional work.\n * </p>\n *\n * @param <F> The FileItem type.\n */\npublic interface FileItem<F extends FileItem<F>> extends FileItemHeadersProvider<F> {\n\n    /**\n     * Deletes the underlying storage for a file item, including deleting any associated temporary disk file. Use this method to ensure that this is done at an\n     * earlier time, to preserve resources.\n     *\n     * @return this\n     * @throws IOException if an error occurs.\n     */\n    F delete() throws IOException;\n\n    /**\n     * Gets the contents of the file item as a byte array.\n     *\n     * @return The contents of the file item as a byte array.\n     *\n     * @throws UncheckedIOException if an I/O error occurs\n     */\n    byte[] get() throws UncheckedIOException;\n\n    /**\n     * Gets the content type passed by the browser or {@code null} if not defined.\n     *\n     * @return The content type passed by the browser or {@code null} if not defined.\n     */\n    String getContentType();\n\n    /**\n     * Gets the name of the field in the multipart form corresponding to this file item.\n     *\n     * @return The name of the form field.\n     */\n    String getFieldName();\n\n    /**\n     * Gets an {@link java.io.InputStream InputStream} that can be used to retrieve the contents of the file.\n     *\n     * @return An {@link java.io.InputStream InputStream} that can be used to retrieve the contents of the file.\n     *\n     * @throws IOException if an error occurs.\n     */\n    InputStream getInputStream() throws IOException;\n\n    /**\n     * Gets the original file name in the client's file system, as provided by the browser (or other client software). In most cases, this will be the base file\n     * name, without path information. However, some clients, such as the Opera browser, do include path information.\n     *\n     * @return The original file name in the client's file system.\n     * @throws InvalidPathException The file name contains a NUL character, which might be an indicator of a security attack. If you intend to use the file name\n     *                              anyways, catch the exception and use InvalidFileNameException#getName().\n     */\n    String getName();\n\n    /**\n     * Gets an {@link java.io.OutputStream OutputStream} that can be used for storing the contents of the file.\n     *\n     * @return An {@link java.io.OutputStream OutputStream} that can be used for storing the contents of the file.\n     *\n     * @throws IOException if an error occurs.\n     */\n    OutputStream getOutputStream() throws IOException;\n\n    /**\n     * Gets the size of the file item.\n     *\n     * @return The size of the file item, in bytes.\n     */\n    long getSize();\n\n    /**\n     * Gets the contents of the file item as a String, using the default character encoding. This method uses {@link #get()} to retrieve the contents of the\n     * item.\n     *\n     * @return The contents of the item, as a string.\n     */\n    String getString();\n\n    /**\n     * Gets the contents of the file item as a String, using the specified encoding. This method uses {@link #get()} to retrieve the contents of the item.\n     *\n     * @param toCharset The character encoding to use.\n     *\n     * @return The contents of the item, as a string.\n     *\n     * @throws IOException if an I/O error occurs\n     */\n    String getString(Charset toCharset) throws IOException;\n\n    /**\n     * Tests whether or not a {@code FileItem} instance represents a simple form field.\n     *\n     * @return {@code true} if the instance represents a simple form field; {@code false} if it represents an uploaded file.\n     */\n    boolean isFormField();\n\n    /**\n     * Tests a hint as to whether or not the file contents will be read from memory.\n     *\n     * @return {@code true} if the file contents will be read from memory; {@code false} otherwise.\n     */\n    boolean isInMemory();\n\n    /**\n     * Sets the field name used to reference this file item.\n     *\n     * @param name The name of the form field.\n     * @return this\n     */\n    F setFieldName(String name);\n\n    /**\n     * Sets whether or not a {@code FileItem} instance represents a simple form field.\n     *\n     * @param state {@code true} if the instance represents a simple form field; {@code false} if it represents an uploaded file.\n     * @return this\n     */\n    F setFormField(boolean state);\n\n    /**\n     * Writes an uploaded item to disk.\n     * <p>\n     * The client code is not concerned with whether or not the item is stored in memory, or on disk in a temporary location. They just want to write the\n     * uploaded item to a file.\n     * </p>\n     * <p>\n     * This method is not guaranteed to succeed if called more than once for the same item. This allows a particular implementation to use, for example, file\n     * renaming, where possible, rather than copying all of the underlying data, thus gaining a significant performance benefit.\n     * </p>\n     *\n     * @param file The {@code File} into which the uploaded item should be stored.\n     * @throws IOException if an error occurs.\n     * @return this\n     */\n    F write(Path file) throws IOException;\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInputImpl.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 64
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.file.InvalidPathException;\n\nimport org.apache.commons.io.input.BoundedInputStream;\n\n/**\n * Default implementation of {@link FileItemInput}.\n */\nclass FileItemInputImpl implements FileItemInput {\n\n    /**\n     * The File Item iterator implementation.\n     *\n     * @see FileItemInputIteratorImpl\n     */\n    private final FileItemInputIteratorImpl fileItemInputIteratorImpl;\n\n    /**\n     * The file items content type.\n     */\n    private final String contentType;\n\n    /**\n     * The file items field name.\n     */\n    private final String fieldName;\n\n    /**\n     * The file items file name.\n     */\n    private final String fileName;\n\n    /**\n     * Whether the file item is a form field.\n     */\n    private final boolean formField;\n\n    /**\n     * The file items input stream.\n     */\n    private final InputStream inputStream;\n\n    /**\n     * The file items input stream closed flag.\n     */\n    private boolean inputStreamClosed;\n\n    /**\n     * The headers, if any.\n     */\n    private FileItemHeaders headers;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param fileItemIterator The {@link FileItemInputIteratorImpl iterator}, which returned this file item.\n     * @param fileName         The items file name, or null.\n     * @param fieldName        The items field name.\n     * @param contentType      The items content type, or null.\n     * @param formField        Whether the item is a form field.\n     * @param contentLength    The items content length, if known, or -1\n     * @throws IOException         Creating the file item failed.\n     * @throws FileUploadException Parsing the incoming data stream failed.\n     */\n    FileItemInputImpl(final FileItemInputIteratorImpl fileItemIterator, final String fileName, final String fieldName, final String contentType,\n            final boolean formField, final long contentLength) throws FileUploadException, IOException {\n        this.fileItemInputIteratorImpl = fileItemIterator;\n        this.fileName = fileName;\n        this.fieldName = fieldName;\n        this.contentType = contentType;\n        this.formField = formField;\n        final var fileSizeMax = fileItemInputIteratorImpl.getFileSizeMax();\n        if (fileSizeMax != -1 && contentLength != -1 && contentLength > fileSizeMax) {\n            throw new FileUploadByteCountLimitException(String.format(\"The field %s exceeds its maximum permitted size of %s bytes.\", fieldName, fileSizeMax),\n                    contentLength, fileSizeMax, fileName, fieldName);\n        }\n        // OK to construct stream now\n        final var itemInputStream = fileItemInputIteratorImpl.getMultiPartInput().newInputStream();\n        InputStream istream = itemInputStream;\n        if (fileSizeMax != -1) {\n            istream = new BoundedInputStream(istream, fileSizeMax) {\n                @Override\n                protected void onMaxLength(final long sizeMax, final long count) throws IOException {\n                    itemInputStream.close(true);\n                    throw new FileUploadByteCountLimitException(\n                            String.format(\"The field %s exceeds its maximum permitted size of %s bytes.\", fieldName, sizeMax), count, sizeMax, fileName,\n                            fieldName);\n                }\n            };\n        }\n        this.inputStream = istream;\n    }\n\n    /**\n     * Closes the file item.\n     *\n     * @throws IOException An I/O error occurred.\n     */\n    public void close() throws IOException {\n        inputStream.close();\n        inputStreamClosed = true;\n    }\n\n    /**\n     * Gets the content type, or null.\n     *\n     * @return Content type, if known, or null.\n     */\n    @Override\n    public String getContentType() {\n        return contentType;\n    }\n\n    /**\n     * Gets the items field name.\n     *\n     * @return Field name.\n     */\n    @Override\n    public String getFieldName() {\n        return fieldName;\n    }\n\n    /**\n     * Gets the headers.\n     *\n     * @return The items header object\n     */\n    @Override\n    public FileItemHeaders getHeaders() {\n        return headers;\n    }\n\n    /**\n     * Gets the input stream, which may be used to read the items contents.\n     *\n     * @return Opened input stream.\n     * @throws IOException An I/O error occurred.\n     */\n    @Override\n    public InputStream getInputStream() throws IOException {\n        if (inputStreamClosed) {\n            throw new FileItemInput.ItemSkippedException(\"getInputStream()\");\n        }\n        return inputStream;\n    }\n\n    /**\n     * Gets the file name.\n     *\n     * @return File name, if known, or null.\n     * @throws InvalidPathException The file name is invalid, for example it contains a NUL character, which might be an indicator of a security attack. If you\n     *                              intend to use the file name anyways, catch the exception and use InvalidPathException#getInput().\n     */\n    @Override\n    public String getName() {\n        return DiskFileItem.checkFileName(fileName);\n    }\n\n    /**\n     * Tests whether this is a form field.\n     *\n     * @return True, if the item is a form field, otherwise false.\n     */\n    @Override\n    public boolean isFormField() {\n        return formField;\n    }\n\n    /**\n     * Sets the file item headers.\n     *\n     * @param headers The items header object\n     */\n    @Override\n    public FileItemInputImpl setHeaders(final FileItemHeaders headers) {\n        this.headers = headers;\n        return this;\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemHeadersProvider.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 65
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\n/**\n * Provides access to headers.\n *\n * @param <T> The FileItemHeadersProvider type.\n * @see FileItem\n * @see FileItemInput\n */\npublic interface FileItemHeadersProvider<T extends FileItemHeadersProvider<T>> {\n\n    /**\n     * Gets the collection of headers defined locally within this item.\n     *\n     * @return the {@link FileItemHeaders} present for this item.\n     */\n    FileItemHeaders getHeaders();\n\n    /**\n     * Sets the headers read from within an item. Implementations of {@link FileItem} or {@link FileItemInput} should implement this interface to be able to get\n     * the raw headers found within the item header block.\n     *\n     * @param headers the instance that holds onto the headers for this instance.\n     * @return this\n     */\n    T setHeaders(FileItemHeaders headers);\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInputIteratorImpl.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 66
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Iterator;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.Objects;\n\nimport org.apache.commons.io.Charsets;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.input.BoundedInputStream;\n\n/**\n * The iterator returned by {@link AbstractFileUpload#getItemIterator(RequestContext)}.\n */\nclass FileItemInputIteratorImpl implements FileItemInputIterator {\n\n    /**\n     * The file uploads processing utility.\n     *\n     * @see AbstractFileUpload\n     */\n    private final AbstractFileUpload<?, ?, ?> fileUpload;\n\n    /**\n     * The request context.\n     *\n     * @see RequestContext\n     */\n    private final RequestContext requestContext;\n\n    /**\n     * The maximum allowed size of a complete request.\n     */\n    private long sizeMax;\n\n    /**\n     * The maximum allowed size of a single uploaded file.\n     */\n    private long fileSizeMax;\n\n    /**\n     * The multi part stream to process.\n     */\n    private MultipartInput multiPartInput;\n\n    /**\n     * The notifier, which used for triggering the {@link ProgressListener}.\n     */\n    private MultipartInput.ProgressNotifier progressNotifier;\n\n    /**\n     * The boundary, which separates the various parts.\n     */\n    private byte[] multiPartBoundary;\n\n    /**\n     * The item, which we currently process.\n     */\n    private FileItemInputImpl currentItem;\n\n    /**\n     * The current items field name.\n     */\n    private String currentFieldName;\n\n    /**\n     * Whether we are currently skipping the preamble.\n     */\n    private boolean skipPreamble;\n\n    /**\n     * Whether the current item may still be read.\n     */\n    private boolean itemValid;\n\n    /**\n     * Whether we have seen the end of the file.\n     */\n    private boolean eof;\n\n    /**\n     * Constructs a new instance.\n     *\n     * @param fileUploadBase Main processor.\n     * @param requestContext The request context.\n     * @throws FileUploadException An error occurred while parsing the request.\n     * @throws IOException         An I/O error occurred.\n     */\n    FileItemInputIteratorImpl(final AbstractFileUpload<?, ?, ?> fileUploadBase, final RequestContext requestContext) throws FileUploadException, IOException {\n        this.fileUpload = fileUploadBase;\n        this.sizeMax = fileUploadBase.getSizeMax();\n        this.fileSizeMax = fileUploadBase.getFileSizeMax();\n        this.requestContext = Objects.requireNonNull(requestContext, \"requestContext\");\n        this.skipPreamble = true;\n        findNextItem();\n    }\n\n    /**\n     * Finds the next item, if any.\n     *\n     * @return True, if an next item was found, otherwise false.\n     * @throws IOException An I/O error occurred.\n     */\n    private boolean findNextItem() throws FileUploadException, IOException {\n        if (eof) {\n            return false;\n        }\n        if (currentItem != null) {\n            currentItem.close();\n            currentItem = null;\n        }\n        final var multi = getMultiPartInput();\n        for (;;) {\n            final boolean nextPart;\n            if (skipPreamble) {\n                nextPart = multi.skipPreamble();\n            } else {\n                nextPart = multi.readBoundary();\n            }\n            if (!nextPart) {\n                if (currentFieldName == null) {\n                    // Outer multipart terminated -> No more data\n                    eof = true;\n                    return false;\n                }\n                // Inner multipart terminated -> Return to parsing the outer\n                multi.setBoundary(multiPartBoundary);\n                currentFieldName = null;\n                continue;\n            }\n            final var headers = fileUpload.getParsedHeaders(multi.readHeaders());\n            if (currentFieldName == null) {\n                // We're parsing the outer multipart\n                final var fieldName = fileUpload.getFieldName(headers);\n                if (fieldName != null) {\n                    final var subContentType = headers.getHeader(AbstractFileUpload.CONTENT_TYPE);\n                    if (subContentType != null && subContentType.toLowerCase(Locale.ENGLISH).startsWith(AbstractFileUpload.MULTIPART_MIXED)) {\n                        currentFieldName = fieldName;\n                        // Multiple files associated with this field name\n                        final var subBoundary = fileUpload.getBoundary(subContentType);\n                        multi.setBoundary(subBoundary);\n                        skipPreamble = true;\n                        continue;\n                    }\n                    final var fileName = fileUpload.getFileName(headers);\n                    currentItem = new FileItemInputImpl(this, fileName, fieldName, headers.getHeader(AbstractFileUpload.CONTENT_TYPE), fileName == null,\n                            getContentLength(headers));\n                    currentItem.setHeaders(headers);\n                    progressNotifier.noteItem();\n                    itemValid = true;\n                    return true;\n                }\n            } else {\n                final var fileName = fileUpload.getFileName(headers);\n                if (fileName != null) {\n                    currentItem = new FileItemInputImpl(this, fileName, currentFieldName, headers.getHeader(AbstractFileUpload.CONTENT_TYPE), false,\n                            getContentLength(headers));\n                    currentItem.setHeaders(headers);\n                    progressNotifier.noteItem();\n                    itemValid = true;\n                    return true;\n                }\n            }\n            multi.discardBodyData();\n        }\n    }\n\n    private long getContentLength(final FileItemHeaders headers) {\n        try {\n            return Long.parseLong(headers.getHeader(AbstractFileUpload.CONTENT_LENGTH));\n        } catch (final Exception e) {\n            return -1;\n        }\n    }\n\n    @Override\n    public long getFileSizeMax() {\n        return fileSizeMax;\n    }\n\n    public MultipartInput getMultiPartInput() throws FileUploadException, IOException {\n        if (multiPartInput == null) {\n            init(fileUpload, requestContext);\n        }\n        return multiPartInput;\n    }\n\n    @Override\n    public long getSizeMax() {\n        return sizeMax;\n    }\n\n    /**\n     * Tests whether another instance of {@link FileItemInput} is available.\n     *\n     * @throws FileUploadException Parsing or processing the file item failed.\n     * @throws IOException         Reading the file item failed.\n     * @return True, if one or more additional file items are available, otherwise false.\n     */\n    @Override\n    public boolean hasNext() throws IOException {\n        if (eof) {\n            return false;\n        }\n        if (itemValid) {\n            return true;\n        }\n        return findNextItem();\n    }\n\n    protected void init(final AbstractFileUpload<?, ?, ?> fileUploadBase, final RequestContext initContext) throws FileUploadException, IOException {\n        final var contentType = requestContext.getContentType();\n        if (null == contentType || !contentType.toLowerCase(Locale.ENGLISH).startsWith(AbstractFileUpload.MULTIPART)) {\n            throw new FileUploadContentTypeException(String.format(\"the request doesn't contain a %s or %s stream, content type header is %s\",\n                    AbstractFileUpload.MULTIPART_FORM_DATA, AbstractFileUpload.MULTIPART_MIXED, contentType), contentType);\n        }\n        final var contentLengthInt = requestContext.getContentLength();\n        // @formatter:off\n        final var requestSize = RequestContext.class.isAssignableFrom(requestContext.getClass())\n                                 // Inline conditional is OK here CHECKSTYLE:OFF\n                                 ? requestContext.getContentLength()\n                                 : contentLengthInt;\n                                 // CHECKSTYLE:ON\n        // @formatter:on\n        final InputStream inputStream; // N.B. this is eventually closed in MultipartInput processing\n        if (sizeMax >= 0) {\n            if (requestSize != -1 && requestSize > sizeMax) {\n                throw new FileUploadSizeException(\n                        String.format(\"the request was rejected because its size (%s) exceeds the configured maximum (%s)\", requestSize, sizeMax), sizeMax,\n                        requestSize);\n            }\n            // N.B. this is eventually closed in MultipartInput processing\n            inputStream = new BoundedInputStream(requestContext.getInputStream(), sizeMax) {\n                @Override\n                protected void onMaxLength(final long maxLen, final long count) throws IOException {\n                    throw new FileUploadSizeException(\n                            String.format(\"The request was rejected because its size (%s) exceeds the configured maximum (%s)\", count, maxLen), maxLen, count);\n                }\n            };\n        } else {\n            inputStream = requestContext.getInputStream();\n        }\n\n        final var charset = Charsets.toCharset(fileUploadBase.getHeaderCharset(), requestContext.getCharset());\n        multiPartBoundary = fileUploadBase.getBoundary(contentType);\n        if (multiPartBoundary == null) {\n            IOUtils.closeQuietly(inputStream); // avoid possible resource leak\n            throw new FileUploadException(\"the request was rejected because no multipart boundary was found\");\n        }\n\n        progressNotifier = new MultipartInput.ProgressNotifier(fileUploadBase.getProgressListener(), requestSize);\n        try {\n            multiPartInput = MultipartInput.builder().setInputStream(inputStream).setBoundary(multiPartBoundary).setProgressNotifier(progressNotifier).get();\n        } catch (final IllegalArgumentException e) {\n            IOUtils.closeQuietly(inputStream); // avoid possible resource leak\n            throw new FileUploadContentTypeException(String.format(\"The boundary specified in the %s header is too long\", AbstractFileUpload.CONTENT_TYPE), e);\n        }\n        multiPartInput.setHeaderCharset(charset);\n    }\n\n    /**\n     * Returns the next available {@link FileItemInput}.\n     *\n     * @throws java.util.NoSuchElementException No more items are available. Use {@link #hasNext()} to prevent this exception.\n     * @throws FileUploadException              Parsing or processing the file item failed.\n     * @throws IOException                      Reading the file item failed.\n     * @return FileItemInput instance, which provides access to the next file item.\n     */\n    @Override\n    public FileItemInput next() throws IOException {\n        if (eof || !itemValid && !hasNext()) {\n            throw new NoSuchElementException();\n        }\n        itemValid = false;\n        return currentItem;\n    }\n\n    @Override\n    public void setFileSizeMax(final long fileSizeMax) {\n        this.fileSizeMax = fileSizeMax;\n    }\n\n    @Override\n    public void setSizeMax(final long sizeMax) {\n        this.sizeMax = sizeMax;\n    }\n\n    @Override\n    public Iterator<FileItemInput> unwrap() {\n        // TODO Something better?\n        return (Iterator<FileItemInput>) this;\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInputIterator.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 67
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.IOException;\n\nimport javax.naming.SizeLimitExceededException;\n\nimport org.apache.commons.io.function.IOIterator;\n\n/**\n * An iterator, as returned by {@link AbstractFileUpload#getItemIterator(RequestContext)}.\n */\npublic interface FileItemInputIterator extends IOIterator<FileItemInput> {\n\n    /**\n     * Gets the maximum size of a single file. An {@link FileUploadByteCountLimitException} will be thrown, if there is an uploaded file, which is exceeding\n     * this value. By default, this value will be copied from the {@link AbstractFileUpload#getFileSizeMax() FileUploadBase} object, however, the user may\n     * replace the default value with a request specific value by invoking {@link #setFileSizeMax(long)} on this object.\n     *\n     * @return The maximum size of a single, uploaded file. The value -1 indicates \"unlimited\".\n     */\n    long getFileSizeMax();\n\n    /**\n     * Gets the maximum size of the complete HTTP request. A {@link SizeLimitExceededException} will be thrown, if the HTTP request will exceed this value. By\n     * default, this value will be copied from the {@link AbstractFileUpload#getSizeMax() FileUploadBase} object, however, the user may replace the default\n     * value with a request specific value by invoking {@link #setSizeMax(long)} on this object.\n     *\n     * @return The maximum size of the complete HTTP request. The value -1 indicates \"unlimited\".\n     */\n    long getSizeMax();\n\n    /**\n     * Tests whether another instance of {@link FileItemInput} is available.\n     *\n     * @throws FileUploadException Parsing or processing the file item failed.\n     * @throws IOException         Reading the file item failed.\n     * @return True, if one or more additional file items are available, otherwise false.\n     */\n    @Override\n    boolean hasNext() throws IOException;\n\n    /**\n     * Returns the next available {@link FileItemInput}.\n     *\n     * @throws java.util.NoSuchElementException No more items are available. Use {@link #hasNext()} to prevent this exception.\n     * @throws FileUploadException              Parsing or processing the file item failed.\n     * @throws IOException                      Reading the file item failed.\n     * @return FileItemInput instance, which provides access to the next file item.\n     */\n    @Override\n    FileItemInput next() throws IOException;\n\n    /**\n     * Sets the maximum size of a single file. An {@link FileUploadByteCountLimitException} will be thrown, if there is an uploaded file, which is exceeding\n     * this value. By default, this value will be copied from the {@link AbstractFileUpload#getFileSizeMax() FileUploadBase} object, however, the user may\n     * replace the default value with a request specific value by invoking {@link #setFileSizeMax(long)} on this object, so there is no need to configure it\n     * here.\n     * <p>\n     * <em>Note:</em> Changing this value doesn't affect files, that have already been uploaded.\n     * </p>\n     *\n     * @param fileSizeMax The maximum size of a single, uploaded file. The value -1 indicates \"unlimited\".\n     */\n    void setFileSizeMax(long fileSizeMax);\n\n    /**\n     * Sets the maximum size of the complete HTTP request. A {@link SizeLimitExceededException} will be thrown, if the HTTP request will exceed this value. By\n     * default, this value will be copied from the {@link AbstractFileUpload#getSizeMax() FileUploadBase} object, however, the user may replace the default\n     * value with a request specific value by invoking {@link #setSizeMax(long)} on this object.\n     * <p>\n     * <em>Note:</em> Setting the maximum size on this object will work only, if the iterator is not yet initialized. In other words: If the methods\n     * {@link #hasNext()}, {@link #next()} have not yet been invoked.\n     * </p>\n     *\n     * @param sizeMax The maximum size of the complete HTTP request. The value -1 indicates \"unlimited\".\n     */\n    void setSizeMax(long sizeMax);\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemFactory.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 68
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport org.apache.commons.io.FileCleaningTracker;\nimport org.apache.commons.io.build.AbstractStreamBuilder;\nimport org.apache.commons.io.file.PathUtils;\n\n/**\n * Creates {@link FileItem} instances.\n * <p>\n * Factories can provide their own custom configuration, over and above that provided by the default file upload implementation.\n * </p>\n *\n * @param <I> The {@link FileItem} type this factory creates.\n */\npublic interface FileItemFactory<I extends FileItem<I>> {\n\n    /**\n     * Abstracts building for subclasses.\n     *\n     * @param <I> the type of {@link FileItem} to build.\n     * @param <B> the type of builder subclass.\n     */\n    abstract class AbstractFileItemBuilder<I extends FileItem<I>, B extends AbstractFileItemBuilder<I, B>> extends AbstractStreamBuilder<I, B> {\n\n        public static FileItemHeaders newFileItemHeaders() {\n            return new FileItemHeadersImpl();\n        }\n\n        /**\n         * Field name.\n         */\n        private String fieldName;\n\n        /**\n         * Content type.\n         */\n        private String contentType;\n\n        /**\n         * Is this a form field.\n         */\n        private boolean isFormField;\n\n        /**\n         * File name.\n         */\n        private String fileName;\n\n        /**\n         * File item headers.\n         */\n        private FileItemHeaders fileItemHeaders = newFileItemHeaders();\n\n        /**\n         * The instance of {@link FileCleaningTracker}, which is responsible for deleting temporary files.\n         * <p>\n         * May be null, if tracking files is not required.\n         * </p>\n         */\n        private FileCleaningTracker fileCleaningTracker;\n\n        public AbstractFileItemBuilder() {\n            setBufferSize(DiskFileItemFactory.DEFAULT_THRESHOLD);\n            setPath(PathUtils.getTempDirectory());\n        }\n\n        public String getContentType() {\n            return contentType;\n        }\n\n        public String getFieldName() {\n            return fieldName;\n        }\n\n        public FileCleaningTracker getFileCleaningTracker() {\n            return fileCleaningTracker;\n        }\n\n        public FileItemHeaders getFileItemHeaders() {\n            return fileItemHeaders;\n        }\n\n        public String getFileName() {\n            return fileName;\n        }\n\n        public boolean isFormField() {\n            return isFormField;\n        }\n\n        public B setContentType(final String contentType) {\n            this.contentType = contentType;\n            return asThis();\n        }\n\n        public B setFieldName(final String fieldName) {\n            this.fieldName = fieldName;\n            return asThis();\n        }\n\n        public B setFileCleaningTracker(final FileCleaningTracker fileCleaningTracker) {\n            this.fileCleaningTracker = fileCleaningTracker;\n            return asThis();\n        }\n\n        public B setFileItemHeaders(final FileItemHeaders fileItemHeaders) {\n            this.fileItemHeaders = fileItemHeaders != null ? fileItemHeaders : newFileItemHeaders();\n            return asThis();\n        }\n\n        public B setFileName(final String fileName) {\n            this.fileName = fileName;\n            return asThis();\n        }\n\n        public B setFormField(final boolean isFormField) {\n            this.isFormField = isFormField;\n            return asThis();\n        }\n\n    }\n\n    /**\n     * Creates a new AbstractFileItemBuilder.\n     *\n     * @param <B> The type of AbstractFileItemBuilder.\n     * @return a new AbstractFileItemBuilder.\n     */\n    <B extends AbstractFileItemBuilder<I, B>> AbstractFileItemBuilder<I, B> fileItemBuilder();\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadContentTypeException.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 69
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\n/**\n * Signals that a request is not a multipart request.\n */\npublic class FileUploadContentTypeException extends FileUploadException {\n\n    /**\n     * The exceptions UID, for serializing an instance.\n     */\n    private static final long serialVersionUID = 2;\n\n    /**\n     * The guilty content type.\n     */\n    private String contentType;\n\n    /**\n     * Constructs an instance with the specified detail message.\n     *\n     * @param message     The detail message (which is saved for later retrieval by the {@link #getMessage()} method)\n     * @param contentType The guilty content type.\n     */\n    public FileUploadContentTypeException(final String message, final String contentType) {\n        super(message);\n        this.contentType = contentType;\n    }\n\n    /**\n     * Constructs an instance with the specified detail message and cause.\n     *\n     * @param message The detail message (which is saved for later retrieval by the {@link #getMessage()} method)\n     * @param cause   the original cause\n     */\n    public FileUploadContentTypeException(final String message, final Throwable cause) {\n        super(message, cause);\n    }\n\n    public String getContentType() {\n        return contentType;\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/AbstractFileUpload.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 70
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Objects;\n\nimport org.apache.commons.fileupload2.core.FileItemFactory.AbstractFileItemBuilder;\nimport org.apache.commons.io.IOUtils;\n\n/**\n * High level API for processing file uploads.\n * <p>\n * This class handles multiple files per single HTML widget, sent using {@code multipart/mixed} encoding type, as specified by\n * <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a>. Use {@link #parseRequest(RequestContext)} to acquire a list of {@link FileItem}s associated with\n * a given HTML widget.\n * </p>\n * <p>\n * How the data for individual parts is stored is determined by the factory used to create them; a given part may be in memory, on disk, or somewhere else.\n * </p>\n *\n * @param <R> The request context type.\n * @param <I> The FileItem type.\n * @param <F> the FileItemFactory type.\n */\npublic abstract class AbstractFileUpload<R, I extends FileItem<I>, F extends FileItemFactory<I>> {\n\n    /**\n     * Boundary parameter key.\n     */\n    private static final String BOUNDARY_KEY = \"boundary\";\n\n    /**\n     * Name parameter key.\n     */\n    private static final String NAME_KEY = \"name\";\n\n    /**\n     * File name parameter key.\n     */\n    private static final String FILENAME_KEY = \"filename\";\n\n    /**\n     * HTTP content type header name.\n     */\n    public static final String CONTENT_TYPE = \"Content-type\";\n\n    /**\n     * HTTP content disposition header name.\n     */\n    public static final String CONTENT_DISPOSITION = \"Content-disposition\";\n\n    /**\n     * HTTP content length header name.\n     */\n    public static final String CONTENT_LENGTH = \"Content-length\";\n\n    /**\n     * Content-disposition value for form data.\n     */\n    public static final String FORM_DATA = \"form-data\";\n\n    /**\n     * Content-disposition value for file attachment.\n     */\n    public static final String ATTACHMENT = \"attachment\";\n\n    /**\n     * Part of HTTP content type header.\n     */\n    public static final String MULTIPART = \"multipart/\";\n\n    /**\n     * HTTP content type header for multipart forms.\n     */\n    public static final String MULTIPART_FORM_DATA = \"multipart/form-data\";\n\n    /**\n     * HTTP content type header for multiple uploads.\n     */\n    public static final String MULTIPART_MIXED = \"multipart/mixed\";\n\n    /**\n     * Utility method that determines whether the request contains multipart content.\n     * <p>\n     * <strong>NOTE:</strong> This method will be moved to the {@code ServletFileUpload} class after the FileUpload 1.1 release. Unfortunately, since this\n     * method is static, it is not possible to provide its replacement until this method is removed.\n     * </p>\n     *\n     * @param ctx The request context to be evaluated. Must be non-null.\n     * @return {@code true} if the request is multipart; {@code false} otherwise.\n     */\n    public static final boolean isMultipartContent(final RequestContext ctx) {\n        final var contentType = ctx.getContentType();\n        if (contentType == null) {\n            return false;\n        }\n        return contentType.toLowerCase(Locale.ENGLISH).startsWith(MULTIPART);\n    }\n\n    /**\n     * The maximum size permitted for the complete request, as opposed to {@link #fileSizeMax}. A value of -1 indicates no maximum.\n     */\n    private long sizeMax = -1;\n\n    /**\n     * The maximum size permitted for a single uploaded file, as opposed to {@link #sizeMax}. A value of -1 indicates no maximum.\n     */\n    private long fileSizeMax = -1;\n\n    /**\n     * The maximum permitted number of files that may be uploaded in a single request. A value of -1 indicates no maximum.\n     */\n    private long fileCountMax = -1;\n\n    /**\n     * The content encoding to use when reading part headers.\n     */\n    private Charset headerCharset;\n\n    /**\n     * The progress listener.\n     */\n    private ProgressListener progressListener = ProgressListener.NOP;\n\n    /**\n     * The factory to use to create new form items.\n     */\n    private F fileItemFactory;\n\n    /**\n     * Gets the boundary from the {@code Content-type} header.\n     *\n     * @param contentType The value of the content type header from which to extract the boundary value.\n     * @return The boundary, as a byte array.\n     */\n    public byte[] getBoundary(final String contentType) {\n        final var parser = new ParameterParser();\n        parser.setLowerCaseNames(true);\n        // Parameter parser can handle null input\n        final var params = parser.parse(contentType, new char[] { ';', ',' });\n        final var boundaryStr = params.get(BOUNDARY_KEY);\n        return boundaryStr != null ? boundaryStr.getBytes(StandardCharsets.ISO_8859_1) : null;\n    }\n\n    /**\n     * Gets the field name from the {@code Content-disposition} header.\n     *\n     * @param headers A {@code Map} containing the HTTP request headers.\n     * @return The field name for the current {@code encapsulation}.\n     */\n    public String getFieldName(final FileItemHeaders headers) {\n        return getFieldName(headers.getHeader(CONTENT_DISPOSITION));\n    }\n\n    /**\n     * Gets the field name, which is given by the content-disposition header.\n     *\n     * @param contentDisposition The content-dispositions header value.\n     * @return The field name.\n     */\n    private String getFieldName(final String contentDisposition) {\n        String fieldName = null;\n        if (contentDisposition != null && contentDisposition.toLowerCase(Locale.ENGLISH).startsWith(FORM_DATA)) {\n            final var parser = new ParameterParser();\n            parser.setLowerCaseNames(true);\n            // Parameter parser can handle null input\n            final var params = parser.parse(contentDisposition, ';');\n            fieldName = params.get(NAME_KEY);\n            if (fieldName != null) {\n                fieldName = fieldName.trim();\n            }\n        }\n        return fieldName;\n    }\n\n    /**\n     * Gets the maximum number of files allowed in a single request.\n     *\n     * @return The maximum number of files allowed in a single request.\n     */\n    public long getFileCountMax() {\n        return fileCountMax;\n    }\n\n    /**\n     * Gets the factory class used when creating file items.\n     *\n     * @return The factory class for new file items.\n     */\n    public F getFileItemFactory() {\n        return fileItemFactory;\n    }\n\n    /**\n     * Gets the file name from the {@code Content-disposition} header.\n     *\n     * @param headers The HTTP headers object.\n     *\n     * @return The file name for the current {@code encapsulation}.\n     */\n    public String getFileName(final FileItemHeaders headers) {\n        return getFileName(headers.getHeader(CONTENT_DISPOSITION));\n    }\n\n    /**\n     * Gets the given content-disposition headers file name.\n     *\n     * @param contentDisposition The content-disposition headers value.\n     * @return The file name\n     */\n    private String getFileName(final String contentDisposition) {\n        String fileName = null;\n        if (contentDisposition != null) {\n            final var cdl = contentDisposition.toLowerCase(Locale.ENGLISH);\n            if (cdl.startsWith(FORM_DATA) || cdl.startsWith(ATTACHMENT)) {\n                final var parser = new ParameterParser();\n                parser.setLowerCaseNames(true);\n                // Parameter parser can handle null input\n                final var params = parser.parse(contentDisposition, ';');\n                if (params.containsKey(FILENAME_KEY)) {\n                    fileName = params.get(FILENAME_KEY);\n                    if (fileName != null) {\n                        fileName = fileName.trim();\n                    } else {\n                        // Even if there is no value, the parameter is present,\n                        // so we return an empty file name rather than no file\n                        // name.\n                        fileName = \"\";\n                    }\n                }\n            }\n        }\n        return fileName;\n    }\n\n    /**\n     * Gets the maximum allowed size of a single uploaded file, as opposed to {@link #getSizeMax()}.\n     *\n     * @see #setFileSizeMax(long)\n     * @return Maximum size of a single uploaded file.\n     */\n    public long getFileSizeMax() {\n        return fileSizeMax;\n    }\n\n    /**\n     * Gets the character encoding used when reading the headers of an individual part. When not specified, or {@code null}, the request encoding is used. If\n     * that is also not specified, or {@code null}, the platform default encoding is used.\n     *\n     * @return The encoding used to read part headers.\n     */\n    public Charset getHeaderCharset() {\n        return headerCharset;\n    }\n\n    /**\n     * Gets a file item iterator.\n     *\n     * @param request The servlet request to be parsed.\n     * @return An iterator to instances of {@code FileItemInput} parsed from the request, in the order that they were transmitted.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     * @throws IOException         An I/O error occurred. This may be a network error while communicating with the client or a problem while storing the\n     *                             uploaded content.\n     */\n    public abstract FileItemInputIterator getItemIterator(R request) throws FileUploadException, IOException;\n\n    /**\n     * Gets an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} stream.\n     *\n     * @param requestContext The context for the request to be parsed.\n     * @return An iterator to instances of {@code FileItemInput} parsed from the request, in the order that they were transmitted.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     * @throws IOException         An I/O error occurred. This may be a network error while communicating with the client or a problem while storing the\n     *                             uploaded content.\n     */\n    public FileItemInputIterator getItemIterator(final RequestContext requestContext) throws FileUploadException, IOException {\n        return new FileItemInputIteratorImpl(this, requestContext);\n    }\n\n    /**\n     * Parses the {@code header-part} and returns as key/value pairs.\n     * <p>\n     * If there are multiple headers of the same names, the name will map to a comma-separated list containing the values.\n     * </p>\n     *\n     * @param headerPart The {@code header-part} of the current {@code encapsulation}.\n     * @return A {@code Map} containing the parsed HTTP request headers.\n     */\n    public FileItemHeaders getParsedHeaders(final String headerPart) {\n        final var len = headerPart.length();\n        final var headers = newFileItemHeaders();\n        var start = 0;\n        for (;;) {\n            var end = parseEndOfLine(headerPart, start);\n            if (start == end) {\n                break;\n            }\n            final var header = new StringBuilder(headerPart.substring(start, end));\n            start = end + 2;\n            while (start < len) {\n                var nonWs = start;\n                while (nonWs < len) {\n                    final var c = headerPart.charAt(nonWs);\n                    if (c != ' ' && c != '\\t') {\n                        break;\n                    }\n                    ++nonWs;\n                }\n                if (nonWs == start) {\n                    break;\n                }\n                // Continuation line found\n                end = parseEndOfLine(headerPart, nonWs);\n                header.append(' ').append(headerPart, nonWs, end);\n                start = end + 2;\n            }\n            parseHeaderLine(headers, header.toString());\n        }\n        return headers;\n    }\n\n    /**\n     * Gets the progress listener.\n     *\n     * @return The progress listener, if any, or null.\n     */\n    public ProgressListener getProgressListener() {\n        return progressListener;\n    }\n\n    /**\n     * Gets the maximum allowed size of a complete request, as opposed to {@link #getFileSizeMax()}.\n     *\n     * @return The maximum allowed size, in bytes. The default value of -1 indicates, that there is no limit.\n     * @see #setSizeMax(long)\n     *\n     */\n    public long getSizeMax() {\n        return sizeMax;\n    }\n\n    /**\n     * Creates a new instance of {@link FileItemHeaders}.\n     *\n     * @return The new instance.\n     */\n    protected FileItemHeaders newFileItemHeaders() {\n        return AbstractFileItemBuilder.newFileItemHeaders();\n    }\n\n    /**\n     * Skips bytes until the end of the current line.\n     *\n     * @param headerPart The headers, which are being parsed.\n     * @param end        Index of the last byte, which has yet been processed.\n     * @return Index of the \\r\\n sequence, which indicates end of line.\n     */\n    private int parseEndOfLine(final String headerPart, final int end) {\n        var index = end;\n        for (;;) {\n            final var offset = headerPart.indexOf('\\r', index);\n            if (offset == -1 || offset + 1 >= headerPart.length()) {\n                throw new IllegalStateException(\"Expected headers to be terminated by an empty line.\");\n            }\n            if (headerPart.charAt(offset + 1) == '\\n') {\n                return offset;\n            }\n            index = offset + 1;\n        }\n    }\n\n    /**\n     * Parses the next header line.\n     *\n     * @param headers String with all headers.\n     * @param header  Map where to store the current header.\n     */\n    private void parseHeaderLine(final FileItemHeaders headers, final String header) {\n        final var colonOffset = header.indexOf(':');\n        if (colonOffset == -1) {\n            // This header line is malformed, skip it.\n            return;\n        }\n        final var headerName = header.substring(0, colonOffset).trim();\n        final var headerValue = header.substring(colonOffset + 1).trim();\n        headers.addHeader(headerName, headerValue);\n    }\n\n    /**\n     * Parses an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} stream.\n     *\n     * @param request The servlet request to be parsed.\n     * @return A map of {@code FileItem} instances parsed from the request.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     */\n    public abstract Map<String, List<I>> parseParameterMap(R request) throws FileUploadException;\n\n    /**\n     * Parses an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} stream.\n     *\n     * @param ctx The context for the request to be parsed.\n     * @return A map of {@code FileItem} instances parsed from the request.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     */\n    public Map<String, List<I>> parseParameterMap(final RequestContext ctx) throws FileUploadException {\n        final var items = parseRequest(ctx);\n        final Map<String, List<I>> itemsMap = new HashMap<>(items.size());\n\n        for (final I fileItem : items) {\n            final var fieldName = fileItem.getFieldName();\n            final var mappedItems = itemsMap.computeIfAbsent(fieldName, k -> new ArrayList<>());\n            mappedItems.add(fileItem);\n        }\n\n        return itemsMap;\n    }\n\n    /**\n     * Parses an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} stream.\n     *\n     * @param request The servlet request to be parsed.\n     * @return A list of {@code FileItem} instances parsed from the request, in the order that they were transmitted.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     */\n    public abstract List<I> parseRequest(R request) throws FileUploadException;\n\n    /**\n     * Parses an <a href=\"http://www.ietf.org/rfc/rfc1867.txt\">RFC 1867</a> compliant {@code multipart/form-data} stream.\n     *\n     * @param requestContext The context for the request to be parsed.\n     * @return A list of {@code FileItem} instances parsed from the request, in the order that they were transmitted.\n     * @throws FileUploadException if there are problems reading/parsing the request or storing files.\n     */\n    public List<I> parseRequest(final RequestContext requestContext) throws FileUploadException {\n        final List<I> itemList = new ArrayList<>();\n        var successful = false;\n        try {\n            final var fileItemFactory = Objects.requireNonNull(getFileItemFactory(), \"No FileItemFactory has been set.\");\n            final var buffer = new byte[IOUtils.DEFAULT_BUFFER_SIZE];\n            getItemIterator(requestContext).forEachRemaining(fileItemInput -> {\n                if (itemList.size() == fileCountMax) {\n                    // The next item will exceed the limit.\n                    throw new FileUploadFileCountLimitException(ATTACHMENT, getFileCountMax(), itemList.size());\n                }\n                // Don't use getName() here to prevent an InvalidFileNameException.\n                // @formatter:off\n                final var fileItem = fileItemFactory.fileItemBuilder()\n                    .setFieldName(fileItemInput.getFieldName())\n                    .setContentType(fileItemInput.getContentType())\n                    .setFormField(fileItemInput.isFormField())\n                    .setFileName(fileItemInput.getName())\n                    .setFileItemHeaders(fileItemInput.getHeaders())\n                    .get();\n                // @formatter:on\n                itemList.add(fileItem);\n                try (var inputStream = fileItemInput.getInputStream();\n                        var outputStream = fileItem.getOutputStream()) {\n                    IOUtils.copyLarge(inputStream, outputStream, buffer);\n                } catch (final FileUploadException e) {\n                    throw e;\n                } catch (final IOException e) {\n                    throw new FileUploadException(String.format(\"Processing of %s request failed. %s\", MULTIPART_FORM_DATA, e.getMessage()), e);\n                }\n            });\n            successful = true;\n            return itemList;\n        } catch (final FileUploadException e) {\n            throw e;\n        } catch (final IOException e) {\n            throw new FileUploadException(e.getMessage(), e);\n        } finally {\n            if (!successful) {\n                for (final I fileItem : itemList) {\n                    try {\n                        fileItem.delete();\n                    } catch (final Exception ignored) {\n                        // ignored TODO perhaps add to tracker delete failure list somehow?\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets the maximum number of files allowed per request.\n     *\n     * @param fileCountMax The new limit. {@code -1} means no limit.\n     */\n    public void setFileCountMax(final long fileCountMax) {\n        this.fileCountMax = fileCountMax;\n    }\n\n    /**\n     * Sets the factory class to use when creating file items.\n     *\n     * @param factory The factory class for new file items.\n     */\n    public void setFileItemFactory(final F factory) {\n        this.fileItemFactory = factory;\n    }\n\n    /**\n     * Sets the maximum allowed size of a single uploaded file, as opposed to {@link #getSizeMax()}.\n     *\n     * @see #getFileSizeMax()\n     * @param fileSizeMax Maximum size of a single uploaded file.\n     */\n    public void setFileSizeMax(final long fileSizeMax) {\n        this.fileSizeMax = fileSizeMax;\n    }\n\n    /**\n     * Specifies the character encoding to be used when reading the headers of individual part. When not specified, or {@code null}, the request encoding is\n     * used. If that is also not specified, or {@code null}, the platform default encoding is used.\n     *\n     * @param headerCharset The encoding used to read part headers.\n     */\n    public void setHeaderCharset(final Charset headerCharset) {\n        this.headerCharset = headerCharset;\n    }\n\n    /**\n     * Sets the progress listener.\n     *\n     * @param progressListener The progress listener, if any. Defaults to null.\n     */\n    public void setProgressListener(final ProgressListener progressListener) {\n        this.progressListener = progressListener != null ? progressListener : ProgressListener.NOP;\n    }\n\n    /**\n     * Sets the maximum allowed size of a complete request, as opposed to {@link #setFileSizeMax(long)}.\n     *\n     * @param sizeMax The maximum allowed size, in bytes. The default value of -1 indicates, that there is no limit.\n     * @see #getSizeMax()\n     */\n    public void setSizeMax(final long sizeMax) {\n        this.sizeMax = sizeMax;\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemHeadersImpl.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 71
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\n\n/**\n * Default implementation of the {@link FileItemHeaders} interface.\n */\nclass FileItemHeadersImpl implements FileItemHeaders {\n\n    /**\n     * Map of {@code String} keys to a {@code List} of {@code String} instances.\n     */\n    private final Map<String, List<String>> headerNameToValueListMap = new LinkedHashMap<>();\n\n    /**\n     * Method to add header values to this instance.\n     *\n     * @param name  name of this header\n     * @param value value of this header\n     */\n    @Override\n    public synchronized void addHeader(final String name, final String value) {\n        headerNameToValueListMap.computeIfAbsent(toLowerCase(name), k -> new ArrayList<>()).add(value);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getHeader(final String name) {\n        final var headerValueList = getList(name);\n        if (null == headerValueList) {\n            return null;\n        }\n        return headerValueList.get(0);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Iterator<String> getHeaderNames() {\n        return headerNameToValueListMap.keySet().iterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Iterator<String> getHeaders(final String name) {\n        var headerValueList = getList(name);\n        if (null == headerValueList) {\n            headerValueList = Collections.emptyList();\n        }\n        return headerValueList.iterator();\n    }\n\n    private List<String> getList(final String name) {\n        return headerNameToValueListMap.get(toLowerCase(name));\n    }\n\n    private String toLowerCase(final String value) {\n        return value.toLowerCase(Locale.ENGLISH);\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileUploadSizeException.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 72
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\n/**\n * Signals that a requests permitted size is exceeded.\n */\npublic class FileUploadSizeException extends FileUploadException {\n\n    /**\n     * Serial version UID, being used, if serialized.\n     */\n    private static final long serialVersionUID = 2;\n\n    /**\n     * The actual size of the request.\n     */\n    private final long actual;\n\n    /**\n     * The maximum permitted size of the request.\n     */\n    private final long permitted;\n\n    /**\n     * Constructs an instance.\n     *\n     * @param message   The detail message (which is saved for later retrieval by the {@link #getMessage()} method)\n     * @param permitted The requests size limit.\n     * @param actual    The actual values for the request.\n     */\n    public FileUploadSizeException(final String message, final long permitted, final long actual) {\n        super(message);\n        this.permitted = permitted;\n        this.actual = actual;\n    }\n\n    /**\n     * Gets the actual size of the request.\n     *\n     * @return The actual size of the request.\n     */\n    public long getActualSize() {\n        return actual;\n    }\n\n    /**\n     * Gets the limit size of the request.\n     *\n     * @return The limit size of the request.\n     */\n    public long getPermitted() {\n        return permitted;\n    }\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/package-info.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 73
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * <p>\n * A component for handling HTML file uploads as specified by <a href=\"http://www.ietf.org/rfc/rfc1867.txt\" target=\"_top\">RFC&nbsp;1867</a>. This component\n * provides support for uploads within both servlets (JSR 53) and portlets (JSR 168).\n * </p>\n * <p>\n * While this package provides the generic functionality for file uploads, these classes are not typically used directly. Instead, normal usage involves one of\n * the provided extensions of {@link org.apache.commons.fileupload2.core.AbstractFileUpload} such as\n * {@code org.apache.commons.fileupload2.core.servlet.ServletFileUpload ServletFileUpload} or\n * {@code org.apache.commons.fileupload2.core.portlet.PortletFileUpload PortletFileUpload}, together with a factory for\n * {@link org.apache.commons.fileupload2.core.FileItem} instances, such as {@link org.apache.commons.fileupload2.core.DiskFileItemFactory}.\n * </p>\n * <p>\n * The following is a brief example of typical usage in a servlet, storing the uploaded files on disk.\n * </p>\n *\n * <pre>{@code\n * public void doPost(HttpServletRequest req, HttpServletResponse res) {\n *   DiskFileItemFactory factory = new DiskFileItemFactory.builder()\n *     // maximum size that will be stored in memory\n *     .setSizeThreshold(4096);\n *     // the location for saving data that is larger than getSizeThreshold()\n *     .setPath(Paths.get(\"/tmp\"))\n *     // build it\n *     .get();\n *\n *   ServletFileUpload upload = new ServletFileUpload(factory);\n *   // maximum size before a FileUploadException will be thrown\n *   upload.setSizeMax(1000000);\n *\n *   List fileItems = upload.parseRequest(req);\n *   // assume we know there are two files. The first file is a small\n *   // text file, the second is unknown and is written to a file on\n *   // the server\n *   Iterator i = fileItems.iterator();\n *   String comment = ((FileItem)i.next()).getString();\n *   FileItem fi = (FileItem)i.next();\n *   // file name on the client\n *   String fileName = fi.getName();\n *   // save comment and file name to database\n *   ...\n *   // write the file\n *   fi.write(new File(\"/www/uploads/\", fileName));\n * }\n * }</pre>\n * <p>\n * In the example above, the first file is loaded into memory as a {@code String}. Before calling the {@code getString} method, the data may have been in memory\n * or on disk depending on its size. The second file we assume it will be large and therefore never explicitly load it into memory, though if it is less than\n * 4096 bytes it will be in memory before it is written to its final location. When writing to the final location, if the data is larger than the threshold, an\n * attempt is made to rename the temporary file to the given location. If it cannot be renamed, it is streamed to the new location.\n * </p>\n * <p>\n * Please see the FileUpload <a href=\"https://commons.apache.org/fileupload/using.html\" target=\"_top\">User Guide</a> for further details and examples of how to\n * use this package.\n * </p>\n */\npackage org.apache.commons.fileupload2.core;\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/FileItemInput.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 74
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Provides access to a file or form item that was received within a {@code multipart/form-data} POST request.\n * <p>\n * The items contents are retrieved by calling {@link #getInputStream()}.\n * </p>\n * <p>\n * Instances of this class are created by accessing the iterator, returned by {@link AbstractFileUpload#getItemIterator(RequestContext)}.\n * </p>\n * <p>\n * <em>Note</em>: There is an interaction between the iterator and its associated instances of {@link FileItemInput}: By invoking\n * {@link java.util.Iterator#hasNext()} on the iterator, you discard all data, which hasn't been read so far from the previous data.\n * </p>\n */\npublic interface FileItemInput extends FileItemHeadersProvider<FileItemInput> {\n\n    /**\n     * This exception is thrown, if an attempt is made to read data from the {@link InputStream}, which has been returned by\n     * {@link FileItemInput#getInputStream()}, after {@link java.util.Iterator#hasNext()} has been invoked on the iterator, which created the\n     * {@link FileItemInput}.\n     */\n    class ItemSkippedException extends FileUploadException {\n\n        /**\n         * The exceptions serial version UID, which is being used when serializing an exception instance.\n         */\n        private static final long serialVersionUID = 2;\n\n        /**\n         * Constructs an instance with a given detail message.\n         *\n         * @param message The detail message (which is saved for later retrieval by the {@link #getMessage()} method)\n         */\n        ItemSkippedException(final String message) {\n            super(message);\n        }\n\n    }\n\n    /**\n     * Gets the content type passed by the browser or {@code null} if not defined.\n     *\n     * @return The content type passed by the browser or {@code null} if not defined.\n     */\n    String getContentType();\n\n    /**\n     * Gets the name of the field in the multipart form corresponding to this file item.\n     *\n     * @return The name of the form field.\n     */\n    String getFieldName();\n\n    /**\n     * Opens an {@link InputStream}, which allows to read the items contents.\n     *\n     * @return The input stream, from which the items data may be read.\n     * @throws IllegalStateException The method was already invoked on this item. It is not possible to recreate the data stream.\n     * @throws IOException           An I/O error occurred.\n     * @see ItemSkippedException\n     */\n    InputStream getInputStream() throws IOException;\n\n    /**\n     * Gets the original file name in the client's file system, as provided by the browser (or other client software). In most cases, this will be the base file\n     * name, without path information. However, some clients, such as the Opera browser, do include path information.\n     *\n     * @return The original file name in the client's file system.\n     */\n    String getName();\n\n    /**\n     * Tests whether or not a {@code FileItem} instance represents a simple form field.\n     *\n     * @return {@code true} if the instance represents a simple form field; {@code false} if it represents an uploaded file.\n     */\n    boolean isFormField();\n\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/RFC2231Utils.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 75
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.UnsupportedEncodingException;\n\n/**\n * Utility class to decode/encode character set on HTTP Header fields based on RFC 2231. This implementation adheres to RFC 5987 in particular, which was\n * defined for HTTP headers\n * <p>\n * RFC 5987 builds on RFC 2231, but has lesser scope like <a href=\"https://tools.ietf.org/html/rfc5987#section-3.2\">mandatory charset definition</a> and\n * <a href=\"https://tools.ietf.org/html/rfc5987#section-4\">no parameter continuation</a>\n * </p>\n *\n * @see <a href=\"https://tools.ietf.org/html/rfc2231\">RFC 2231</a>\n * @see <a href=\"https://tools.ietf.org/html/rfc5987\">RFC 5987</a>\n */\nfinal class RFC2231Utils {\n\n    /**\n     * The Hexadecimal values char array.\n     */\n    private static final char[] HEX_DIGITS = \"0123456789ABCDEF\".toCharArray();\n    /**\n     * The Hexadecimal representation of 127.\n     */\n    private static final byte MASK = 0x7f;\n    /**\n     * The Hexadecimal representation of 128.\n     */\n    private static final int MASK_128 = 0x80;\n    /**\n     * The Hexadecimal decode value.\n     */\n    private static final byte[] HEX_DECODE = new byte[MASK_128];\n\n    // create a ASCII decoded array of Hexadecimal values\n    static {\n        for (var i = 0; i < HEX_DIGITS.length; i++) {\n            HEX_DECODE[HEX_DIGITS[i]] = (byte) i;\n            HEX_DECODE[Character.toLowerCase(HEX_DIGITS[i])] = (byte) i;\n        }\n    }\n\n    /**\n     * Decodes a string of text obtained from a HTTP header as per RFC 2231\n     *\n     * <b>Eg 1.</b> {@code us-ascii'en-us'This%20is%20%2A%2A%2Afun%2A%2A%2A} will be decoded to {@code This is ***fun***}\n     *\n     * <b>Eg 2.</b> {@code iso-8859-1'en'%A3%20rate} will be decoded to {@code Â£ rate}.\n     *\n     * <b>Eg 3.</b> {@code UTF-8''%c2%a3%20and%20%e2%82%ac%20rates} will be decoded to {@code Â£ and â¬ rates}.\n     *\n     * @param encodedText - Text to be decoded has a format of {@code <charset>'<language>'<encoded_value>} and ASCII only\n     * @return Decoded text based on charset encoding\n     * @throws UnsupportedEncodingException The requested character set wasn't found.\n     */\n    static String decodeText(final String encodedText) throws UnsupportedEncodingException {\n        final var langDelimitStart = encodedText.indexOf('\\'');\n        if (langDelimitStart == -1) {\n            // missing charset\n            return encodedText;\n        }\n        final var mimeCharset = encodedText.substring(0, langDelimitStart);\n        final var langDelimitEnd = encodedText.indexOf('\\'', langDelimitStart + 1);\n        if (langDelimitEnd == -1) {\n            // missing language\n            return encodedText;\n        }\n        final var bytes = fromHex(encodedText.substring(langDelimitEnd + 1));\n        return new String(bytes, getJavaCharset(mimeCharset));\n    }\n\n    /**\n     * Converts {@code text} to their corresponding Hex value.\n     *\n     * @param text - ASCII text input\n     * @return Byte array of characters decoded from ASCII table\n     */\n    private static byte[] fromHex(final String text) {\n        final var shift = 4;\n        final var out = new ByteArrayOutputStream(text.length());\n        for (var i = 0; i < text.length();) {\n            final var c = text.charAt(i++);\n            if (c == '%') {\n                if (i > text.length() - 2) {\n                    break; // unterminated sequence\n                }\n                final var b1 = HEX_DECODE[text.charAt(i++) & MASK];\n                final var b2 = HEX_DECODE[text.charAt(i++) & MASK];\n                out.write(b1 << shift | b2);\n            } else {\n                out.write((byte) c);\n            }\n        }\n        return out.toByteArray();\n    }\n\n    private static String getJavaCharset(final String mimeCharset) {\n        // good enough for standard values\n        return mimeCharset;\n    }\n\n    /**\n     * Tests if asterisk (*) at the end of parameter name to indicate, if it has charset and language information to decode the value.\n     *\n     * @param paramName The parameter, which is being checked.\n     * @return {@code true}, if encoded as per RFC 2231, {@code false} otherwise\n     */\n    static boolean hasEncodedValue(final String paramName) {\n        if (paramName != null) {\n            return paramName.lastIndexOf('*') == paramName.length() - 1;\n        }\n        return false;\n    }\n\n    /**\n     * If {@code paramName} has Asterisk (*) at the end, it will be stripped off, else the passed value will be returned.\n     *\n     * @param paramName The parameter, which is being inspected.\n     * @return stripped {@code paramName} of Asterisk (*), if RFC2231 encoded\n     */\n    static String stripDelimiter(final String paramName) {\n        if (hasEncodedValue(paramName)) {\n            final var paramBuilder = new StringBuilder(paramName);\n            paramBuilder.deleteCharAt(paramName.lastIndexOf('*'));\n            return paramBuilder.toString();\n        }\n        return paramName;\n    }\n\n    /**\n     * Private constructor so that no instances can be created. This class contains only static utility methods.\n     */\n    private RFC2231Utils() {\n    }\n}\n"
      }
    }, {
      "location" : {
        "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/ProgressListener.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 76
      },
      "contents" : {
        "text" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.fileupload2.core;\n\n/**\n * Receives progress information. May be used to display a progress bar.\n */\n@FunctionalInterface\npublic interface ProgressListener {\n\n    /**\n     * Nop implementation.\n     */\n    ProgressListener NOP = (bytesRead, contentLength, items) -> {\n        // nop\n    };\n\n    /**\n     * Updates the listeners status information.\n     *\n     * @param bytesRead     The total number of bytes, which have been read so far.\n     * @param contentLength The total number of bytes, which are being read. May be -1, if this number is unknown.\n     * @param items         The number of the field, which is currently being read. (0 = no item so far, 1 = first item is being read, ...)\n     */\n    void update(long bytesRead, long contentLength, int items);\n\n}\n"
      }
    } ],
    "results" : [ {
      "ruleId" : "java/implicit-cast-in-compound-assignment",
      "ruleIndex" : 60,
      "rule" : {
        "id" : "java/implicit-cast-in-compound-assignment",
        "index" : 60
      },
      "message" : {
        "text" : "Implicit cast of source type long to narrower destination type int."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/MultipartInput.java",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 410,
            "startColumn" : 13,
            "endColumn" : 24
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "46f243fc1935ad7f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    } ],
    "columnKind" : "utf16CodeUnits",
    "properties" : {
      "metricResults" : [ {
        "rule" : {
          "id" : "java/summary/lines-of-code-kotlin",
          "index" : 99
        },
        "ruleId" : "java/summary/lines-of-code-kotlin",
        "ruleIndex" : 99,
        "value" : 0
      }, {
        "rule" : {
          "id" : "java/summary/lines-of-code",
          "index" : 100
        },
        "ruleId" : "java/summary/lines-of-code",
        "ruleIndex" : 100,
        "value" : 5318,
        "baseline" : 5334
      }, {
        "rule" : {
          "id" : "java/summary/lines-of-code-java",
          "index" : 101
        },
        "ruleId" : "java/summary/lines-of-code-java",
        "ruleIndex" : 101,
        "value" : 5318
      }, {
        "rule" : {
          "id" : "java/telemetry/external-libs",
          "index" : 102
        },
        "ruleId" : "java/telemetry/external-libs",
        "ruleIndex" : 102,
        "value" : 570,
        "message" : {
          "text" : "rt.jar"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/external-libs",
          "index" : 102
        },
        "ruleId" : "java/telemetry/external-libs",
        "ruleIndex" : 102,
        "value" : 80,
        "message" : {
          "text" : "commons-io-2.13.0.jar"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/external-libs",
          "index" : 102
        },
        "ruleId" : "java/telemetry/external-libs",
        "ruleIndex" : 102,
        "value" : 11,
        "message" : {
          "text" : "jakarta.servlet-api-5.0.0.jar"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/external-libs",
          "index" : 102
        },
        "ruleId" : "java/telemetry/external-libs",
        "ruleIndex" : 102,
        "value" : 10,
        "message" : {
          "text" : "servlet-api-2.5.jar"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/external-libs",
          "index" : 102
        },
        "ruleId" : "java/telemetry/external-libs",
        "ruleIndex" : 102,
        "value" : 5,
        "message" : {
          "text" : "portlet-api-1.0.jar"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/external-libs",
          "index" : 102
        },
        "ruleId" : "java/telemetry/external-libs",
        "ruleIndex" : 102,
        "value" : 1,
        "message" : {
          "text" : "commons-lang3-3.12.0.jar"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 51,
        "message" : {
          "text" : "java.util.Map#get(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 32,
        "message" : {
          "text" : "java.util.List#get(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 30,
        "message" : {
          "text" : "java.util.List#size()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 27,
        "message" : {
          "text" : "java.lang.String#getBytes(Charset)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 18,
        "message" : {
          "text" : "java.util.Iterator#hasNext()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 16,
        "message" : {
          "text" : "java.util.Map#containsKey(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 14,
        "message" : {
          "text" : "java.lang.String#length()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 13,
        "message" : {
          "text" : "java.io.ByteArrayInputStream#ByteArrayInputStream(byte\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 13,
        "message" : {
          "text" : "java.util.Map#put(Object,Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 13,
        "message" : {
          "text" : "java.util.Iterator#next()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 12,
        "message" : {
          "text" : "java.io.OutputStream#write(byte\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 12,
        "message" : {
          "text" : "java.lang.String#format(String,Object\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 10,
        "message" : {
          "text" : "java.lang.String#getBytes()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 9,
        "message" : {
          "text" : "java.lang.IllegalStateException#IllegalStateException(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 9,
        "message" : {
          "text" : "java.io.ByteArrayOutputStream#toByteArray()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 9,
        "message" : {
          "text" : "java.lang.String#charAt(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 9,
        "message" : {
          "text" : "java.lang.String#toLowerCase(Locale)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 8,
        "message" : {
          "text" : "java.lang.String#contains(CharSequence)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 8,
        "message" : {
          "text" : "java.io.InputStream#read(byte\\[\\],int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 8,
        "message" : {
          "text" : "java.lang.System#arraycopy(Object,int,Object,int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 7,
        "message" : {
          "text" : "java.lang.String#startsWith(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 7,
        "message" : {
          "text" : "java.io.ByteArrayOutputStream#write(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 7,
        "message" : {
          "text" : "java.lang.String#substring(int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 7,
        "message" : {
          "text" : "java.io.Writer#write(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 7,
        "message" : {
          "text" : "java.lang.String#String(byte\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 7,
        "message" : {
          "text" : "java.lang.String#indexOf(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 6,
        "message" : {
          "text" : "java.lang.StringBuilder#toString()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 6,
        "message" : {
          "text" : "org.apache.commons.io.file.PathUtils#getTempDirectory()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 6,
        "message" : {
          "text" : "java.io.IOException#IOException(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 5,
        "message" : {
          "text" : "java.util.List#iterator()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 5,
        "message" : {
          "text" : "java.lang.StringBuilder#append(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 5,
        "message" : {
          "text" : "java.io.InputStream#read()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 5,
        "message" : {
          "text" : "java.lang.Math#min(int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 4,
        "message" : {
          "text" : "java.nio.file.InvalidPathException#getMessage()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 4,
        "message" : {
          "text" : "java.lang.String#trim()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 4,
        "message" : {
          "text" : "java.lang.Throwable#getMessage()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 4,
        "message" : {
          "text" : "java.util.Map#size()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 3,
        "message" : {
          "text" : "java.lang.StringBuilder#append(CharSequence,int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 3,
        "message" : {
          "text" : "java.util.List#add(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 3,
        "message" : {
          "text" : "java.io.OutputStream#write(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 3,
        "message" : {
          "text" : "java.nio.file.Path#resolve(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 3,
        "message" : {
          "text" : "java.io.File#toPath()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 3,
        "message" : {
          "text" : "java.lang.String#indexOf(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 3,
        "message" : {
          "text" : "java.lang.String#substring(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 3,
        "message" : {
          "text" : "org.apache.commons.io.output.DeferredFileOutputStream#getFile()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 3,
        "message" : {
          "text" : "java.nio.file.Files#exists(Path,LinkOption\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.FileCleaningTracker#exitWhenFinished()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.function.IOSupplier#get()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.util.Collections#enumeration(Collection)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.util.Hashtable#put(Object,Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.nio.file.Path#toFile()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.util.Objects#requireNonNull(Object,String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.Long#parseLong(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.IllegalArgumentException#IllegalArgumentException(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.Integer#intValue()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.Class#getName()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.io.InputStream#close()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.nio.file.Files#readAllBytes(Path)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.Object#getClass()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#toCharArray()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#equals(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.util.Map#keySet()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#lastIndexOf(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#isEmpty()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.output.DeferredFileOutputStream#getData()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#String(byte\\[\\],Charset)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#String(byte\\[\\],String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.Long#longValue()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.StringBuilder#append(char)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.StringBuilder#StringBuilder(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.StringBuilder#StringBuilder(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.input.BoundedInputStream#BoundedInputStream(InputStream,long)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.file.PathUtils#deleteDirectory(Path)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.Throwable#getCause()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.IOUtils#closeQuietly(InputStream)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.IOUtils#copy(InputStream,OutputStream)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.util.Map#computeIfAbsent(Object,Function)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#equalsIgnoreCase(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Class#isAssignableFrom(Class)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Class#getSimpleName()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Integer#valueOf(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Integer#toString(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Long#valueOf(long)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Math#max(int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Math#min(long,long)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.lang.String#replace(char,char)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.lang.String#String(char\\[\\],int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Throwable#toString()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.io.ByteArrayInputStream#read(byte\\[\\],int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.io.ByteArrayInputStream#read()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.io.ByteArrayOutputStream#toString(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.io.FilterInputStream#read()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.io.ObjectOutputStream#writeObject(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.io.PrintStream#println(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.nio.charset.Charset#name()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Files#move(Path,Path,CopyOption\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Files#delete(Path)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Files#createDirectories(Path,FileAttribute\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Files#newOutputStream(Path,OpenOption\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api",
          "index" : 103
        },
        "ruleId" : "java/telemetry/supported-external-api",
        "ruleIndex" : 103,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Files#newInputStream(Path,OpenOption\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 8,
        "message" : {
          "text" : "Number of diagnostics from CodeQL Java extractor with severity 2"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 249,
        "message" : {
          "text" : "Number of files with extension class"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 11,
        "message" : {
          "text" : "Number of files with extension jar"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 481,
        "message" : {
          "text" : "Number of files with extension sig"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 77,
        "message" : {
          "text" : "Number of files with extension java"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 38,
        "message" : {
          "text" : "Number of files with extension xml"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 1,
        "message" : {
          "text" : "Annotation processors enabled: true"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 1,
        "message" : {
          "text" : "Used annotation processor: lombok.launch.AnnotationProcessorHider$AnnotationProcessor"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 1,
        "message" : {
          "text" : "Used annotation processor: lombok.launch.AnnotationProcessorHider$ClaimingProcessor"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 8,
        "message" : {
          "text" : "Total number of diagnostics from CodeQL Java extractor"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 5318,
        "message" : {
          "text" : "Number of lines of code with extension java"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 4757,
        "message" : {
          "text" : "Number of lines of code with extension xml"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 11362,
        "message" : {
          "text" : "Total number of lines with extension java"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 4757,
        "message" : {
          "text" : "Total number of lines with extension xml"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 857,
        "message" : {
          "text" : "Number of files"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 16119,
        "message" : {
          "text" : "Total number of lines"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/extraction-information",
          "index" : 104
        },
        "ruleId" : "java/telemetry/extraction-information",
        "ruleIndex" : 104,
        "value" : 10075,
        "message" : {
          "text" : "Number of lines of code"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 51,
        "message" : {
          "text" : "java.util.Map#get(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 32,
        "message" : {
          "text" : "java.util.List#get(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 27,
        "message" : {
          "text" : "java.lang.String#getBytes(Charset)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 13,
        "message" : {
          "text" : "java.util.Iterator#next()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 13,
        "message" : {
          "text" : "java.util.Map#put(Object,Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 13,
        "message" : {
          "text" : "java.io.ByteArrayInputStream#ByteArrayInputStream(byte\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 12,
        "message" : {
          "text" : "java.io.OutputStream#write(byte\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 12,
        "message" : {
          "text" : "java.lang.String#format(String,Object\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 10,
        "message" : {
          "text" : "java.lang.String#getBytes()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 9,
        "message" : {
          "text" : "java.lang.String#charAt(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 9,
        "message" : {
          "text" : "java.lang.IllegalStateException#IllegalStateException(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 9,
        "message" : {
          "text" : "java.lang.String#toLowerCase(Locale)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 9,
        "message" : {
          "text" : "java.io.ByteArrayOutputStream#toByteArray()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 8,
        "message" : {
          "text" : "java.lang.System#arraycopy(Object,int,Object,int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 8,
        "message" : {
          "text" : "java.io.InputStream#read(byte\\[\\],int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 7,
        "message" : {
          "text" : "java.io.ByteArrayOutputStream#write(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 7,
        "message" : {
          "text" : "java.io.Writer#write(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 7,
        "message" : {
          "text" : "java.lang.String#substring(int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 7,
        "message" : {
          "text" : "java.lang.String#String(byte\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 6,
        "message" : {
          "text" : "java.io.IOException#IOException(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 6,
        "message" : {
          "text" : "java.lang.StringBuilder#toString()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 5,
        "message" : {
          "text" : "java.io.InputStream#read()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 5,
        "message" : {
          "text" : "java.util.List#iterator()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 5,
        "message" : {
          "text" : "java.lang.StringBuilder#append(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 4,
        "message" : {
          "text" : "java.lang.Throwable#getMessage()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 4,
        "message" : {
          "text" : "java.lang.String#trim()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 4,
        "message" : {
          "text" : "java.nio.file.InvalidPathException#getMessage()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 3,
        "message" : {
          "text" : "java.lang.String#substring(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 3,
        "message" : {
          "text" : "java.io.File#toPath()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 3,
        "message" : {
          "text" : "java.util.List#add(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 3,
        "message" : {
          "text" : "org.apache.commons.io.output.DeferredFileOutputStream#getFile()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 3,
        "message" : {
          "text" : "java.io.OutputStream#write(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 3,
        "message" : {
          "text" : "java.nio.file.Path#resolve(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 3,
        "message" : {
          "text" : "java.lang.StringBuilder#append(CharSequence,int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.output.DeferredFileOutputStream#getData()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.Integer#intValue()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.Long#longValue()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.Long#parseLong(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#toCharArray()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#equals(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#String(byte\\[\\],Charset)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#String(byte\\[\\],String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.StringBuilder#append(char)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.StringBuilder#StringBuilder(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.StringBuilder#StringBuilder(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.Throwable#getCause()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.util.Map#computeIfAbsent(Object,Function)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.util.Map#keySet()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.util.Collections#enumeration(Collection)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.util.Hashtable#put(Object,Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.util.Objects#requireNonNull(Object,String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.nio.file.Path#toFile()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.IOUtils#copy(InputStream,OutputStream)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.input.BoundedInputStream#BoundedInputStream(InputStream,long)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 2,
        "message" : {
          "text" : "java.lang.IllegalArgumentException#IllegalArgumentException(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Long#valueOf(long)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.util.Hashtable#remove(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.util.HashMap#put(Object,Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.util.Collections#unmodifiableMap(Map)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.io.FilterInputStream#read()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.util.Base64$Decoder#decode(byte\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.util.Arrays#asList(Object\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.util.Set#iterator()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.io.ObjectOutputStream#writeObject(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Throwable#toString()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.lang.String#String(char\\[\\],int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.lang.String#replace(char,char)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.io.ByteArrayOutputStream#toString(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.io.file.PathUtils#visitFileTree(FileVisitor,Path)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Integer#toString(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Paths#get(String,String\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.util.concurrent.atomic.AtomicInteger#AtomicInteger(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.io.function.IOIterator#forEachRemaining(IOConsumer)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.io.function.Uncheck#get(IOSupplier)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.io.IOUtils#copyLarge(InputStream,OutputStream,byte\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.io.IOUtils#copyLarge(InputStream,OutputStream)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.util.Hashtable#keys()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Integer#valueOf(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.io.ByteArrayInputStream#read(byte\\[\\],int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.io.ByteArrayInputStream#read()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 105
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 105,
        "value" : 1,
        "message" : {
          "text" : "java.util.Hashtable#get(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sinks",
          "index" : 106
        },
        "ruleId" : "java/telemetry/supported-external-api-sinks",
        "ruleIndex" : 106,
        "value" : 7,
        "message" : {
          "text" : "java.io.Writer#write(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sinks",
          "index" : 106
        },
        "ruleId" : "java/telemetry/supported-external-api-sinks",
        "ruleIndex" : 106,
        "value" : 3,
        "message" : {
          "text" : "java.nio.file.Path#resolve(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sinks",
          "index" : 106
        },
        "ruleId" : "java/telemetry/supported-external-api-sinks",
        "ruleIndex" : 106,
        "value" : 2,
        "message" : {
          "text" : "java.nio.file.Files#readAllBytes(Path)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sinks",
          "index" : 106
        },
        "ruleId" : "java/telemetry/supported-external-api-sinks",
        "ruleIndex" : 106,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Files#createDirectories(Path,FileAttribute\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sinks",
          "index" : 106
        },
        "ruleId" : "java/telemetry/supported-external-api-sinks",
        "ruleIndex" : 106,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Files#newOutputStream(Path,OpenOption\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sinks",
          "index" : 106
        },
        "ruleId" : "java/telemetry/supported-external-api-sinks",
        "ruleIndex" : 106,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Files#newInputStream(Path,OpenOption\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sinks",
          "index" : 106
        },
        "ruleId" : "java/telemetry/supported-external-api-sinks",
        "ruleIndex" : 106,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Paths#get(String,String\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sinks",
          "index" : 106
        },
        "ruleId" : "java/telemetry/supported-external-api-sinks",
        "ruleIndex" : 106,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Files#delete(Path)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sinks",
          "index" : 106
        },
        "ruleId" : "java/telemetry/supported-external-api-sinks",
        "ruleIndex" : 106,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Files#move(Path,Path,CopyOption\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sinks",
          "index" : 106
        },
        "ruleId" : "java/telemetry/supported-external-api-sinks",
        "ruleIndex" : 106,
        "value" : 1,
        "message" : {
          "text" : "java.io.PrintStream#println(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 7,
        "message" : {
          "text" : "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 7,
        "message" : {
          "text" : "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSize(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 6,
        "message" : {
          "text" : "org.apache.commons.io.build.AbstractSupplier#asThis()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 5,
        "message" : {
          "text" : "org.apache.commons.io.build.AbstractOriginSupplier#setPath(Path)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 4,
        "message" : {
          "text" : "java.io.ByteArrayOutputStream#ByteArrayOutputStream(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 4,
        "message" : {
          "text" : "java.text.ParseException#ParseException(String,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 4,
        "message" : {
          "text" : "org.apache.commons.io.build.AbstractOriginSupplier#setInputStream(InputStream)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 4,
        "message" : {
          "text" : "java.lang.String#indexOf(int,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 3,
        "message" : {
          "text" : "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 3,
        "message" : {
          "text" : "org.apache.commons.io.Charsets#toCharset(Charset,Charset)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 3,
        "message" : {
          "text" : "java.lang.Math#toIntExact(long)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "java.lang.Character#isWhitespace(char)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "javax.servlet.ServletContextEvent#getServletContext()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "java.nio.file.InvalidPathException#getIndex()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "java.nio.file.InvalidPathException#getInput()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "java.io.IOException#IOException(String,Throwable)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.build.AbstractStreamBuilder#setCharsetDefault(Charset)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.build.AbstractStreamBuilder#getPath()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "jakarta.servlet.ServletContextEvent#getServletContext()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "org.apache.commons.io.Charsets#toCharset(String,Charset)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "java.io.OutputStreamWriter#OutputStreamWriter(OutputStream,Charset)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 2,
        "message" : {
          "text" : "java.io.UnsupportedEncodingException#UnsupportedEncodingException(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.io.OutputStreamWriter#flush()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.nio.charset.Charset#defaultCharset()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.Files#createTempFile(String,String,FileAttribute\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.nio.file.InvalidPathException#InvalidPathException(String,String,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.util.concurrent.atomic.AtomicInteger#getAndIncrement()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "javax.portlet.ActionRequest#getContentLength()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "javax.portlet.ActionRequest#getContentType()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "javax.portlet.ActionRequest#getCharacterEncoding()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "javax.portlet.ActionRequest#getPortletInputStream()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "javax.servlet.ServletContext#setAttribute(String,Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "javax.servlet.ServletContext#getAttribute(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "javax.servlet.ServletRequest#getContentType()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "javax.servlet.ServletRequest#getContentLength()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "javax.servlet.ServletRequest#getCharacterEncoding()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "javax.servlet.http.HttpServletRequest#getMethod()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSizeDefault(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.io.output.DeferredFileOutputStream$Builder#setThreshold(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.io.output.DeferredFileOutputStream$Builder#setOutputFile(File)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.io.output.DeferredFileOutputStream$Builder#get()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.io.output.DeferredFileOutputStream#builder()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "org.apache.commons.lang3.SerializationUtils#deserialize(byte\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Character#digit(char,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "jakarta.servlet.ServletContext#getAttribute(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "jakarta.servlet.ServletRequest#getInputStream()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "jakarta.servlet.ServletRequest#getContentType()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "jakarta.servlet.ServletRequest#getContentLength()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "jakarta.servlet.ServletRequest#getCharacterEncoding()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "jakarta.servlet.ServletContext#setAttribute(String,Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Character#toLowerCase(char)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.lang.IllegalStateException#IllegalStateException(Throwable)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.lang.String#indexOf(String,int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.lang.StringBuilder#deleteCharAt(int)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.lang.Throwable#getSuppressed()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.util.Base64#getMimeDecoder()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.util.Locale#getAvailableLocales()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.util.Locale#getDefault()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "jakarta.servlet.http.HttpServletRequest#getMethod()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "jakarta.servlet.http.HttpServletRequest#getHeader(String)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "jakarta.servlet.http.HttpSession#getServletContext()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.util.function.Function#apply(Object)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.util.function.LongSupplier#getAsLong()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.io.FilterInputStream#FilterInputStream(InputStream)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.io.ObjectOutputStream#flush()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 107
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 107,
        "value" : 1,
        "message" : {
          "text" : "java.io.ObjectOutputStream#ObjectOutputStream(OutputStream)"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sources",
          "index" : 108
        },
        "ruleId" : "java/telemetry/supported-external-api-sources",
        "ruleIndex" : 108,
        "value" : 1,
        "message" : {
          "text" : "javax.servlet.ServletRequest#getInputStream()"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-sources",
          "index" : 108
        },
        "ruleId" : "java/telemetry/supported-external-api-sources",
        "ruleIndex" : 108,
        "value" : 1,
        "message" : {
          "text" : "javax.servlet.http.HttpServletRequest#getHeader(String)"
        }
      } ],
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}